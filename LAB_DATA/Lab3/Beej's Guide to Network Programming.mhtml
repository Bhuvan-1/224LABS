From: <Saved by Blink>
Snapshot-Content-Location: https://beej.us/guide/bgnet/html/
Subject: Beej's Guide to Network Programming
Date: Fri, 28 Jan 2022 08:56:20 -0000
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--ojhY9uEodBy4uXu3c34XxcgrJTzoZvfDUtYUFOiVCv----"


------MultipartBoundary--ojhY9uEodBy4uXu3c34XxcgrJTzoZvfDUtYUFOiVCv----
Content-Type: text/html
Content-ID: <frame-B0710199AE5CA85F9C70D5EC37E9B7D3@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://beej.us/guide/bgnet/html/

<!DOCTYPE html><html xmlns=3D"http://www.w3.org/1999/xhtml" lang=3D"" xml:l=
ang=3D""><head><meta http-equiv=3D"Content-Type" content=3D"text/html; char=
set=3DUTF-8"><link rel=3D"stylesheet" type=3D"text/css" href=3D"cid:css-bc6=
81b49-813e-4bc2-97ba-0cf302325b92@mhtml.blink" /><link rel=3D"stylesheet" t=
ype=3D"text/css" href=3D"cid:css-b3c7a2e0-a9fb-479e-bdf8-df9f1647c16a@mhtml=
.blink" />
 =20
  <meta name=3D"generator" content=3D"pandoc">
  <meta name=3D"viewport" content=3D"width=3Ddevice-width, initial-scale=3D=
1.0, user-scalable=3Dyes">
  <title>Beej's Guide to Network Programming</title>
 =20
  <!--[if lt IE 9]>
    <script src=3D"//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5sh=
iv-printshiv.min.js"></script>
  <![endif]-->
  <link href=3D"https://fonts.googleapis.com/css?family=3DRoboto|Roboto+Mon=
o&amp;display=3Dswap" rel=3D"stylesheet">=20

  <!-- BG custom styling -->
 =20
</head>
<body>
<header id=3D"title-block-header">
<h1 class=3D"title">Beej's Guide to Network Programming</h1>
<p class=3D"subtitle">Using Internet Sockets</p>
<p class=3D"author">Brian =E2=80=9CBeej Jorgensen=E2=80=9D Hall</p>
<p class=3D"date">v3.1.5, Copyright =C2=A9 November 20, 2020</p>
</header>
<nav id=3D"TOC" role=3D"doc-toc">
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#intro"><span class=3D"toc-=
section-number">1</span> Intro</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#audience"><span class=3D"t=
oc-section-number">1.1</span> Audience</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#platform-and-compiler"><sp=
an class=3D"toc-section-number">1.2</span> Platform and Compiler</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#official-homepage-and-book=
s-for-sale"><span class=3D"toc-section-number">1.3</span> Official Homepage=
 and Books For Sale</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#solaris"><span class=3D"to=
c-section-number">1.4</span> Note for Solaris/SunOS Programmers</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#windows"><span class=3D"to=
c-section-number">1.5</span> Note for Windows Programmers</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#email-policy"><span class=
=3D"toc-section-number">1.6</span> Email Policy</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#mirroring"><span class=3D"=
toc-section-number">1.7</span> Mirroring</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#note-for-translators"><spa=
n class=3D"toc-section-number">1.8</span> Note for Translators</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#legal"><span class=3D"toc-=
section-number">1.9</span> Copyright, Distribution, and Legal</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#dedication"><span class=3D=
"toc-section-number">1.10</span> Dedication</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#publishing-information"><s=
pan class=3D"toc-section-number">1.11</span> Publishing Information</a></li=
>
</ul></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#what-is-a-socket"><span cl=
ass=3D"toc-section-number">2</span> What is a socket?</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#two-types-of-internet-sock=
ets"><span class=3D"toc-section-number">2.1</span> Two Types of Internet So=
ckets</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#lowlevel"><span class=3D"t=
oc-section-number">2.2</span> Low level Nonsense and Network Theory</a></li=
>
</ul></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#ip-addresses-structs-and-d=
ata-munging"><span class=3D"toc-section-number">3</span> IP Addresses, <cod=
e>struct</code>s, and Data Munging</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#ip-addresses-versions-4-an=
d-6"><span class=3D"toc-section-number">3.1</span> IP Addresses, versions 4=
 and 6</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#subnets"><span class=3D"to=
c-section-number">3.1.1</span> Subnets</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#port-numbers"><span class=
=3D"toc-section-number">3.1.2</span> Port Numbers</a></li>
</ul></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#byte-order"><span class=3D=
"toc-section-number">3.2</span> Byte Order</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#structs"><span class=3D"to=
c-section-number">3.3</span> <code>struct</code>s</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#ip-addresses-part-deux"><s=
pan class=3D"toc-section-number">3.4</span> IP Addresses, Part Deux</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#private-or-disconnected-ne=
tworks"><span class=3D"toc-section-number">3.4.1</span> Private (Or Disconn=
ected) Networks</a></li>
</ul></li>
</ul></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#jumping-from-ipv4-to-ipv6"=
><span class=3D"toc-section-number">4</span> Jumping from IPv4 to IPv6</a><=
/li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#system-calls-or-bust"><spa=
n class=3D"toc-section-number">5</span> System Calls or Bust</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#getaddrinfoprepare-to-laun=
ch"><span class=3D"toc-section-number">5.1</span> <code>getaddrinfo()</code=
>=E2=80=94Prepare to launch!</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#socket"><span class=3D"toc=
-section-number">5.2</span> <code>socket()</code>=E2=80=94Get the File Desc=
riptor!</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#bind"><span class=3D"toc-s=
ection-number">5.3</span> <code>bind()</code>=E2=80=94What port am I on?</a=
></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#connect"><span class=3D"to=
c-section-number">5.4</span> <code>connect()</code>=E2=80=94Hey, you!</a></=
li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#listen"><span class=3D"toc=
-section-number">5.5</span> <code>listen()</code>=E2=80=94Will somebody ple=
ase call me?</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#acceptthank-you-for-callin=
g-port-3490."><span class=3D"toc-section-number">5.6</span> <code>accept()<=
/code>=E2=80=94=E2=80=9CThank you for calling port 3490.=E2=80=9D</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#sendrecv"><span class=3D"t=
oc-section-number">5.7</span> <code>send()</code> and <code>recv()</code>=
=E2=80=94Talk to me, baby!</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#sendtorecv"><span class=3D=
"toc-section-number">5.8</span> <code>sendto()</code> and <code>recvfrom()<=
/code>=E2=80=94Talk to me, DGRAM-style</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#close-and-shutdownget-outt=
a-my-face"><span class=3D"toc-section-number">5.9</span> <code>close()</cod=
e> and <code>shutdown()</code>=E2=80=94Get outta my face!</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#getpeernamewho-are-you"><s=
pan class=3D"toc-section-number">5.10</span> <code>getpeername()</code>=E2=
=80=94Who are you?</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#gethostnamewho-am-i"><span=
 class=3D"toc-section-number">5.11</span> <code>gethostname()</code>=E2=80=
=94Who am I?</a></li>
</ul></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#client-server-background">=
<span class=3D"toc-section-number">6</span> Client-Server Background</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#a-simple-stream-server"><s=
pan class=3D"toc-section-number">6.1</span> A Simple Stream Server</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#a-simple-stream-client"><s=
pan class=3D"toc-section-number">6.2</span> A Simple Stream Client</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#datagram"><span class=3D"t=
oc-section-number">6.3</span> Datagram Sockets</a></li>
</ul></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#slightly-advanced-techniqu=
es"><span class=3D"toc-section-number">7</span> Slightly Advanced Technique=
s</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#blocking"><span class=3D"t=
oc-section-number">7.1</span> Blocking</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#poll"><span class=3D"toc-s=
ection-number">7.2</span> <code>poll()</code>=E2=80=94Synchronous I/O Multi=
plexing</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#select"><span class=3D"toc=
-section-number">7.3</span> <code>select()</code>=E2=80=94Synchronous I/O M=
ultiplexing, Old School</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#sendall"><span class=3D"to=
c-section-number">7.4</span> Handling Partial <code>send()</code>s</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#serialization"><span class=
=3D"toc-section-number">7.5</span> Serialization=E2=80=94How to Pack Data</=
a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#sonofdataencap"><span clas=
s=3D"toc-section-number">7.6</span> Son of Data Encapsulation</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#broadcast-packetshello-wor=
ld"><span class=3D"toc-section-number">7.7</span> Broadcast Packets=E2=80=
=94Hello, World!</a></li>
</ul></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#common-questions"><span cl=
ass=3D"toc-section-number">8</span> Common Questions</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#man-pages"><span class=3D"=
toc-section-number">9</span> Man Pages</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#acceptman"><span class=3D"=
toc-section-number">9.1</span> <code>accept()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#bindman"><span class=3D"to=
c-section-number">9.2</span> <code>bind()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#connectman"><span class=3D=
"toc-section-number">9.3</span> <code>connect()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#closeman"><span class=3D"t=
oc-section-number">9.4</span> <code>close()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#getaddrinfoman"><span clas=
s=3D"toc-section-number">9.5</span> <code>getaddrinfo()</code>, <code>freea=
ddrinfo()</code>, <code>gai_strerror()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#gethostnameman"><span clas=
s=3D"toc-section-number">9.6</span> <code>gethostname()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#gethostbynameman"><span cl=
ass=3D"toc-section-number">9.7</span> <code>gethostbyname()</code>, <code>g=
ethostbyaddr()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#getnameinfoman"><span clas=
s=3D"toc-section-number">9.8</span> <code>getnameinfo()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#getpeernameman"><span clas=
s=3D"toc-section-number">9.9</span> <code>getpeername()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#errnoman"><span class=3D"t=
oc-section-number">9.10</span> <code>errno</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#fcntlman"><span class=3D"t=
oc-section-number">9.11</span> <code>fcntl()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#htonsman"><span class=3D"t=
oc-section-number">9.12</span> <code>htons()</code>, <code>htonl()</code>, =
<code>ntohs()</code>, <code>ntohl()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#inet_ntoaman"><span class=
=3D"toc-section-number">9.13</span> <code>inet_ntoa()</code>, <code>inet_at=
on()</code>, <code>inet_addr</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#inet_ntopman"><span class=
=3D"toc-section-number">9.14</span> <code>inet_ntop()</code>, <code>inet_pt=
on()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#listenman"><span class=3D"=
toc-section-number">9.15</span> <code>listen()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#perrorman"><span class=3D"=
toc-section-number">9.16</span> <code>perror()</code>, <code>strerror()</co=
de></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#pollman"><span class=3D"to=
c-section-number">9.17</span> <code>poll()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#recvman"><span class=3D"to=
c-section-number">9.18</span> <code>recv()</code>, <code>recvfrom()</code><=
/a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#selectman"><span class=3D"=
toc-section-number">9.19</span> <code>select()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#setsockoptman"><span class=
=3D"toc-section-number">9.20</span> <code>setsockopt()</code>, <code>getsoc=
kopt()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#sendman"><span class=3D"to=
c-section-number">9.21</span> <code>send()</code>, <code>sendto()</code></a=
></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#shutdownman"><span class=
=3D"toc-section-number">9.22</span> <code>shutdown()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#socketman"><span class=3D"=
toc-section-number">9.23</span> <code>socket()</code></a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#structsockaddrman"><span c=
lass=3D"toc-section-number">9.24</span> <code>struct sockaddr</code> and pa=
ls</a></li>
</ul></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#more-references"><span cla=
ss=3D"toc-section-number">10</span> More References</a>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/html/#books"><span class=3D"toc-=
section-number">10.1</span> Books</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#web-references"><span clas=
s=3D"toc-section-number">10.2</span> Web References</a></li>
<li><a href=3D"https://beej.us/guide/bgnet/html/#rfcs"><span class=3D"toc-s=
ection-number">10.3</span> RFCs</a></li>
</ul></li>
</ul>
</nav>
<!--
Beej's Guide to Network Programming book source

# vim: ts=3D4:sw=3D4:nosi:et:tw=3D72
-->
<!--
    History:

    2.3.2:        socket man page
    2.3.3:        sockaddr_in man page
    2.3.4:        bind, listen man page
    2.3.5:        connect man page
    2.3.6:        listen, perror man page
    2.3.7:        errno man page
    2.3.8:        htonl etc man page
    2.3.9:        close man page, expanded man page leader
    2.3.10:        inet_ntoa, setsockopt man pages
    2.3.11:        getpeername man page
    2.3.12:        send/sendto man pages
    2.3.13:        shutdown man pages
    2.3.14:        gethostname man pages, fix inet_aton links
    2.3.15:        fcntl man page
    2.3.16:        recv/recvfrom man page
    2.3.17:        gethostbyname/gethostbyaddr man page
    2.3.18:        changed GET / to GET / HTTP/1.0
    2.3.19:        added select() man page
    2.3.20:        added poll() man page
    2.3.21:        section on NAT and reserved networks
    2.3.22:        typo fixes in sects "man" and "privnet"
    2.3.23:        added broadcast packets section
    2.3.24:        manpage prototype changed to code, subtitle moved out of=
 title
    2.4.0:        big overhaul, serialization stuff
    2.4.1:        minor text changes in intro
    2.4.2:        changed all sizeofs to use variable names instead of type=
s
    2.4.3:        fix myaddr->my_addr in listener.c, sockaddr_inman example
    2.4.4:        fix myaddr->my_addr in server.c
    2.4.5:        fix 14->18 in son of data encap
    3.0.0:        IPv6 overhaul
    3.0.1:        sa-to-sa6 typo fix
    3.0.2:        typo fixes
    3.0.3:        typo fixes
    3.0.4:        cut-n-paste errors, selectserver hints fix
    3.0.5:        typo fixes
    3.0.6:        typo fixes
    3.0.7:        typo fixes, added front matter
    3.0.8:        getpeername() code fixes
    3.0.9:        getpeername() code fixes, this time fer sure
    3.0.10:        bind() man page code fix, comment changes
    3.0.11:        socket syscall section code fix, comment changes
    3.0.12:        typos in "IP Addresses, structs, and Data Munging"
    3.0.13:        amp removals, note about errno and multithreading
    3.0.14:        type changes to listener.c, pack2.c
    3.0.15:        fix inet_pton example
    3.0.16:        fix simple server output, optlen in getsockopt man page
    3.0.17:        fix small typo
    3.0.18:        reverse perror and close calls in getaddrinfo
    3.0.19:        add notes about O_NONBLOCK with select() under Linux
    3.0.20:        fix missing .fd in poll() example
    3.0.21:        change sizeof(int) to sizeof yes
    3.0.22:     C99 updates, bug fixes, markdown
    3.0.23:     Book reference and URL updates
    3.1.0:      Section on poll()
    3.1.1:      Add WSL note, telnot
    3.1.2:      pollserver.c bugfix
    3.1.3:      Fix freeaddrinfo memleak
    3.1.4:      Fix accept example header files
    3.1.5:      Fix dgram AF_UNSPEC
-->
<!-- prevent hyphenation of the following words: -->
<!--
Don't know how to make this work with underscores. I love
you, Knuth, but... daaahm.

\hyphenation{gai_strerr}
-->
<!--
\hyphenation{inet_ntoa}
\hyphenation{inet_aton}
\hyphenation{inet_addr}
\hyphenation{inet_ntop}
\hyphenation{inet_pton}
-->
<!--
\hyphenation{sockaddr_in}
\hyphenation{in_addr}
\hyphenation{sockaddr_in6}
\hyphenation{in6_addr}
-->
<h1 data-number=3D"1" id=3D"intro"><span class=3D"header-section-number">1<=
/span> Intro</h1>
<p>Hey! Socket programming got you down? Is this stuff just a little too di=
fficult to figure out from the <code>man</code> pages? You want to do cool =
Internet programming, but you don=E2=80=99t have time to wade through a gob=
 of <code>struct</code>s trying to figure out if you have to call <code>bin=
d()</code> before you <code>connect()</code>, etc., etc.</p>
<p>Well, guess what! I=E2=80=99ve already done this nasty business, and I=
=E2=80=99m dying to share the information with everyone! You=E2=80=99ve com=
e to the right place. This document should give the average competent C pro=
grammer the edge s/he needs to get a grip on this networking noise.</p>
<p>And check it out: I=E2=80=99ve finally caught up with the future (just i=
n the nick of time, too!) and have updated the Guide for IPv6! Enjoy!</p>
<h2 data-number=3D"1.1" id=3D"audience"><span class=3D"header-section-numbe=
r">1.1</span> Audience</h2>
<p>This document has been written as a tutorial, not a complete reference. =
It is probably at its best when read by individuals who are just starting o=
ut with socket programming and are looking for a foothold. It is certainly =
not the <em>complete and total</em> guide to sockets programming, by any me=
ans.</p>
<p>Hopefully, though, it=E2=80=99ll be just enough for those man pages to s=
tart making sense=E2=80=A6 <code>:-)</code></p>
<h2 data-number=3D"1.2" id=3D"platform-and-compiler"><span class=3D"header-=
section-number">1.2</span> Platform and Compiler</h2>
<p>The code contained within this document was compiled on a Linux PC using=
 Gnu=E2=80=99s  <code>gcc</code> compiler. It should, however, build on jus=
t about any platform that uses <code>gcc</code>. Naturally, this doesn=E2=
=80=99t apply if you=E2=80=99re programming for Windows=E2=80=94see the <a =
href=3D"https://beej.us/guide/bgnet/html/#windows">section on Windows progr=
amming</a>, below.</p>
<h2 data-number=3D"1.3" id=3D"official-homepage-and-books-for-sale"><span c=
lass=3D"header-section-number">1.3</span> Official Homepage and Books For S=
ale</h2>
<p>This official location of this document is:</p>
<ul>
<li><a href=3D"https://beej.us/guide/bgnet/"><code>https://beej.us/guide/bg=
net/</code></a></li>
</ul>
<p>There you will also find example code and translations of the guide into=
 various languages.</p>
<p>To buy nicely bound print copies (some call them =E2=80=9Cbooks=E2=80=9D=
), visit:</p>
<ul>
<li><a href=3D"https://beej.us/guide/url/bgbuy"><code>https://beej.us/guide=
/url/bgbuy</code></a></li>
</ul>
<p>I=E2=80=99ll appreciate the purchase because it helps sustain my documen=
t-writing lifestyle!</p>
<h2 data-number=3D"1.4" id=3D"solaris"><span class=3D"header-section-number=
">1.4</span> Note for Solaris/SunOS Programmers</h2>
<p>When compiling for  Solaris or  SunOS, you need to specify some extra co=
mmand-line switches for linking in the proper libraries. In order to do thi=
s, simply add =E2=80=9C<code>-lnsl -lsocket -lresolv</code>=E2=80=9D to the=
 end of the compile command, like so:</p>
<pre><code>    $ cc -o server server.c -lnsl -lsocket -lresolv</code></pre>
<p>If you still get errors, you could try further adding a <code>-lxnet</co=
de> to the end of that command line. I don=E2=80=99t know what that does, e=
xactly, but some people seem to need it.</p>
<p>Another place that you might find problems is in the call to <code>setso=
ckopt()</code>. The prototype differs from that on my Linux box, so instead=
 of:</p>
<div class=3D"sourceCode" id=3D"cb2"><pre class=3D"sourceCode c"><code clas=
s=3D"sourceCode c"><span id=3D"cb2-1"><a href=3D"https://beej.us/guide/bgne=
t/html/#cb2-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"=
dt">int</span> yes=3D<span class=3D"dv">1</span>;</span></code></pre></div>
<p>enter this:</p>
<div class=3D"sourceCode" id=3D"cb3"><pre class=3D"sourceCode c"><code clas=
s=3D"sourceCode c"><span id=3D"cb3-1"><a href=3D"https://beej.us/guide/bgne=
t/html/#cb3-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"=
dt">char</span> yes=3D<span class=3D"ch">'1'</span>;</span></code></pre></d=
iv>
<p>As I don=E2=80=99t have a Sun box, I haven=E2=80=99t tested any of the a=
bove information=E2=80=94it=E2=80=99s just what people have told me through=
 email.</p>
<h2 data-number=3D"1.5" id=3D"windows"><span class=3D"header-section-number=
">1.5</span> Note for Windows Programmers</h2>
<p>At this point in the guide, historically, I=E2=80=99ve done a bit of bag=
ging on  Windows, simply due to the fact that I don=E2=80=99t like it very =
much. But I should really be fair and tell you that Windows has a huge inst=
all base and is obviously a perfectly fine operating system.</p>
<p>They say absence makes the heart grow fonder, and in this case, I believ=
e it to be true. (Or maybe it=E2=80=99s age.) But what I can say is that af=
ter a decade-plus of not using Microsoft OSes for my personal work, I=E2=80=
=99m much happier! As such, I can sit back and safely say, =E2=80=9CSure, f=
eel free to use Windows!=E2=80=9D =E2=80=A6Ok yes, it does make me grit my =
teeth to say that.</p>
<p>So I still encourage you to try  <a href=3D"https://www.linux.com/">Linu=
x</a><a href=3D"https://beej.us/guide/bgnet/html/#fn1" class=3D"footnote-re=
f" id=3D"fnref1" role=3D"doc-noteref"><sup>1</sup></a>, <a href=3D"https://=
bsd.org/">BSD</a><a href=3D"https://beej.us/guide/bgnet/html/#fn2" class=3D=
"footnote-ref" id=3D"fnref2" role=3D"doc-noteref"><sup>2</sup></a>, or some=
 flavor of Unix, instead.</p>
<p>But people like what they like, and you Windows folk will be pleased to =
know that this information is generally applicable to you guys, with a few =
minor changes, if any.</p>
<p>One cool thing you can do is install  <a href=3D"https://cygwin.com/">Cy=
gwin</a><a href=3D"https://beej.us/guide/bgnet/html/#fn3" class=3D"footnote=
-ref" id=3D"fnref3" role=3D"doc-noteref"><sup>3</sup></a>, which is a colle=
ction of Unix tools for Windows. I=E2=80=99ve heard on the grapevine that d=
oing so allows all these programs to compile unmodified.</p>
<p>Another thing that you should consider is   the <a href=3D"https://docs.=
microsoft.com/en-us/windows/wsl/about">Windows Subsystem for Linux</a><a hr=
ef=3D"https://beej.us/guide/bgnet/html/#fn4" class=3D"footnote-ref" id=3D"f=
nref4" role=3D"doc-noteref"><sup>4</sup></a>. This basically allows you to =
install a Linux VM-ish thing on Windows 10. That will also definitely get y=
ou situated.</p>
<p>But some of you might want to do things the Pure Windows Way. That=E2=80=
=99s very gutsy of you, and this is what you have to do: run out and get Un=
ix immediately! No, no=E2=80=94I=E2=80=99m kidding. I=E2=80=99m supposed to=
 be Windows-friendly(er) these days=E2=80=A6</p>
<p>This is what you=E2=80=99ll have to do (unless you install <a href=3D"ht=
tps://cygwin.com/">Cygwin</a>!): first, ignore pretty much all of the syste=
m header files I mention in here. All you need to include is:</p>
<p></p>
<div class=3D"sourceCode" id=3D"cb4"><pre class=3D"sourceCode c"><code clas=
s=3D"sourceCode c"><span id=3D"cb4-1"><a href=3D"https://beej.us/guide/bgne=
t/html/#cb4-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"=
pp">#include </span><span class=3D"im">&lt;winsock.h&gt;</span></span></cod=
e></pre></div>
<p>Wait! You also have to make a call to  <code>WSAStartup()</code> before =
doing anything else with the sockets library. The code to do that looks som=
ething like this:</p>
<div class=3D"sourceCode" id=3D"cb5"><pre class=3D"sourceCode numberSource =
c numberLines"><code class=3D"sourceCode c"><span id=3D"cb5-1"><a href=3D"h=
ttps://beej.us/guide/bgnet/html/#cb5-1"></a><span class=3D"pp">#include </s=
pan><span class=3D"im">&lt;winsock.h&gt;</span></span>
<span id=3D"cb5-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-2"></a>=
</span>
<span id=3D"cb5-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-3"></a>=
{</span>
<span id=3D"cb5-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-4"></a>=
    WSADATA wsaData;   <span class=3D"co">// if this doesn't work</span></s=
pan>
<span id=3D"cb5-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-5"></a>=
    <span class=3D"co">//WSAData wsaData; // then try this instead</span></=
span>
<span id=3D"cb5-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-6"></a>=
</span>
<span id=3D"cb5-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-7"></a>=
    <span class=3D"co">// MAKEWORD(1,1) for Winsock 1.1, MAKEWORD(2,0) for =
Winsock 2.0:</span></span>
<span id=3D"cb5-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-8"></a>=
</span>
<span id=3D"cb5-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-9"></a>=
    <span class=3D"cf">if</span> (WSAStartup(MAKEWORD(<span class=3D"dv">1<=
/span>,<span class=3D"dv">1</span>), &amp;wsaData) !=3D <span class=3D"dv">=
0</span>) {</span>
<span id=3D"cb5-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-10"></=
a>        fprintf(stderr, <span class=3D"st">"WSAStartup failed.</span><spa=
n class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb5-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-11"></=
a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb5-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb5-12"></=
a>    }</span></code></pre></div>
<p>You also have to tell your compiler to link in the Winsock library, usua=
lly called <code>wsock32.lib</code> or <code>winsock32.lib</code>, or <code=
>ws2_32.lib</code> for Winsock 2.0. Under VC++, this can be done through th=
e <code>Project</code> menu, under <code>Settings...</code>. Click the <cod=
e>Link</code> tab, and look for the box titled =E2=80=9CObject/library modu=
les=E2=80=9D. Add =E2=80=9Cwsock32.lib=E2=80=9D (or whichever lib is your p=
reference) to that list.</p>
<p>Or so I hear.</p>
<p>Finally, you need to call  <code>WSACleanup()</code> when you=E2=80=99re=
 all through with the sockets library. See your online help for details.</p=
>
<p>Once you do that, the rest of the examples in this tutorial should gener=
ally apply, with a few exceptions. For one thing, you can=E2=80=99t use <co=
de>close()</code> to close a socket=E2=80=94you need to use  <code>closesoc=
ket()</code>, instead. Also,  <code>select()</code> only works with socket =
descriptors, not file descriptors (like <code>0</code> for <code>stdin</cod=
e>).</p>
<p>There is also a socket class that you can use,  <code>CSocket</code>. Ch=
eck your compilers help pages for more information.</p>
<p>To get more information about Winsock, read the  <a href=3D"https://tang=
entsoft.net/wskfaq/">Winsock FAQ</a><a href=3D"https://beej.us/guide/bgnet/=
html/#fn5" class=3D"footnote-ref" id=3D"fnref5" role=3D"doc-noteref"><sup>5=
</sup></a> and go from there.</p>
<p>Finally, I hear that Windows has no  <code>fork()</code> system call whi=
ch is, unfortunately, used in some of my examples. Maybe you have to link i=
n a POSIX library or something to get it to work, or you can use  <code>Cre=
ateProcess()</code> instead. <code>fork()</code> takes no arguments, and <c=
ode>CreateProcess()</code> takes about 48 billion arguments. If you=E2=80=
=99re not up to that, the  <code>CreateThread()</code> is a little easier t=
o digest=E2=80=A6unfortunately a discussion about multithreading is beyond =
the scope of this document. I can only talk about so much, you know!</p>
<h2 data-number=3D"1.6" id=3D"email-policy"><span class=3D"header-section-n=
umber">1.6</span> Email Policy</h2>
<p>I=E2=80=99m generally available to help out with  email questions so fee=
l free to write in, but I can=E2=80=99t guarantee a response. I lead a pret=
ty busy life and there are times when I just can=E2=80=99t answer a questio=
n you have. When that=E2=80=99s the case, I usually just delete the message=
. It=E2=80=99s nothing personal; I just won=E2=80=99t ever have the time to=
 give the detailed answer you require.</p>
<p>As a rule, the more complex the question, the less likely I am to respon=
d. If you can narrow down your question before mailing it and be sure to in=
clude any pertinent information (like platform, compiler, error messages yo=
u=E2=80=99re getting, and anything else you think might help me troubleshoo=
t), you=E2=80=99re much more likely to get a response. For more pointers, r=
ead ESR=E2=80=99s document, <a href=3D"http://www.catb.org/~esr/faqs/smart-=
questions.html">How To Ask Questions The Smart Way</a><a href=3D"https://be=
ej.us/guide/bgnet/html/#fn6" class=3D"footnote-ref" id=3D"fnref6" role=3D"d=
oc-noteref"><sup>6</sup></a>.</p>
<p>If you don=E2=80=99t get a response, hack on it some more, try to find t=
he answer, and if it=E2=80=99s still elusive, then write me again with the =
information you=E2=80=99ve found and hopefully it will be enough for me to =
help out.</p>
<p>Now that I=E2=80=99ve badgered you about how to write and not write me, =
I=E2=80=99d just like to let you know that I <em>fully</em> appreciate all =
the praise the guide has received over the years. It=E2=80=99s a real moral=
e boost, and it gladdens me to hear that it is being used for good! <code>:=
-)</code> Thank you!</p>
<h2 data-number=3D"1.7" id=3D"mirroring"><span class=3D"header-section-numb=
er">1.7</span> Mirroring</h2>
<p> You are more than welcome to mirror this site, whether publicly or priv=
ately. If you publicly mirror the site and want me to link to it from the m=
ain page, drop me a line at <a href=3D"https://beej.us/guide/bgnet/html/bee=
j@beej.us"><code>beej@beej.us</code></a>.</p>
<h2 data-number=3D"1.8" id=3D"note-for-translators"><span class=3D"header-s=
ection-number">1.8</span> Note for Translators</h2>
<p> If you want to translate the guide into another language, write me at <=
a href=3D"https://beej.us/guide/bgnet/html/beej@beej.us"><code>beej@beej.us=
</code></a> and I=E2=80=99ll link to your translation from the main page. F=
eel free to add your name and contact info to the translation.</p>
<p>This source markdown document uses UTF-8 encoding.</p>
<p>Please note the license restrictions in the <a href=3D"https://beej.us/g=
uide/bgnet/html/#legal">Copyright, Distribution, and Legal</a> section, bel=
ow.</p>
<p>If you want me to host the translation, just ask. I=E2=80=99ll also link=
 to it if you want to host it; either way is fine.</p>
<h2 data-number=3D"1.9" id=3D"legal"><span class=3D"header-section-number">=
1.9</span> Copyright, Distribution, and Legal</h2>
<p>Beej=E2=80=99s Guide to Network Programming is Copyright =C2=A9 2019 Bri=
an =E2=80=9CBeej Jorgensen=E2=80=9D Hall.</p>
<p>With specific exceptions for source code and translations, below, this w=
ork is licensed under the Creative Commons Attribution- Noncommercial- No D=
erivative Works 3.0 License. To view a copy of this license, visit</p>
<p><a href=3D"https://creativecommons.org/licenses/by-nc-nd/3.0/"><code>htt=
ps://creativecommons.org/licenses/by-nc-nd/3.0/</code></a></p>
<p>or send a letter to Creative Commons, 171 Second Street, Suite 300, San =
Francisco, California, 94105, USA.</p>
<p>One specific exception to the =E2=80=9CNo Derivative Works=E2=80=9D port=
ion of the license is as follows: this guide may be freely translated into =
any language, provided the translation is accurate, and the guide is reprin=
ted in its entirety. The same license restrictions apply to the translation=
 as to the original guide. The translation may also include the name and co=
ntact information for the translator.</p>
<p>The C source code presented in this document is hereby granted to the pu=
blic domain, and is completely free of any license restriction.</p>
<p>Educators are freely encouraged to recommend or supply copies of this gu=
ide to their students.</p>
<p>Unless otherwise mutually agreed by the parties in writing, the author o=
ffers the work as-is and makes no representations or warranties of any kind=
 concerning the work, express, implied, statutory or otherwise, including, =
without limitation, warranties of title, merchantibility, fitness for a par=
ticular purpose, noninfringement, or the absence of latent or other defects=
, accuracy, or the presence of absence of errors, whether or not discoverab=
le.</p>
<p>Except to the extent required by applicable law, in no event will the au=
thor be liable to you on any legal theory for any special, incidental, cons=
equential, punitive or exemplary damages arising out of the use of the work=
, even if the author has been advised of the possibility of such damages.</=
p>
<p>Contact <a href=3D"mailto:beej@beej.us"><code>beej@beej.us</code></a> fo=
r more information.</p>
<h2 data-number=3D"1.10" id=3D"dedication"><span class=3D"header-section-nu=
mber">1.10</span> Dedication</h2>
<p>Thanks to everyone who has helped in the past and future with me getting=
 this guide written. And thank you to all the people who produce the Free s=
oftware and packages that I use to make the Guide: GNU, Linux, Slackware, v=
im, Python, Inkscape, pandoc, many others. And finally a big thank-you to t=
he literally thousands of you who have written in with suggestions for impr=
ovements and words of encouragement.</p>
<p>I dedicate this guide to some of my biggest heroes and inpirators in the=
 world of computers: Donald Knuth, Bruce Schneier, W. Richard Stevens, and =
The Woz, my Readership, and the entire Free and Open Source Software Commun=
ity.</p>
<h2 data-number=3D"1.11" id=3D"publishing-information"><span class=3D"heade=
r-section-number">1.11</span> Publishing Information</h2>
<p>This book is written in Markdown using the vim editor on an Arch Linux b=
ox loaded with GNU tools. The cover =E2=80=9Cart=E2=80=9D and diagrams are =
produced with Inkscape. The Markdown is converted to HTML and LaTex/PDF by =
Python, Pandoc and XeLaTeX, using Liberation fonts. The toolchain is compos=
ed of 100% Free and Open Source Software.</p>
<h1 data-number=3D"2" id=3D"what-is-a-socket"><span class=3D"header-section=
-number">2</span> What is a socket?</h1>
<p>You hear talk of  =E2=80=9Csockets=E2=80=9D all the time, and perhaps yo=
u are wondering just what they are exactly. Well, they=E2=80=99re this: a w=
ay to speak to other programs using standard Unix  file descriptors.</p>
<p>What?</p>
<p>Ok=E2=80=94you may have heard some Unix hacker state, =E2=80=9CJeez, <em=
>everything</em> in Unix is a file!=E2=80=9D What that person may have been=
 talking about is the fact that when Unix programs do any sort of I/O, they=
 do it by reading or writing to a file descriptor. A file descriptor is sim=
ply an integer associated with an open file. But (and here=E2=80=99s the ca=
tch), that file can be a network connection, a FIFO, a pipe, a terminal, a =
real on-the-disk file, or just about anything else. Everything in Unix <em>=
is</em> a file! So when you want to communicate with another program over t=
he Internet you=E2=80=99re gonna do it through a file descriptor, you=E2=80=
=99d better believe it.</p>
<p>=E2=80=9CWhere do I get this file descriptor for network communication, =
Mr. Smarty-Pants?=E2=80=9D is probably the last question on your mind right=
 now, but I=E2=80=99m going to answer it anyway: You make a call to the  <c=
ode>socket()</code> system routine. It returns the  socket descriptor, and =
you communicate through it using the specialized  <code>send()</code> and  =
<code>recv()</code> (<a href=3D"https://beej.us/guide/bgnet/html/#sendman">=
<code>man send</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#rec=
vman"><code>man recv</code></a>) socket calls.</p>
<p>=E2=80=9CBut, hey!=E2=80=9D you might be exclaiming right about now. =E2=
=80=9CIf it=E2=80=99s a file descriptor, why in the name of Neptune can=E2=
=80=99t I just use the normal  <code>read()</code> and  <code>write()</code=
> calls to communicate through the socket?=E2=80=9D The short answer is, =
=E2=80=9CYou can!=E2=80=9D The longer answer is, =E2=80=9CYou can, but  <co=
de>send()</code> and  <code>recv()</code> offer much greater control over y=
our data transmission.=E2=80=9D</p>
<p>What next? How about this: there are all kinds of sockets. There are  DA=
RPA Internet addresses (Internet Sockets), path names on a local node (Unix=
 Sockets), CCITT X.25 addresses (X.25 Sockets that you can safely ignore), =
and probably many others depending on which Unix flavor you run. This docum=
ent deals only with the first: Internet Sockets.</p>
<h2 data-number=3D"2.1" id=3D"two-types-of-internet-sockets"><span class=3D=
"header-section-number">2.1</span> Two Types of Internet Sockets</h2>
<p>What=E2=80=99s this?  There are two types of Internet sockets? Yes. Well=
, no. I=E2=80=99m lying. There are more, but I didn=E2=80=99t want to scare=
 you. I=E2=80=99m only going to talk about two types here. Except for this =
sentence, where I=E2=80=99m going to tell you that   =E2=80=9CRaw Sockets=
=E2=80=9D are also very powerful and you should look them up.</p>
<p>All right, already. What are the two types? One is  =E2=80=9CStream Sock=
ets=E2=80=9D; the other is  =E2=80=9CDatagram Sockets=E2=80=9D, which may h=
ereafter be referred to as =E2=80=9C<code>SOCK_STREAM</code>=E2=80=9D and =
=E2=80=9C<code>SOCK_DGRAM</code>=E2=80=9D, respectively. Datagram sockets a=
re sometimes called =E2=80=9Cconnectionless sockets=E2=80=9D. (Though they =
can be  <code>connect()</code>=E2=80=99d if you really want. See <a href=3D=
"https://beej.us/guide/bgnet/html/#connect"><code>connect()</code></a>, bel=
ow.)</p>
<p>Stream sockets are reliable two-way connected communication streams. If =
you output two items into the socket in the order =E2=80=9C1, 2=E2=80=9D, t=
hey will arrive in the order =E2=80=9C1, 2=E2=80=9D at the opposite end. Th=
ey will also be error-free. I=E2=80=99m so certain, in fact, they will be e=
rror-free, that I=E2=80=99m just going to put my fingers in my ears and cha=
nt <em>la la la la</em> if anyone tries to claim otherwise.</p>
<p>What uses  stream sockets? Well, you may have heard of the  <code>telnet=
</code> application, yes? It uses stream sockets. All the characters you ty=
pe need to arrive in the same order you type them, right? Also, web browser=
s use the Hypertext Transfer Protocol  (HTTP) which uses stream sockets to =
get pages. Indeed, if you telnet to a web site on port 80, and type =E2=80=
=9C<code>GET / HTTP/1.0</code>=E2=80=9D and hit RETURN twice, it=E2=80=99ll=
 dump the HTML back at you!</p>
<blockquote>
<p>If you don=E2=80=99t have <code>telnet</code> installed and don=E2=80=99=
t want to install it, or your <code>telnet</code> is being picky about conn=
ecting to clients, the guide comes with a <code>telnet</code>-like program =
called <a href=3D"https://beej.us/guide/bgnet/examples/telnot.c"><code>teln=
ot</code></a><a href=3D"https://beej.us/guide/bgnet/html/#fn7" class=3D"foo=
tnote-ref" id=3D"fnref7" role=3D"doc-noteref"><sup>7</sup></a>. This should=
 work well for all the needs of the guide. (Note that telnet is actually a =
<a href=3D"https://tools.ietf.org/html/rfc854">spec=E2=80=99d networking pr=
otocol</a><a href=3D"https://beej.us/guide/bgnet/html/#fn8" class=3D"footno=
te-ref" id=3D"fnref8" role=3D"doc-noteref"><sup>8</sup></a>, and <code>teln=
ot</code> doesn=E2=80=99t implement this protocol at all.)</p>
</blockquote>
<p>How do stream sockets achieve this high level of data transmission quali=
ty? They use a protocol called =E2=80=9CThe Transmission Control Protocol=
=E2=80=9D, otherwise known as  =E2=80=9CTCP=E2=80=9D (see <a href=3D"https:=
//tools.ietf.org/html/rfc793">RFC 793</a><a href=3D"https://beej.us/guide/b=
gnet/html/#fn9" class=3D"footnote-ref" id=3D"fnref9" role=3D"doc-noteref"><=
sup>9</sup></a> for extremely detailed info on TCP). TCP makes sure your da=
ta arrives sequentially and error-free. You may have heard =E2=80=9CTCP=E2=
=80=9D before as the better half of =E2=80=9CTCP/IP=E2=80=9D where  =E2=80=
=9CIP=E2=80=9D stands for =E2=80=9CInternet Protocol=E2=80=9D (see <a href=
=3D"https://tools.ietf.org/html/rfc791">RFC 791</a><a href=3D"https://beej.=
us/guide/bgnet/html/#fn10" class=3D"footnote-ref" id=3D"fnref10" role=3D"do=
c-noteref"><sup>10</sup></a>). IP deals primarily with Internet routing and=
 is not generally responsible for data integrity.</p>
<p>Cool.  What about Datagram sockets? Why are they called connectionless? =
What is the deal, here, anyway? Why are they unreliable? Well, here are som=
e facts: if you send a datagram, it may arrive. It may arrive out of order.=
 If it arrives, the data within the packet will be error-free.</p>
<p>Datagram sockets also use IP for routing, but they don=E2=80=99t use TCP=
; they use the =E2=80=9CUser Datagram Protocol=E2=80=9D, or  =E2=80=9CUDP=
=E2=80=9D (see <a href=3D"https://tools.ietf.org/html/rfc768">RFC 768</a><a=
 href=3D"https://beej.us/guide/bgnet/html/#fn11" class=3D"footnote-ref" id=
=3D"fnref11" role=3D"doc-noteref"><sup>11</sup></a>).</p>
<p>Why are they connectionless? Well, basically, it=E2=80=99s because you d=
on=E2=80=99t have to maintain an open connection as you do with stream sock=
ets. You just build a packet, slap an IP header on it with destination info=
rmation, and send it out. No connection needed. They are generally used eit=
her when a TCP stack is unavailable or when a few dropped packets here and =
there don=E2=80=99t mean the end of the Universe. Sample applications: <cod=
e>tftp</code> (trivial file transfer protocol, a little brother to FTP), <c=
ode>dhcpcd</code> (a DHCP client), multiplayer games, streaming audio, vide=
o conferencing, etc.</p>
<p>=E2=80=9CWait a minute! <code>tftp</code> and <code>dhcpcd</code> are us=
ed to transfer binary applications from one host to another! Data can=E2=80=
=99t be lost if you expect the application to work when it arrives! What ki=
nd of dark magic is this?=E2=80=9D</p>
<p>Well, my human friend, <code>tftp</code> and similar programs have their=
 own protocol on top of UDP. For example, the tftp protocol says that for e=
ach packet that gets sent, the recipient has to send back a packet that say=
s, =E2=80=9CI got it!=E2=80=9D (an =E2=80=9CACK=E2=80=9D packet). If the se=
nder of the original packet gets no reply in, say, five seconds, he=E2=80=
=99ll re-transmit the packet until he finally gets an ACK. This acknowledgm=
ent procedure is very important when implementing reliable <code>SOCK_DGRAM=
</code> applications.</p>
<p>For unreliable applications like games, audio, or video, you just ignore=
 the dropped packets, or perhaps try to cleverly compensate for them. (Quak=
e players will know the manifestation this effect by the technical term: <e=
m>accursed lag</em>. The word =E2=80=9Caccursed=E2=80=9D, in this case, rep=
resents any extremely profane utterance.)</p>
<p>Why would you use an unreliable underlying protocol? Two reasons: speed =
and speed. It=E2=80=99s way faster to fire-and-forget than it is to keep tr=
ack of what has arrived safely and make sure it=E2=80=99s in order and all =
that. If you=E2=80=99re sending chat messages, TCP is great; if you=E2=80=
=99re sending 40 positional updates per second of the players in the world,=
 maybe it doesn=E2=80=99t matter so much if one or two get dropped, and UDP=
 is a good choice.</p>
<h2 data-number=3D"2.2" id=3D"lowlevel"><span class=3D"header-section-numbe=
r">2.2</span> Low level Nonsense and Network Theory</h2>
<p>Since I just mentioned layering of protocols, it=E2=80=99s time to talk =
about how networks really work, and to show some examples of how  <code>SOC=
K_DGRAM</code> packets are built. Practically, you can probably skip this s=
ection. It=E2=80=99s good background, however.</p>
<figure>
<embed src=3D"https://beej.us/guide/bgnet/html/dataencap.svg" title=3D"[Enc=
apsulated Protocols Diagram]"><figcaption aria-hidden=3D"true">Data Encapsu=
lation.</figcaption>
</figure>
<p>Hey, kids, it=E2=80=99s time to learn about  <em>Data Encapsulation</em>=
! This is very very important. It=E2=80=99s so important that you might jus=
t learn about it if you take the networks course here at Chico State <code>=
;-)</code>. Basically, it says this: a packet is born, the packet is wrappe=
d (=E2=80=9Cencapsulated=E2=80=9D) in a  header (and rarely a  footer) by t=
he first protocol (say, the  TFTP protocol), then the whole thing (TFTP hea=
der included) is encapsulated again by the next protocol (say,  UDP), then =
again by the next  (IP), then again by the final protocol on the hardware (=
physical) layer (say,  Ethernet).</p>
<p>When another computer receives the packet, the hardware strips the Ether=
net header, the kernel strips the IP and UDP headers, the TFTP program stri=
ps the TFTP header, and it finally has the data.</p>
<p>Now I can finally talk about the infamous  <em>Layered Network Model</em=
> (aka =E2=80=9CISO/OSI=E2=80=9D). This Network Model describes a system of=
 network functionality that has many advantages over other models. For inst=
ance, you can write sockets programs that are exactly the same without cari=
ng how the data is physically transmitted (serial, thin Ethernet, AUI, what=
ever) because programs on lower levels deal with it for you. The actual net=
work hardware and topology is transparent to the socket programmer.</p>
<p>Without any further ado, I=E2=80=99ll present the layers of the full-blo=
wn model. Remember this for network class exams:</p>
<ul>
<li>Application</li>
<li>Presentation</li>
<li>Session</li>
<li>Transport</li>
<li>Network</li>
<li>Data Link</li>
<li>Physical</li>
</ul>
<p>The Physical Layer is the hardware (serial, Ethernet, etc.). The Applica=
tion Layer is just about as far from the physical layer as you can imagine=
=E2=80=94it=E2=80=99s the place where users interact with the network.</p>
<p>Now, this model is so general you could probably use it as an automobile=
 repair guide if you really wanted to. A layered model more consistent with=
 Unix might be:</p>
<ul>
<li>Application Layer (<em>telnet, ftp, etc.</em>)</li>
<li>Host-to-Host Transport Layer (<em>TCP, UDP</em>)</li>
<li>Internet Layer (<em>IP and routing</em>)</li>
<li>Network Access Layer (<em>Ethernet, wi-fi, or whatever</em>)</li>
</ul>
<p>At this point in time, you can probably see how these layers correspond =
to the encapsulation of the original data.</p>
<p>See how much work there is in building a simple packet? Jeez! And you ha=
ve to type in the packet headers yourself using =E2=80=9C<code>cat</code>=
=E2=80=9D! Just kidding. All you have to do for stream sockets is  <code>se=
nd()</code> the data out. All you have to do for datagram sockets is encaps=
ulate the packet in the method of your choosing and  <code>sendto()</code> =
it out. The kernel builds the Transport Layer and Internet Layer on for you=
 and the hardware does the Network Access Layer. Ah, modern technology.</p>
<p>So ends our brief foray into network theory. Oh yes, I forgot to tell yo=
u everything I wanted to say about routing: nothing! That=E2=80=99s right, =
I=E2=80=99m not going to talk about it at all. The router strips the packet=
 to the IP header, consults its routing table,  <em>blah blah blah</em>. Ch=
eck out the <a href=3D"https://tools.ietf.org/html/rfc791">IP RFC</a><a hre=
f=3D"https://beej.us/guide/bgnet/html/#fn12" class=3D"footnote-ref" id=3D"f=
nref12" role=3D"doc-noteref"><sup>12</sup></a> if you really really care. I=
f you never learn about it, well, you=E2=80=99ll live.</p>
<h1 data-number=3D"3" id=3D"ip-addresses-structs-and-data-munging"><span cl=
ass=3D"header-section-number">3</span> IP Addresses, <code>struct</code>s, =
and Data Munging</h1>
<p>Here=E2=80=99s the part of the game where we get to talk code for a chan=
ge.</p>
<p>But first, let=E2=80=99s discuss more non-code! Yay! First I want to tal=
k about  IP addresses and ports for just a tad so we have that sorted out. =
Then we=E2=80=99ll talk about how the sockets API stores and manipulates IP=
 addresses and other data.</p>
<h2 data-number=3D"3.1" id=3D"ip-addresses-versions-4-and-6"><span class=3D=
"header-section-number">3.1</span> IP Addresses, versions 4 and 6</h2>
<p>In the good old days back when Ben Kenobi was still called Obi Wan Kenob=
i, there was a wonderful network routing system called The Internet Protoco=
l Version 4, also called  IPv4. It had addresses made up of four bytes (A.K=
.A. four =E2=80=9Coctets=E2=80=9D), and was commonly written in =E2=80=9Cdo=
ts and numbers=E2=80=9D form, like so: <code>192.0.2.111</code>.</p>
<p>You=E2=80=99ve probably seen it around.</p>
<p>In fact, as of this writing, virtually every site on the Internet uses I=
Pv4.</p>
<p>Everyone, including Obi Wan, was happy. Things were great, until some na=
ysayer by the name of Vint Cerf warned everyone that we were about to run o=
ut of IPv4 addresses!</p>
<p>(Besides warning everyone of the Coming IPv4 Apocalypse Of Doom And Gloo=
m,  <a href=3D"https://en.wikipedia.org/wiki/Vint_Cerf">Vint Cerf</a><a hre=
f=3D"https://beej.us/guide/bgnet/html/#fn13" class=3D"footnote-ref" id=3D"f=
nref13" role=3D"doc-noteref"><sup>13</sup></a> is also well-known for being=
 The Father Of The Internet. So I really am in no position to second-guess =
his judgment.)</p>
<p>Run out of addresses? How could this be? I mean, there are like billions=
 of IP addresses in a 32-bit IPv4 address. Do we really have billions of co=
mputers out there?</p>
<p>Yes.</p>
<p>Also, in the beginning, when there were only a few computers and everyon=
e thought a billion was an impossibly large number, some big organizations =
were generously allocated millions of IP addresses for their own use. (Such=
 as Xerox, MIT, Ford, HP, IBM, GE, AT&amp;T, and some little company called=
 Apple, to name a few.)</p>
<p>In fact, if it weren=E2=80=99t for several stopgap measures, we would ha=
ve run out a long time ago.</p>
<p>But now we=E2=80=99re living in an era where we=E2=80=99re talking about=
 every human having an IP address, every computer, every calculator, every =
phone, every parking meter, and (why not) every puppy dog, as well.</p>
<p>And so,  IPv6 was born. Since Vint Cerf is probably immortal (even if hi=
s physical form should pass on, heaven forbid, he is probably already exist=
ing as some kind of hyper-intelligent <a href=3D"https://en.wikipedia.org/w=
iki/ELIZA">ELIZA</a><a href=3D"https://beej.us/guide/bgnet/html/#fn14" clas=
s=3D"footnote-ref" id=3D"fnref14" role=3D"doc-noteref"><sup>14</sup></a> pr=
ogram out in the depths of the Internet2), no one wants to have to hear him=
 say again =E2=80=9CI told you so=E2=80=9D if we don=E2=80=99t have enough =
addresses in the next version of the Internet Protocol.</p>
<p>What does this suggest to you?</p>
<p>That we need a <em>lot</em> more addresses. That we need not just twice =
as many addresses, not a billion times as many, not a thousand trillion tim=
es as many, but <em>79 MILLION BILLION TRILLION times as many possible addr=
esses!</em> That=E2=80=99ll show =E2=80=99em!</p>
<p>You=E2=80=99re saying, =E2=80=9CBeej, is that true? I have every reason =
to disbelieve large numbers.=E2=80=9D Well, the difference between 32 bits =
and 128 bits might not sound like a lot; it=E2=80=99s only 96 more bits, ri=
ght? But remember, we=E2=80=99re talking powers here: 32 bits represents so=
me 4 billion numbers (2<sup>32</sup>), while 128 bits represents about 340 =
trillion trillion trillion numbers (for real, 2<sup>128</sup>). That=E2=80=
=99s like a million IPv4 Internets for <em>every single star in the Univers=
e</em>.</p>
<p>Forget this dots-and-numbers look of IPv4, too; now we=E2=80=99ve got a =
hexadecimal representation, with each two-byte chunk separated by a colon, =
like this:</p>
<pre><code>    2001:0db8:c9d2:aee5:73e3:934a:a5ae:9551</code></pre>
<p>That=E2=80=99s not all! Lots of times, you=E2=80=99ll have an IP address=
 with lots of zeros in it, and you can compress them between two colons. An=
d you can leave off leading zeros for each byte pair. For instance, each of=
 these pairs of addresses are equivalent:</p>
<pre><code>    2001:0db8:c9d2:0012:0000:0000:0000:0051
    2001:db8:c9d2:12::51
   =20
    2001:0db8:ab00:0000:0000:0000:0000:0000
    2001:db8:ab00::
   =20
    0000:0000:0000:0000:0000:0000:0000:0001
    ::1</code></pre>
<p>The address <code>::1</code> is the <em>loopback address</em>. It always=
 means =E2=80=9Cthis machine I=E2=80=99m running on now=E2=80=9D. In IPv4, =
the loopback address is <code>127.0.0.1</code>.</p>
<p>Finally, there=E2=80=99s an IPv4-compatibility mode for IPv6 addresses t=
hat you might come across. If you want, for example, to represent the IPv4 =
address <code>192.0.2.33</code> as an IPv6 address, you use the following n=
otation: =E2=80=9C<code>::ffff:192.0.2.33</code>=E2=80=9D.</p>
<p>We=E2=80=99re talking serious fun.</p>
<p>In fact, it=E2=80=99s such serious fun, that the Creators of IPv6 have q=
uite cavalierly lopped off trillions and trillions of addresses for reserve=
d use, but we have so many, frankly, who=E2=80=99s even counting anymore? T=
here are plenty left over for every man, woman, child, puppy, and parking m=
eter on every planet in the galaxy. And believe me, every planet in the gal=
axy has parking meters. You know it=E2=80=99s true.</p>
<h3 data-number=3D"3.1.1" id=3D"subnets"><span class=3D"header-section-numb=
er">3.1.1</span> Subnets</h3>
<p>For organizational reasons, it=E2=80=99s sometimes convenient to declare=
 that "this first part of this IP address up through this bit is the <em>ne=
twork portion</em> of the IP address, and the remainder is the <em>host por=
tion</em>.</p>
<p>For instance, with IPv4, you might have <code>192.0.2.12</code>, and we =
could say that the first three bytes are the network and the last byte was =
the host. Or, put another way, we=E2=80=99re talking about host <code>12</c=
ode> on network <code>192.0.2.0</code> (see how we zero out the byte that w=
as the host).</p>
<p>And now for more outdated information! Ready? In the Ancient Times, ther=
e were =E2=80=9Cclasses=E2=80=9D of subnets, where the first one, two, or t=
hree bytes of the address was the network part. If you were lucky enough to=
 have one byte for the network and three for the host, you could have 24 bi=
ts-worth of hosts on your network (16 million or so). That was a =E2=80=9CC=
lass A=E2=80=9D network. On the opposite end was a =E2=80=9CClass C=E2=80=
=9D, with three bytes of network, and one byte of host (256 hosts, minus a =
couple that were reserved).</p>
<p>So as you can see, there were just a few Class As, a huge pile of Class =
Cs, and some Class Bs in the middle.</p>
<p>The network portion of the IP address is described by something called t=
he <em>netmask</em>, which you bitwise-AND with the IP address to get the n=
etwork number out of it. The netmask usually looks something like <code>255=
.255.255.0</code>. (E.g. with that netmask, if your IP is <code>192.0.2.12<=
/code>, then your network is <code>192.0.2.12</code> AND <code>255.255.255.=
0</code> which gives <code>192.0.2.0</code>.)</p>
<p>Unfortunately, it turned out that this wasn=E2=80=99t fine-grained enoug=
h for the eventual needs of the Internet; we were running out of Class C ne=
tworks quite quickly, and we were most definitely out of Class As, so don=
=E2=80=99t even bother to ask. To remedy this, The Powers That Be allowed f=
or the netmask to be an arbitrary number of bits, not just 8, 16, or 24. So=
 you might have a netmask of, say <code>255.255.255.252</code>, which is 30=
 bits of network, and 2 bits of host allowing for four hosts on the network=
. (Note that the netmask is <em>ALWAYS</em> a bunch of 1-bits followed by a=
 bunch of 0-bits.)</p>
<p>But it=E2=80=99s a bit unwieldy to use a big string of numbers like <cod=
e>255.192.0.0</code> as a netmask. First of all, people don=E2=80=99t have =
an intuitive idea of how many bits that is, and secondly, it=E2=80=99s real=
ly not compact. So the New Style came along, and it=E2=80=99s much nicer. Y=
ou just put a slash after the IP address, and then follow that by the numbe=
r of network bits in decimal. Like this: <code>192.0.2.12/30</code>.</p>
<p>Or, for IPv6, something like this: <code>2001:db8::/32</code> or <code>2=
001:db8:5413:4028::9db9/64</code>.</p>
<h3 data-number=3D"3.1.2" id=3D"port-numbers"><span class=3D"header-section=
-number">3.1.2</span> Port Numbers</h3>
<p>If you=E2=80=99ll kindly remember, I presented you earlier with the <a h=
ref=3D"https://beej.us/guide/bgnet/html/#lowlevel">Layered Network Model</a=
> which had the Internet Layer (IP) split off from the Host-to-Host Transpo=
rt Layer (TCP and UDP). Get up to speed on that before the next paragraph.<=
/p>
<p>Turns out that besides an IP address (used by the IP layer), there is an=
other address that is used by TCP (stream sockets) and, coincidentally, by =
UDP (datagram sockets). It is the <em>port number</em>. It=E2=80=99s a 16-b=
it number that=E2=80=99s like the local address for the connection.</p>
<p>Think of the IP address as the street address of a hotel, and the port n=
umber as the room number. That=E2=80=99s a decent analogy; maybe later I=E2=
=80=99ll come up with one involving the automobile industry.</p>
<p>Say you want to have a computer that handles incoming mail AND web servi=
ces=E2=80=94how do you differentiate between the two on a computer with a s=
ingle IP address?</p>
<p>Well, different services on the Internet have different well-known port =
numbers. You can see them all in <a href=3D"https://www.iana.org/assignment=
s/port-numbers">the Big IANA Port List</a><a href=3D"https://beej.us/guide/=
bgnet/html/#fn15" class=3D"footnote-ref" id=3D"fnref15" role=3D"doc-noteref=
"><sup>15</sup></a> or, if you=E2=80=99re on a Unix box, in your <code>/etc=
/services</code> file. HTTP (the web) is port 80, telnet is port 23, SMTP i=
s port 25, the game <a href=3D"https://en.wikipedia.org/wiki/Doom_(1993_vid=
eo_game)">DOOM</a><a href=3D"https://beej.us/guide/bgnet/html/#fn16" class=
=3D"footnote-ref" id=3D"fnref16" role=3D"doc-noteref"><sup>16</sup></a> use=
d port 666, etc. and so on. Ports under 1024 are often considered special, =
and usually require special OS privileges to use.</p>
<p>And that=E2=80=99s about it!</p>
<h2 data-number=3D"3.2" id=3D"byte-order"><span class=3D"header-section-num=
ber">3.2</span> Byte Order</h2>
<p> By Order of the Realm! There shall be two byte orderings, hereafter to =
be known as Lame and Magnificent!</p>
<p>I joke, but one really is better than the other. <code>:-)</code></p>
<p>There really is no easy way to say this, so I=E2=80=99ll just blurt it o=
ut: your computer might have been storing bytes in reverse order behind you=
r back. I know! No one wanted to have to tell you.</p>
<p>The thing is, everyone in the Internet world has generally agreed that i=
f you want to represent the two-byte hex number, say <code>b34f</code>, you=
=E2=80=99ll store it in two sequential bytes <code>b3</code> followed by <c=
ode>4f</code>. Makes sense, and, as <a href=3D"https://en.wikipedia.org/wik=
i/Wilford_Brimley">Wilford Brimley</a><a href=3D"https://beej.us/guide/bgne=
t/html/#fn17" class=3D"footnote-ref" id=3D"fnref17" role=3D"doc-noteref"><s=
up>17</sup></a> would tell you, it=E2=80=99s the Right Thing To Do. This nu=
mber, stored with the big end first, is called <em>Big-Endian</em>.</p>
<p>Unfortunately, a <em>few</em> computers scattered here and there through=
out the world, namely anything with an Intel or Intel-compatible processor,=
 store the bytes reversed, so <code>b34f</code> would be stored in memory a=
s the sequential bytes <code>4f</code> followed by <code>b3</code>. This st=
orage method is called <em>Little-Endian</em>.</p>
<p>But wait, I=E2=80=99m not done with terminology yet! The more-sane <em>B=
ig-Endian</em> is also called <em>Network Byte Order</em> because that=E2=
=80=99s the order us network types like.</p>
<p>Your computer stores numbers in <em>Host Byte Order</em>. If it=E2=80=99=
s an Intel 80x86, Host Byte Order is Little-Endian. If it=E2=80=99s a Motor=
ola 68k, Host Byte Order is Big-Endian. If it=E2=80=99s a PowerPC, Host Byt=
e Order is=E2=80=A6 well, it depends!</p>
<p>A lot of times when you=E2=80=99re building packets or filling out data =
structures you=E2=80=99ll need to make sure your two- and four-byte numbers=
 are in Network Byte Order. But how can you do this if you don=E2=80=99t kn=
ow the native Host Byte Order?</p>
<p>Good news! You just get to assume the Host Byte Order isn=E2=80=99t righ=
t, and you always run the value through a function to set it to Network Byt=
e Order. The function will do the magic conversion if it has to, and this w=
ay your code is portable to machines of differing endianness.</p>
<p>All righty. There are two types of numbers that you can convert: <code>s=
hort</code> (two bytes) and <code>long</code> (four bytes). These functions=
 work for the <code>unsigned</code> variations as well. Say you want to con=
vert a <code>short</code> from Host Byte Order to Network Byte Order. Start=
 with =E2=80=9Ch=E2=80=9D for =E2=80=9Chost=E2=80=9D, follow it with =E2=80=
=9Cto=E2=80=9D, then =E2=80=9Cn=E2=80=9D for =E2=80=9Cnetwork=E2=80=9D, and=
 =E2=80=9Cs=E2=80=9D for =E2=80=9Cshort=E2=80=9D: h-to-n-s, or <code>htons(=
)</code> (read: =E2=80=9CHost to Network Short=E2=80=9D).</p>
<p>It=E2=80=99s almost too easy=E2=80=A6</p>
<p>You can use every combination of =E2=80=9Cn=E2=80=9D, =E2=80=9Ch=E2=80=
=9D, =E2=80=9Cs=E2=80=9D, and =E2=80=9Cl=E2=80=9D you want, not counting th=
e really stupid ones. For example, there is NOT a <code>stolh()</code> (=E2=
=80=9CShort to Long Host=E2=80=9D) function=E2=80=94not at this party, anyw=
ay. But there are:</p>
<p>   </p>
<table>
<thead>
<tr class=3D"header">
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>htons()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>s</code>ho=
rt</td>
</tr>
<tr class=3D"even">
<td><code>htonl()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>l</code>on=
g</td>
</tr>
<tr class=3D"odd">
<td><code>ntohs()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>s</code>ho=
rt</td>
</tr>
<tr class=3D"even">
<td><code>ntohl()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>l</code>on=
g</td>
</tr>
</tbody>
</table>
<p>Basically, you=E2=80=99ll want to convert the numbers to Network Byte Or=
der before they go out on the wire, and convert them to Host Byte Order as =
they come in off the wire.</p>
<p>I don=E2=80=99t know of a 64-bit variant, sorry. And if you want to do f=
loating point, check out the section on <a href=3D"https://beej.us/guide/bg=
net/html/#serialization">Serialization</a>, far below.</p>
<p>Assume the numbers in this document are in Host Byte Order unless I say =
otherwise.</p>
<h2 data-number=3D"3.3" id=3D"structs"><span class=3D"header-section-number=
">3.3</span> <code>struct</code>s</h2>
<p>Well, we=E2=80=99re finally here. It=E2=80=99s time to talk about progra=
mming. In this section, I=E2=80=99ll cover various data types used by the s=
ockets interface, since some of them are a real bear to figure out.</p>
<p>First the easy one: a  socket descriptor. A socket descriptor is the fol=
lowing type:</p>
<div class=3D"sourceCode" id=3D"cb8"><pre class=3D"sourceCode c"><code clas=
s=3D"sourceCode c"><span id=3D"cb8-1"><a href=3D"https://beej.us/guide/bgne=
t/html/#cb8-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"=
dt">int</span></span></code></pre></div>
<p>Just a regular <code>int</code>.</p>
<p>Things get weird from here, so just read through and bear with me.</p>
<p>My First Struct=E2=84=A2=E2=80=94<code>struct addrinfo</code>.  This str=
ucture is a more recent invention, and is used to prep the socket address s=
tructures for subsequent use. It=E2=80=99s also used in host name lookups, =
and service name lookups. That=E2=80=99ll make more sense later when we get=
 to actual usage, but just know for now that it=E2=80=99s one of the first =
things you=E2=80=99ll call when making a connection.</p>
<div class=3D"sourceCode" id=3D"cb9"><pre class=3D"sourceCode c"><code clas=
s=3D"sourceCode c"><span id=3D"cb9-1"><a href=3D"https://beej.us/guide/bgne=
t/html/#cb9-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"=
kw">struct</span> addrinfo {</span>
<span id=3D"cb9-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-2" aria=
-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int</span> =
             ai_flags;     <span class=3D"co">// AI_PASSIVE, AI_CANONNAME, =
etc.</span></span>
<span id=3D"cb9-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-3" aria=
-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int</span> =
             ai_family;    <span class=3D"co">// AF_INET, AF_INET6, AF_UNSP=
EC</span></span>
<span id=3D"cb9-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-4" aria=
-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int</span> =
             ai_socktype;  <span class=3D"co">// SOCK_STREAM, SOCK_DGRAM</s=
pan></span>
<span id=3D"cb9-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-5" aria=
-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int</span> =
             ai_protocol;  <span class=3D"co">// use 0 for "any"</span></sp=
an>
<span id=3D"cb9-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-6" aria=
-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">size_t</spa=
n>           ai_addrlen;   <span class=3D"co">// size of ai_addr in bytes</=
span></span>
<span id=3D"cb9-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-7" aria=
-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"kw">struct</spa=
n> sockaddr *ai_addr;      <span class=3D"co">// struct sockaddr_in or _in6=
</span></span>
<span id=3D"cb9-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-8" aria=
-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">char</span>=
            *ai_canonname; <span class=3D"co">// full canonical hostname</s=
pan></span>
<span id=3D"cb9-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-9" aria=
-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb9-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-10" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"kw">struct</s=
pan> addrinfo *ai_next;      <span class=3D"co">// linked list, next node</=
span></span>
<span id=3D"cb9-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb9-11" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    };</span></code></pre></div>
<p>You=E2=80=99ll load this struct up a bit, and then call  <code>getaddrin=
fo()</code>. It=E2=80=99ll return a pointer to a new linked list of these s=
tructures filled out with all the goodies you need.</p>
<p>You can force it to use IPv4 or IPv6 in the <code>ai_family</code> field=
, or leave it as <code>AF_UNSPEC</code> to use whatever. This is cool becau=
se your code can be IP version-agnostic.</p>
<p>Note that this is a linked list: <code>ai_next</code> points at the next=
 element=E2=80=94there could be several results for you to choose from. I=
=E2=80=99d use the first result that worked, but you might have different b=
usiness needs; I don=E2=80=99t know everything, man!</p>
<p>You=E2=80=99ll see that the <code>ai_addr</code> field in the <code>stru=
ct addrinfo</code> is a pointer to a  <code>struct sockaddr</code>. This is=
 where we start getting into the nitty-gritty details of what=E2=80=99s ins=
ide an IP address structure.</p>
<p>You might not usually need to write to these structures; oftentimes, a c=
all to <code>getaddrinfo()</code> to fill out your <code>struct addrinfo</c=
ode> for you is all you=E2=80=99ll need. You <em>will</em>, however, have t=
o peer inside these <code>struct</code>s to get the values out, so I=E2=80=
=99m presenting them here.</p>
<p>(Also, all the code written before <code>struct addrinfo</code> was inve=
nted we packed all this stuff by hand, so you=E2=80=99ll see a lot of IPv4 =
code out in the wild that does exactly that. You know, in old versions of t=
his guide and so on.)</p>
<p>Some <code>struct</code>s are IPv4, some are IPv6, and some are both. I=
=E2=80=99ll make notes of which are what.</p>
<p>Anyway, the <code>struct sockaddr</code> holds socket address informatio=
n for many types of sockets.</p>
<div class=3D"sourceCode" id=3D"cb10"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb10-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb10-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"kw">struct</span> sockaddr {</span>
<span id=3D"cb10-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb10-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">unsigned<=
/span> <span class=3D"dt">short</span>    sa_family;    <span class=3D"co">=
// address family, AF_xxx</span></span>
<span id=3D"cb10-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb10-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">char</spa=
n>              sa_data[<span class=3D"dv">14</span>];  <span class=3D"co">=
// 14 bytes of protocol address</span></span>
<span id=3D"cb10-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb10-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    }; </span></code></pre></div>
<p><code>sa_family</code> can be a variety of things, but it=E2=80=99ll be =
 <code>AF_INET</code> (IPv4) or  <code>AF_INET6</code> (IPv6) for everythin=
g we do in this document. <code>sa_data</code> contains a destination addre=
ss and port number for the socket. This is rather unwieldy since you don=E2=
=80=99t want to tediously pack the address in the <code>sa_data</code> by h=
and.</p>
<p>To deal with <code>struct sockaddr</code>, programmers created a paralle=
l structure:  <code>struct sockaddr_in</code> (=E2=80=9Cin=E2=80=9D for =E2=
=80=9CInternet=E2=80=9D) to be used with IPv4.</p>
<p>And <em>this is the important</em> bit: a pointer to a <code>struct sock=
addr_in</code> can be cast to a pointer to a <code>struct sockaddr</code> a=
nd vice-versa. So even though <code>connect()</code> wants a <code>struct s=
ockaddr*</code>, you can still use a <code>struct sockaddr_in</code> and ca=
st it at the last minute!</p>
<div class=3D"sourceCode" id=3D"cb11"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb11-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb11-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"co">// (IPv4 only--see struct sockaddr_in6 for IPv6)</span></span>
<span id=3D"cb11-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb11-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb11-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb11-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</span>=
 sockaddr_in {</span>
<span id=3D"cb11-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb11-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">short</sp=
an> <span class=3D"dt">int</span>          sin_family;  <span class=3D"co">=
// Address family, AF_INET</span></span>
<span id=3D"cb11-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb11-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">unsigned<=
/span> <span class=3D"dt">short</span> <span class=3D"dt">int</span> sin_po=
rt;    <span class=3D"co">// Port number</span></span>
<span id=3D"cb11-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb11-6" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"kw">struct</s=
pan> in_addr     sin_addr;    <span class=3D"co">// Internet address</span>=
</span>
<span id=3D"cb11-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb11-7" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">unsigned<=
/span> <span class=3D"dt">char</span>      sin_zero[<span class=3D"dv">8</s=
pan>]; <span class=3D"co">// Same size as struct sockaddr</span></span>
<span id=3D"cb11-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb11-8" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    };</span></code></pre></div>
<p>This structure makes it easy to reference elements of the socket address=
. Note that <code>sin_zero</code> (which is included to pad the structure t=
o the length of a <code>struct sockaddr</code>) should be set to all zeros =
with the function <code>memset()</code>. Also, notice that <code>sin_family=
</code> corresponds to <code>sa_family</code> in a <code>struct sockaddr</c=
ode> and should be set to =E2=80=9C<code>AF_INET</code>=E2=80=9D. Finally, =
the <code>sin_port</code> must be in  <em>Network Byte Order</em> (by using=
  <code>htons()</code>!)</p>
<p>Let=E2=80=99s dig deeper! You see the <code>sin_addr</code> field is a <=
code>struct in_addr</code>. What is that thing? Well, not to be overly dram=
atic, but it=E2=80=99s one of the scariest unions of all time:</p>
<div class=3D"sourceCode" id=3D"cb12"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb12-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb12-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"co">// (IPv4 only--see struct in6_addr for IPv6)</span></span>
<span id=3D"cb12-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb12-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb12-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb12-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"co">// Internet a=
ddress (a structure for historical reasons)</span></span>
<span id=3D"cb12-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb12-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</span>=
 in_addr {</span>
<span id=3D"cb12-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb12-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">uint32_t<=
/span> s_addr; <span class=3D"co">// that's a 32-bit int (4 bytes)</span></=
span>
<span id=3D"cb12-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb12-6" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    };</span></code></pre></div>
<p>Whoa! Well, it <em>used</em> to be a union, but now those days seem to b=
e gone. Good riddance. So if you have declared <code>ina</code> to be of ty=
pe <code>struct sockaddr_in</code>, then <code>ina.sin_addr.s_addr</code> r=
eferences the 4-byte IP address (in Network Byte Order). Note that even if =
your system still uses the God-awful union for <code>struct in_addr</code>,=
 you can still reference the 4-byte IP address in exactly the same way as I=
 did above (this due to <code>#define</code>s).</p>
<p>What about  IPv6? Similar <code>struct</code>s exist for it, as well:</p=
>
<div class=3D"sourceCode" id=3D"cb13"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb13-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb13-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"co">// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)<=
/span></span>
<span id=3D"cb13-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb13-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</span>=
 sockaddr_in6 {</span>
<span id=3D"cb13-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        u_int16_t       sin6_family;=
   <span class=3D"co">// address family, AF_INET6</span></span>
<span id=3D"cb13-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        u_int16_t       sin6_port;  =
   <span class=3D"co">// port number, Network Byte Order</span></span>
<span id=3D"cb13-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-6" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        u_int32_t       sin6_flowinf=
o; <span class=3D"co">// IPv6 flow information</span></span>
<span id=3D"cb13-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-7" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"kw">struct</s=
pan> in6_addr sin6_addr;     <span class=3D"co">// IPv6 address</span></spa=
n>
<span id=3D"cb13-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-8" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        u_int32_t       sin6_scope_i=
d; <span class=3D"co">// Scope ID</span></span>
<span id=3D"cb13-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-9" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    };</span>
<span id=3D"cb13-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-10" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb13-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-11" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</spa=
n> in6_addr {</span>
<span id=3D"cb13-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-12" =
aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">unsigne=
d</span> <span class=3D"dt">char</span>   s6_addr[<span class=3D"dv">16</sp=
an>];   <span class=3D"co">// IPv6 address</span></span>
<span id=3D"cb13-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb13-13" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    };</span></code></pre></div>
<p>Note that IPv6 has an IPv6 address and a port number, just like IPv4 has=
 an IPv4 address and a port number.</p>
<p>Also note that I=E2=80=99m not going to talk about the IPv6 flow informa=
tion or Scope ID fields for the moment=E2=80=A6 this is just a starter guid=
e. <code>:-)</code></p>
<p>Last but not least, here is another simple structure, <code>struct socka=
ddr_storage</code> that is designed to be large enough to hold both IPv4 an=
d IPv6 structures. See, for some calls, sometimes you don=E2=80=99t know in=
 advance if it=E2=80=99s going to fill out your <code>struct sockaddr</code=
> with an IPv4 or IPv6 address. So you pass in this parallel structure, ver=
y similar to <code>struct sockaddr</code> except larger, and then cast it t=
o the type you need:</p>
<div class=3D"sourceCode" id=3D"cb14"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb14-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb14-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"kw">struct</span> sockaddr_storage {</span>
<span id=3D"cb14-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb14-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        sa_family_t  ss_family;     =
<span class=3D"co">// address family</span></span>
<span id=3D"cb14-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb14-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb14-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb14-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"co">// all th=
is is padding, implementation specific, ignore it:</span></span>
<span id=3D"cb14-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb14-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">char</spa=
n>      __ss_pad1[_SS_PAD1SIZE];</span>
<span id=3D"cb14-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb14-6" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int64_t</=
span>   __ss_align;</span>
<span id=3D"cb14-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb14-7" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">char</spa=
n>      __ss_pad2[_SS_PAD2SIZE];</span>
<span id=3D"cb14-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb14-8" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    };</span></code></pre></div>
<p>What=E2=80=99s important is that you can see the address family in the <=
code>ss_family</code> field=E2=80=94check this to see if it=E2=80=99s <code=
>AF_INET</code> or <code>AF_INET6</code> (for IPv4 or IPv6). Then you can c=
ast it to a <code>struct sockaddr_in</code> or <code>struct sockaddr_in6</c=
ode> if you wanna.</p>
<h2 data-number=3D"3.4" id=3D"ip-addresses-part-deux"><span class=3D"header=
-section-number">3.4</span> IP Addresses, Part Deux</h2>
<p>Fortunately for you, there are a bunch of functions that allow you to ma=
nipulate  IP addresses. No need to figure them out by hand and stuff them i=
n a <code>long</code> with the <code>&lt;&lt;</code> operator.</p>
<p>First, let=E2=80=99s say you have a <code>struct sockaddr_in ina</code>,=
 and you have an IP address =E2=80=9C<code>10.12.110.57</code>=E2=80=9D or =
=E2=80=9C<code>2001:db8:63b3:1::3490</code>=E2=80=9D that you want to store=
 into it. The function you want to use,  <code>inet_pton()</code>, converts=
 an IP address in numbers-and-dots notation into either a <code>struct in_a=
ddr</code> or a <code>struct in6_addr</code> depending on whether you speci=
fy <code>AF_INET</code> or <code>AF_INET6</code>. (=E2=80=9C<code>pton</cod=
e>=E2=80=9D stands for =E2=80=9Cpresentation to network=E2=80=9D=E2=80=94yo=
u can call it =E2=80=9Cprintable to network=E2=80=9D if that=E2=80=99s easi=
er to remember.) The conversion can be made as follows:</p>
<div class=3D"sourceCode" id=3D"cb15"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb15-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb15-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"kw">struct</span> sockaddr_in sa; <span class=3D"co">// IPv4</span></sp=
an>
<span id=3D"cb15-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb15-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</span>=
 sockaddr_in6 sa6; <span class=3D"co">// IPv6</span></span>
<span id=3D"cb15-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb15-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb15-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb15-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    inet_pton(AF_INET, <span class=
=3D"st">"10.12.110.57"</span>, &amp;(sa.sin_addr)); <span class=3D"co">// I=
Pv4</span></span>
<span id=3D"cb15-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb15-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    inet_pton(AF_INET6, <span class=
=3D"st">"2001:db8:63b3:1::3490"</span>, &amp;(sa6.sin6_addr)); <span class=
=3D"co">// IPv6</span></span></code></pre></div>
<p>(Quick note: the old way of doing things used a function called  <code>i=
net_addr()</code> or another function called  <code>inet_aton()</code>; the=
se are now obsolete and don=E2=80=99t work with IPv6.)</p>
<p>Now, the above code snippet isn=E2=80=99t very robust because there is n=
o error checking. See, <code>inet_pton()</code> returns <code>-1</code> on =
error, or 0 if the address is messed up. So check to make sure the result i=
s greater than 0 before using!</p>
<p>All right, now you can convert string IP addresses to their binary repre=
sentations. What about the other way around? What if you have a <code>struc=
t in_addr</code> and you want to print it in numbers-and-dots notation? (Or=
 a <code>struct in6_addr</code> that you want in, uh, =E2=80=9Chex-and-colo=
ns=E2=80=9D notation.) In this case, you=E2=80=99ll want to use the functio=
n  <code>inet_ntop()</code> (=E2=80=9Cntop=E2=80=9D means =E2=80=9Cnetwork =
to presentation=E2=80=9D=E2=80=94you can call it =E2=80=9Cnetwork to printa=
ble=E2=80=9D if that=E2=80=99s easier to remember), like this:</p>
<div class=3D"sourceCode" id=3D"cb16"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb16-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb16-1"></a><span class=3D"co">// IPv4:<=
/span></span>
<span id=3D"cb16-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-2"></=
a></span>
<span id=3D"cb16-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-3"></=
a><span class=3D"dt">char</span> ip4[INET_ADDRSTRLEN];  <span class=3D"co">=
// space to hold the IPv4 string</span></span>
<span id=3D"cb16-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-4"></=
a><span class=3D"kw">struct</span> sockaddr_in sa;      <span class=3D"co">=
// pretend this is loaded with something</span></span>
<span id=3D"cb16-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-5"></=
a></span>
<span id=3D"cb16-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-6"></=
a>inet_ntop(AF_INET, &amp;(sa.sin_addr), ip4, INET_ADDRSTRLEN);</span>
<span id=3D"cb16-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-7"></=
a></span>
<span id=3D"cb16-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-8"></=
a>printf(<span class=3D"st">"The IPv4 address is: %s</span><span class=3D"s=
c">\n</span><span class=3D"st">"</span>, ip4);</span>
<span id=3D"cb16-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-9"></=
a></span>
<span id=3D"cb16-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-10">=
</a></span>
<span id=3D"cb16-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-11">=
</a><span class=3D"co">// IPv6:</span></span>
<span id=3D"cb16-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-12">=
</a></span>
<span id=3D"cb16-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-13">=
</a><span class=3D"dt">char</span> ip6[INET6_ADDRSTRLEN]; <span class=3D"co=
">// space to hold the IPv6 string</span></span>
<span id=3D"cb16-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-14">=
</a><span class=3D"kw">struct</span> sockaddr_in6 sa6;    <span class=3D"co=
">// pretend this is loaded with something</span></span>
<span id=3D"cb16-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-15">=
</a></span>
<span id=3D"cb16-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-16">=
</a>inet_ntop(AF_INET6, &amp;(sa6.sin6_addr), ip6, INET6_ADDRSTRLEN);</span=
>
<span id=3D"cb16-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-17">=
</a></span>
<span id=3D"cb16-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb16-18">=
</a>printf(<span class=3D"st">"The address is: %s</span><span class=3D"sc">=
\n</span><span class=3D"st">"</span>, ip6);</span></code></pre></div>
<p>When you call it, you=E2=80=99ll pass the address type (IPv4 or IPv6), t=
he address, a pointer to a string to hold the result, and the maximum lengt=
h of that string. (Two macros conveniently hold the size of the string you=
=E2=80=99ll need to hold the largest IPv4 or IPv6 address: <code>INET_ADDRS=
TRLEN</code> and <code>INET6_ADDRSTRLEN</code>.)</p>
<p>(Another quick note to mention once again the old way of doing things: t=
he historical function to do this conversion was called  <code>inet_ntoa()<=
/code>. It=E2=80=99s also obsolete and won=E2=80=99t work with IPv6.)</p>
<p>Lastly, these functions only work with numeric IP addresses=E2=80=94they=
 won=E2=80=99t do any nameserver DNS lookup on a hostname, like =E2=80=9C<c=
ode>www.example.com</code>=E2=80=9D. You will use <code>getaddrinfo()</code=
> to do that, as you=E2=80=99ll see later on.</p>
<h3 data-number=3D"3.4.1" id=3D"private-or-disconnected-networks"><span cla=
ss=3D"header-section-number">3.4.1</span> Private (Or Disconnected) Network=
s</h3>
<p> Lots of places have a  firewall that hides the network from the rest of=
 the world for their own protection. And often times, the firewall translat=
es =E2=80=9Cinternal=E2=80=9D IP addresses to =E2=80=9Cexternal=E2=80=9D (t=
hat everyone else in the world knows) IP addresses using a process called <=
em>Network Address Translation</em>, or  NAT.</p>
<p>Are you getting nervous yet? =E2=80=9CWhere=E2=80=99s he going with all =
this weird stuff?=E2=80=9D</p>
<p>Well, relax and buy yourself a non-alcoholic (or alcoholic) drink, becau=
se as a beginner, you don=E2=80=99t even have to worry about NAT, since it=
=E2=80=99s done for you transparently. But I wanted to talk about the netwo=
rk behind the firewall in case you started getting confused by the network =
numbers you were seeing.</p>
<p>For instance, I have a firewall at home. I have two static IPv4 addresse=
s allocated to me by the DSL company, and yet I have seven computers on the=
 network. How is this possible? Two computers can=E2=80=99t share the same =
IP address, or else the data wouldn=E2=80=99t know which one to go to!</p>
<p>The answer is: they don=E2=80=99t share the same IP addresses. They are =
on a private network with 24 million IP addresses allocated to it. They are=
 all just for me. Well, all for me as far as anyone else is concerned. Here=
=E2=80=99s what=E2=80=99s happening:</p>
<p>If I log into a remote computer, it tells me I=E2=80=99m logged in from =
192.0.2.33 which is the public IP address my ISP has provided to me. But if=
 I ask my local computer what its IP address is, it says 10.0.0.5. Who is t=
ranslating the IP address from one to the other? That=E2=80=99s right, the =
firewall! It=E2=80=99s doing NAT!</p>
<p><code>10.x.x.x</code> is one of a few reserved networks that are only to=
 be used either on fully disconnected networks, or on networks that are beh=
ind firewalls. The details of which private network numbers are available f=
or you to use are outlined in <a href=3D"https://tools.ietf.org/html/rfc191=
8">RFC 1918</a><a href=3D"https://beej.us/guide/bgnet/html/#fn18" class=3D"=
footnote-ref" id=3D"fnref18" role=3D"doc-noteref"><sup>18</sup></a>, but so=
me common ones you=E2=80=99ll see are  <code>10.x.x.x</code> and  <code>192=
.168.x.x</code>, where <code>x</code> is 0-255, generally. Less common is <=
code>172.y.x.x</code>, where <code>y</code> goes between 16 and 31.</p>
<p>Networks behind a NATing firewall don=E2=80=99t <em>need</em> to be on o=
ne of these reserved networks, but they commonly are.</p>
<p>(Fun fact! My external IP address isn=E2=80=99t really <code>192.0.2.33<=
/code>. The <code>192.0.2.x</code> network is reserved for make-believe =E2=
=80=9Creal=E2=80=9D IP addresses to be used in documentation, just like thi=
s guide! Wowzers!)</p>
<p> IPv6 has private networks, too, in a sense. They=E2=80=99ll start with =
<code>fdXX:</code> (or maybe in the future <code>fcXX:</code>), as per <a h=
ref=3D"https://tools.ietf.org/html/rfc4193">RFC 4193</a><a href=3D"https://=
beej.us/guide/bgnet/html/#fn19" class=3D"footnote-ref" id=3D"fnref19" role=
=3D"doc-noteref"><sup>19</sup></a>. NAT and IPv6 don=E2=80=99t generally mi=
x, however (unless you=E2=80=99re doing the IPv6 to IPv4 gateway thing whic=
h is beyond the scope of this document)=E2=80=94in theory you=E2=80=99ll ha=
ve so many addresses at your disposal that you won=E2=80=99t need to use NA=
T any longer. But if you want to allocate addresses for yourself on a netwo=
rk that won=E2=80=99t route outside, this is how to do it.</p>
<h1 data-number=3D"4" id=3D"jumping-from-ipv4-to-ipv6"><span class=3D"heade=
r-section-number">4</span> Jumping from IPv4 to IPv6</h1>
<p> But I just want to know what to change in my code to get it going with =
IPv6! Tell me now!</p>
<p>Ok! Ok!</p>
<p>Almost everything in here is something I=E2=80=99ve gone over, above, bu=
t it=E2=80=99s the short version for the impatient. (Of course, there is mo=
re than this, but this is what applies to the guide.)</p>
<ol type=3D"1">
<li><p>First of all, try to use  <a href=3D"https://beej.us/guide/bgnet/htm=
l/#structs"><code>getaddrinfo()</code></a> to get all the <code>struct sock=
addr</code> info, instead of packing the structures by hand. This will keep=
 you IP version-agnostic, and will eliminate many of the subsequent steps.<=
/p></li>
<li><p>Any place that you find you=E2=80=99re hard-coding anything related =
to the IP version, try to wrap up in a helper function.</p></li>
<li><p>Change <code>AF_INET</code> to <code>AF_INET6</code>.</p></li>
<li><p>Change <code>PF_INET</code> to <code>PF_INET6</code>.</p></li>
<li><p>Change <code>INADDR_ANY</code> assignments to <code>in6addr_any</cod=
e> assignments, which are slightly different:</p>
<div class=3D"sourceCode" id=3D"cb17"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb17-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb17-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"kw">struct</span> sockaddr_in sa;</span>
<span id=3D"cb17-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb17-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</span>=
 sockaddr_in6 sa6;</span>
<span id=3D"cb17-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb17-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a></span>
<span id=3D"cb17-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb17-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    sa.sin_addr.s_addr =3D INADDR_AN=
Y;  <span class=3D"co">// use my IPv4 address</span></span>
<span id=3D"cb17-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb17-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    sa6.sin6_addr =3D in6addr_any; <=
span class=3D"co">// use my IPv6 address</span></span></code></pre></div>
<p>Also, the value <code>IN6ADDR_ANY_INIT</code> can be used as an initiali=
zer when the <code>struct in6_addr</code> is declared, like so:</p>
<div class=3D"sourceCode" id=3D"cb18"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb18-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb18-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"kw">struct</span> in6_addr ia6 =3D IN6ADDR_ANY_INIT;</span></code></pre=
></div></li>
<li><p>Instead of <code>struct sockaddr_in</code> use <code>struct sockaddr=
_in6</code>, being sure to add =E2=80=9C6=E2=80=9D to the fields as appropr=
iate (see <a href=3D"https://beej.us/guide/bgnet/html/#structs"><code>struc=
t</code>s</a>, above). There is no <code>sin6_zero</code> field.</p></li>
<li><p>Instead of <code>struct in_addr</code> use <code>struct in6_addr</co=
de>, being sure to add =E2=80=9C6=E2=80=9D to the fields as appropriate (se=
e <a href=3D"https://beej.us/guide/bgnet/html/#structs"><code>struct</code>=
s</a>, above).</p></li>
<li><p>Instead of <code>inet_aton()</code> or <code>inet_addr()</code>, use=
 <code>inet_pton()</code>.</p></li>
<li><p>Instead of <code>inet_ntoa()</code>, use <code>inet_ntop()</code>.</=
p></li>
<li><p>Instead of <code>gethostbyname()</code>, use the superior <code>geta=
ddrinfo()</code>.</p></li>
<li><p>Instead of <code>gethostbyaddr()</code>, use the superior  <code>get=
nameinfo()</code> (although <code>gethostbyaddr()</code> can still work wit=
h IPv6).</p></li>
<li><p><code>INADDR_BROADCAST</code> no longer works. Use IPv6 multicast in=
stead.</p></li>
</ol>
<p><em>Et voila</em>!</p>
<h1 data-number=3D"5" id=3D"system-calls-or-bust"><span class=3D"header-sec=
tion-number">5</span> System Calls or Bust</h1>
<p>This is the section where we get into the system calls (and other librar=
y calls) that allow you to access the network functionality of a Unix box, =
or any box that supports the sockets API for that matter (BSD, Windows, Lin=
ux, Mac, what-have-you.) When you call one of these functions, the kernel t=
akes over and does all the work for you automagically.</p>
<p>The place most people get stuck around here is what order to call these =
things in. In that, the <code>man</code> pages are no use, as you=E2=80=99v=
e probably discovered. Well, to help with that dreadful situation, I=E2=80=
=99ve tried to lay out the system calls in the following sections in <em>ex=
actly</em> (approximately) the same order that you=E2=80=99ll need to call =
them in your programs.</p>
<p>That, coupled with a few pieces of sample code here and there, some milk=
 and cookies (which I fear you will have to supply yourself), and some raw =
guts and courage, and you=E2=80=99ll be beaming data around the Internet li=
ke the Son of Jon Postel!</p>
<p><em>(Please note that for brevity, many code snippets below do not inclu=
de necessary error checking. And they very commonly assume that the result =
from calls to <code>getaddrinfo()</code> succeed and return a valid entry i=
n the linked list. Both of these situations are properly addressed in the s=
tand-alone programs, though, so use those as a model.)</em></p>
<h2 data-number=3D"5.1" id=3D"getaddrinfoprepare-to-launch"><span class=3D"=
header-section-number">5.1</span> <code>getaddrinfo()</code>=E2=80=94Prepar=
e to launch!</h2>
<p> This is a real workhorse of a function with a lot of options, but usage=
 is actually pretty simple. It helps set up the <code>struct</code>s you ne=
ed later on.</p>
<p>A tiny bit of history: it used to be that you would use a function calle=
d <code>gethostbyname()</code> to do DNS lookups. Then you=E2=80=99d load t=
hat information by hand into a <code>struct sockaddr_in</code>, and use tha=
t in your calls.</p>
<p>This is no longer necessary, thankfully. (Nor is it desirable, if you wa=
nt to write code that works for both IPv4 and IPv6!) In these modern times,=
 you now have the function <code>getaddrinfo()</code> that does all kinds o=
f good stuff for you, including DNS and service name lookups, and fills out=
 the <code>struct</code>s you need, besides!</p>
<p>Let=E2=80=99s take a look!</p>
<div class=3D"sourceCode" id=3D"cb19"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb19-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb19-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></span=
>
<span id=3D"cb19-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb19-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb19-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb19-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;netdb.h&gt;</span></span>
<span id=3D"cb19-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb19-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb19-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb19-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> ge=
taddrinfo(<span class=3D"dt">const</span> <span class=3D"dt">char</span> *n=
ode,     <span class=3D"co">// e.g. "www.example.com" or IP</span></span>
<span id=3D"cb19-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb19-6" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>                    <span class=3D"d=
t">const</span> <span class=3D"dt">char</span> *service,  <span class=3D"co=
">// e.g. "http" or port number</span></span>
<span id=3D"cb19-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb19-7" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>                    <span class=3D"d=
t">const</span> <span class=3D"kw">struct</span> addrinfo *hints,</span>
<span id=3D"cb19-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb19-8" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>                    <span class=3D"k=
w">struct</span> addrinfo **res);</span></code></pre></div>
<p>You give this function three input parameters, and it gives you a pointe=
r to a linked-list, <code>res</code>, of results.</p>
<p>The <code>node</code> parameter is the host name to connect to, or an IP=
 address.</p>
<p>Next is the parameter <code>service</code>, which can be a port number, =
like =E2=80=9C80=E2=80=9D, or the name of a particular service (found in <a=
 href=3D"https://www.iana.org/assignments/port-numbers">The IANA Port List<=
/a><a href=3D"https://beej.us/guide/bgnet/html/#fn20" class=3D"footnote-ref=
" id=3D"fnref20" role=3D"doc-noteref"><sup>20</sup></a> or the <code>/etc/s=
ervices</code> file on your Unix machine) like =E2=80=9Chttp=E2=80=9D or =
=E2=80=9Cftp=E2=80=9D or =E2=80=9Ctelnet=E2=80=9D or =E2=80=9Csmtp=E2=80=9D=
 or whatever.</p>
<p>Finally, the <code>hints</code> parameter points to a <code>struct addri=
nfo</code> that you=E2=80=99ve already filled out with relevant information=
.</p>
<p>Here=E2=80=99s a sample call if you=E2=80=99re a server who wants to lis=
ten on your host=E2=80=99s IP address, port 3490. Note that this doesn=E2=
=80=99t actually do any listening or network setup; it merely sets up struc=
tures we=E2=80=99ll use later:</p>
<div class=3D"sourceCode" id=3D"cb20"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb20-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb20-1"></a><span class=3D"dt">int</span=
> status;</span>
<span id=3D"cb20-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-2"></=
a><span class=3D"kw">struct</span> addrinfo hints;</span>
<span id=3D"cb20-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-3"></=
a><span class=3D"kw">struct</span> addrinfo *servinfo;  <span class=3D"co">=
// will point to the results</span></span>
<span id=3D"cb20-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-4"></=
a></span>
<span id=3D"cb20-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-5"></=
a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">sizeof=
</span> hints); <span class=3D"co">// make sure the struct is empty</span><=
/span>
<span id=3D"cb20-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-6"></=
a>hints.ai_family =3D AF_UNSPEC;     <span class=3D"co">// don't care IPv4 =
or IPv6</span></span>
<span id=3D"cb20-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-7"></=
a>hints.ai_socktype =3D SOCK_STREAM; <span class=3D"co">// TCP stream socke=
ts</span></span>
<span id=3D"cb20-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-8"></=
a>hints.ai_flags =3D AI_PASSIVE;     <span class=3D"co">// fill in my IP fo=
r me</span></span>
<span id=3D"cb20-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-9"></=
a></span>
<span id=3D"cb20-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-10">=
</a><span class=3D"cf">if</span> ((status =3D getaddrinfo(NULL, <span class=
=3D"st">"3490"</span>, &amp;hints, &amp;servinfo)) !=3D <span class=3D"dv">=
0</span>) {</span>
<span id=3D"cb20-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-11">=
</a>    fprintf(stderr, <span class=3D"st">"getaddrinfo error: %s</span><sp=
an class=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(status))=
;</span>
<span id=3D"cb20-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-12">=
</a>    exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb20-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-13">=
</a>}</span>
<span id=3D"cb20-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-14">=
</a></span>
<span id=3D"cb20-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-15">=
</a><span class=3D"co">// servinfo now points to a linked list of 1 or more=
 struct addrinfos</span></span>
<span id=3D"cb20-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-16">=
</a></span>
<span id=3D"cb20-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-17">=
</a><span class=3D"co">// ... do everything until you don't need servinfo a=
nymore ....</span></span>
<span id=3D"cb20-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-18">=
</a></span>
<span id=3D"cb20-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb20-19">=
</a>freeaddrinfo(servinfo); <span class=3D"co">// free the linked-list</spa=
n></span></code></pre></div>
<p>Notice that I set the <code>ai_family</code> to <code>AF_UNSPEC</code>, =
thereby saying that I don=E2=80=99t care if we use IPv4 or IPv6. You can se=
t it to <code>AF_INET</code> or <code>AF_INET6</code> if you want one or th=
e other specifically.</p>
<p>Also, you=E2=80=99ll see the <code>AI_PASSIVE</code> flag in there; this=
 tells <code>getaddrinfo()</code> to assign the address of my local host to=
 the socket structures. This is nice because then you don=E2=80=99t have to=
 hardcode it. (Or you can put a specific address in as the first parameter =
to <code>getaddrinfo()</code> where I currently have <code>NULL</code>, up =
there.)</p>
<p>Then we make the call. If there=E2=80=99s an error (<code>getaddrinfo()<=
/code> returns non-zero), we can print it out using the function <code>gai_=
strerror()</code>, as you see. If everything works properly, though, <code>=
servinfo</code> will point to a linked list of <code>struct addrinfo</code>=
s, each of which contains a <code>struct sockaddr</code> of some kind that =
we can use later! Nifty!</p>
<p>Finally, when we=E2=80=99re eventually all done with the linked list tha=
t <code>getaddrinfo()</code> so graciously allocated for us, we can (and sh=
ould) free it all up with a call to <code>freeaddrinfo()</code>.</p>
<p>Here=E2=80=99s a sample call if you=E2=80=99re a client who wants to con=
nect to a particular server, say =E2=80=9Cwww.example.net=E2=80=9D port 349=
0. Again, this doesn=E2=80=99t actually connect, but it sets up the structu=
res we=E2=80=99ll use later:</p>
<div class=3D"sourceCode" id=3D"cb21"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb21-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb21-1"></a><span class=3D"dt">int</span=
> status;</span>
<span id=3D"cb21-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-2"></=
a><span class=3D"kw">struct</span> addrinfo hints;</span>
<span id=3D"cb21-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-3"></=
a><span class=3D"kw">struct</span> addrinfo *servinfo;  <span class=3D"co">=
// will point to the results</span></span>
<span id=3D"cb21-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-4"></=
a></span>
<span id=3D"cb21-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-5"></=
a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">sizeof=
</span> hints); <span class=3D"co">// make sure the struct is empty</span><=
/span>
<span id=3D"cb21-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-6"></=
a>hints.ai_family =3D AF_UNSPEC;     <span class=3D"co">// don't care IPv4 =
or IPv6</span></span>
<span id=3D"cb21-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-7"></=
a>hints.ai_socktype =3D SOCK_STREAM; <span class=3D"co">// TCP stream socke=
ts</span></span>
<span id=3D"cb21-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-8"></=
a></span>
<span id=3D"cb21-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-9"></=
a><span class=3D"co">// get ready to connect</span></span>
<span id=3D"cb21-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-10">=
</a>status =3D getaddrinfo(<span class=3D"st">"www.example.net"</span>, <sp=
an class=3D"st">"3490"</span>, &amp;hints, &amp;servinfo);</span>
<span id=3D"cb21-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-11">=
</a></span>
<span id=3D"cb21-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-12">=
</a><span class=3D"co">// servinfo now points to a linked list of 1 or more=
 struct addrinfos</span></span>
<span id=3D"cb21-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-13">=
</a></span>
<span id=3D"cb21-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb21-14">=
</a><span class=3D"co">// etc.</span></span></code></pre></div>
<p>I keep saying that <code>servinfo</code> is a linked list with all kinds=
 of address information. Let=E2=80=99s write a quick demo program to show o=
ff this information. <a href=3D"https://beej.us/guide/bgnet/examples/showip=
.c">This short program</a><a href=3D"https://beej.us/guide/bgnet/html/#fn21=
" class=3D"footnote-ref" id=3D"fnref21" role=3D"doc-noteref"><sup>21</sup><=
/a> will print the IP addresses for whatever host you specify on the comman=
d line:</p>
<div class=3D"sourceCode" id=3D"cb22"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb22-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb22-1"></a><span class=3D"co">/*</span>=
</span>
<span id=3D"cb22-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-2"></=
a><span class=3D"co">** showip.c -- show IP addresses for a host given on t=
he command line</span></span>
<span id=3D"cb22-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-3"></=
a><span class=3D"co">*/</span></span>
<span id=3D"cb22-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-4"></=
a></span>
<span id=3D"cb22-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-5"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb22-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;string.h&gt;</s=
pan></span>
<span id=3D"cb22-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;=
</span></span>
<span id=3D"cb22-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt=
;</span></span>
<span id=3D"cb22-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-9"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</sp=
an></span>
<span id=3D"cb22-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-10">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&g=
t;</span></span>
<span id=3D"cb22-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-11">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&=
gt;</span></span>
<span id=3D"cb22-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-12">=
</a></span>
<span id=3D"cb22-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-13">=
</a><span class=3D"dt">int</span> main(<span class=3D"dt">int</span> argc, =
<span class=3D"dt">char</span> *argv[])</span>
<span id=3D"cb22-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-14">=
</a>{</span>
<span id=3D"cb22-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-15">=
</a>    <span class=3D"kw">struct</span> addrinfo hints, *res, *p;</span>
<span id=3D"cb22-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-16">=
</a>    <span class=3D"dt">int</span> status;</span>
<span id=3D"cb22-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-17">=
</a>    <span class=3D"dt">char</span> ipstr[INET6_ADDRSTRLEN];</span>
<span id=3D"cb22-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-18">=
</a></span>
<span id=3D"cb22-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-19">=
</a>    <span class=3D"cf">if</span> (argc !=3D <span class=3D"dv">2</span>=
) {</span>
<span id=3D"cb22-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-20">=
</a>        fprintf(stderr,<span class=3D"st">"usage: showip hostname</span=
><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb22-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-21">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">1</span>;</=
span>
<span id=3D"cb22-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-22">=
</a>    }</span>
<span id=3D"cb22-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-23">=
</a></span>
<span id=3D"cb22-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-24">=
</a>    memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">=
sizeof</span> hints);</span>
<span id=3D"cb22-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-25">=
</a>    hints.ai_family =3D AF_UNSPEC; <span class=3D"co">// AF_INET or AF_=
INET6 to force version</span></span>
<span id=3D"cb22-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-26">=
</a>    hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb22-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-27">=
</a></span>
<span id=3D"cb22-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-28">=
</a>    <span class=3D"cf">if</span> ((status =3D getaddrinfo(argv[<span cl=
ass=3D"dv">1</span>], NULL, &amp;hints, &amp;res)) !=3D <span class=3D"dv">=
0</span>) {</span>
<span id=3D"cb22-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-29">=
</a>        fprintf(stderr, <span class=3D"st">"getaddrinfo: %s</span><span=
 class=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(status));<=
/span>
<span id=3D"cb22-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-30">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">2</span>;</=
span>
<span id=3D"cb22-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-31">=
</a>    }</span>
<span id=3D"cb22-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-32">=
</a></span>
<span id=3D"cb22-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-33">=
</a>    printf(<span class=3D"st">"IP addresses for %s:</span><span class=
=3D"sc">\n\n</span><span class=3D"st">"</span>, argv[<span class=3D"dv">1</=
span>]);</span>
<span id=3D"cb22-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-34">=
</a></span>
<span id=3D"cb22-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-35">=
</a>    <span class=3D"cf">for</span>(p =3D res;p !=3D NULL; p =3D p-&gt;ai=
_next) {</span>
<span id=3D"cb22-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-36">=
</a>        <span class=3D"dt">void</span> *addr;</span>
<span id=3D"cb22-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-37">=
</a>        <span class=3D"dt">char</span> *ipver;</span>
<span id=3D"cb22-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-38">=
</a></span>
<span id=3D"cb22-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-39">=
</a>        <span class=3D"co">// get the pointer to the address itself,</s=
pan></span>
<span id=3D"cb22-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-40">=
</a>        <span class=3D"co">// different fields in IPv4 and IPv6:</span>=
</span>
<span id=3D"cb22-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-41">=
</a>        <span class=3D"cf">if</span> (p-&gt;ai_family =3D=3D AF_INET) {=
 <span class=3D"co">// IPv4</span></span>
<span id=3D"cb22-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-42">=
</a>            <span class=3D"kw">struct</span> sockaddr_in *ipv4 =3D (<sp=
an class=3D"kw">struct</span> sockaddr_in *)p-&gt;ai_addr;</span>
<span id=3D"cb22-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-43">=
</a>            addr =3D &amp;(ipv4-&gt;sin_addr);</span>
<span id=3D"cb22-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-44">=
</a>            ipver =3D <span class=3D"st">"IPv4"</span>;</span>
<span id=3D"cb22-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-45">=
</a>        } <span class=3D"cf">else</span> { <span class=3D"co">// IPv6</=
span></span>
<span id=3D"cb22-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-46">=
</a>            <span class=3D"kw">struct</span> sockaddr_in6 *ipv6 =3D (<s=
pan class=3D"kw">struct</span> sockaddr_in6 *)p-&gt;ai_addr;</span>
<span id=3D"cb22-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-47">=
</a>            addr =3D &amp;(ipv6-&gt;sin6_addr);</span>
<span id=3D"cb22-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-48">=
</a>            ipver =3D <span class=3D"st">"IPv6"</span>;</span>
<span id=3D"cb22-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-49">=
</a>        }</span>
<span id=3D"cb22-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-50">=
</a></span>
<span id=3D"cb22-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-51">=
</a>        <span class=3D"co">// convert the IP to a string and print it:<=
/span></span>
<span id=3D"cb22-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-52">=
</a>        inet_ntop(p-&gt;ai_family, addr, ipstr, <span class=3D"kw">size=
of</span> ipstr);</span>
<span id=3D"cb22-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-53">=
</a>        printf(<span class=3D"st">"  %s: %s</span><span class=3D"sc">\n=
</span><span class=3D"st">"</span>, ipver, ipstr);</span>
<span id=3D"cb22-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-54">=
</a>    }</span>
<span id=3D"cb22-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-55">=
</a></span>
<span id=3D"cb22-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-56">=
</a>    freeaddrinfo(res); <span class=3D"co">// free the linked list</span=
></span>
<span id=3D"cb22-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-57">=
</a></span>
<span id=3D"cb22-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-58">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb22-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb22-59">=
</a>}</span></code></pre></div>
<p>As you see, the code calls <code>getaddrinfo()</code> on whatever you pa=
ss on the command line, that fills out the linked list pointed to by <code>=
res</code>, and then we can iterate over the list and print stuff out or do=
 whatever.</p>
<p>(There=E2=80=99s a little bit of ugliness there where we have to dig int=
o the different types of <code>struct sockaddr</code>s depending on the IP =
version. Sorry about that! I=E2=80=99m not sure of a better way around it.)=
</p>
<p>Sample run! Everyone loves screenshots:</p>
<pre><code>    $ showip www.example.net
    IP addresses for www.example.net:
   =20
      IPv4: 192.0.2.88
   =20
    $ showip ipv6.example.com
    IP addresses for ipv6.example.com:
   =20
      IPv4: 192.0.2.101
      IPv6: 2001:db8:8c00:22::171</code></pre>
<p>Now that we have that under control, we=E2=80=99ll use the results we ge=
t from <code>getaddrinfo()</code> to pass to other socket functions and, at=
 long last, get our network connection established! Keep reading!</p>
<h2 data-number=3D"5.2" id=3D"socket"><span class=3D"header-section-number"=
>5.2</span> <code>socket()</code>=E2=80=94Get the File Descriptor!</h2>
<p>I guess I can put it off no longer=E2=80=94I have to talk about the  <co=
de>socket()</code> system call. Here=E2=80=99s the breakdown:</p>
<div class=3D"sourceCode" id=3D"cb24"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb24-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb24-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></span=
>
<span id=3D"cb24-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb24-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb24-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb24-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb24-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb24-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> so=
cket(<span class=3D"dt">int</span> domain, <span class=3D"dt">int</span> ty=
pe, <span class=3D"dt">int</span> protocol); </span></code></pre></div>
<p>But what are these arguments? They allow you to say what kind of socket =
you want (IPv4 or IPv6, stream or datagram, and TCP or UDP).</p>
<p>It used to be people would hardcode these values, and you can absolutely=
 still do that. (<code>domain</code> is <code>PF_INET</code> or <code>PF_IN=
ET6</code>, <code>type</code> is <code>SOCK_STREAM</code> or <code>SOCK_DGR=
AM</code>, and <code>protocol</code> can be set to <code>0</code> to choose=
 the proper protocol for the given <code>type</code>. Or you can call <code=
>getprotobyname()</code> to look up the protocol you want, =E2=80=9Ctcp=E2=
=80=9D or =E2=80=9Cudp=E2=80=9D.)</p>
<p>(This <code>PF_INET</code> thing is a close relative of the  <code>AF_IN=
ET</code> that you can use when initializing the <code>sin_family</code> fi=
eld in your <code>struct sockaddr_in</code>. In fact, they=E2=80=99re so cl=
osely related that they actually have the same value, and many programmers =
will call <code>socket()</code> and pass <code>AF_INET</code> as the first =
argument instead of <code>PF_INET</code>. Now, get some milk and cookies, b=
ecause it=E2=80=99s time for a story. Once upon a time, a long time ago, it=
 was thought that maybe an address family (what the =E2=80=9CAF=E2=80=9D in=
 =E2=80=9C<code>AF_INET</code>=E2=80=9D stands for) might support several p=
rotocols that were referred to by their protocol family (what the =E2=80=9C=
PF=E2=80=9D in =E2=80=9C<code>PF_INET</code>=E2=80=9D stands for). That did=
n=E2=80=99t happen. And they all lived happily ever after, The End. So the =
most correct thing to do is to use <code>AF_INET</code> in your <code>struc=
t sockaddr_in</code> and <code>PF_INET</code> in your call to <code>socket(=
)</code>.)</p>
<p>Anyway, enough of that. What you really want to do is use the values fro=
m the results of the call to <code>getaddrinfo()</code>, and feed them into=
 <code>socket()</code> directly like this:</p>
<div class=3D"sourceCode" id=3D"cb25"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb25-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb25-1"></a><span class=3D"dt">int</span=
> s;</span>
<span id=3D"cb25-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-2"></=
a><span class=3D"kw">struct</span> addrinfo hints, *res;</span>
<span id=3D"cb25-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-3"></=
a></span>
<span id=3D"cb25-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-4"></=
a><span class=3D"co">// do the lookup</span></span>
<span id=3D"cb25-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-5"></=
a><span class=3D"co">// [pretend we already filled out the "hints" struct]<=
/span></span>
<span id=3D"cb25-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-6"></=
a>getaddrinfo(<span class=3D"st">"www.example.com"</span>, <span class=3D"s=
t">"http"</span>, &amp;hints, &amp;res);</span>
<span id=3D"cb25-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-7"></=
a></span>
<span id=3D"cb25-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-8"></=
a><span class=3D"co">// again, you should do error-checking on getaddrinfo(=
), and walk</span></span>
<span id=3D"cb25-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-9"></=
a><span class=3D"co">// the "res" linked list looking for valid entries ins=
tead of just</span></span>
<span id=3D"cb25-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-10">=
</a><span class=3D"co">// assuming the first one is good (like many of thes=
e examples do).</span></span>
<span id=3D"cb25-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-11">=
</a><span class=3D"co">// See the section on client/server for real example=
s.</span></span>
<span id=3D"cb25-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-12">=
</a></span>
<span id=3D"cb25-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb25-13">=
</a>s =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_protoco=
l);</span></code></pre></div>
<p><code>socket()</code> simply returns to you a <em>socket descriptor</em>=
 that you can use in later system calls, or <code>-1</code> on error. The g=
lobal variable <code>errno</code> is set to the error=E2=80=99s value (see =
the <a href=3D"https://beej.us/guide/bgnet/html/#errnoman"><code>errno</cod=
e></a> man page for more details, and a quick note on using <code>errno</co=
de> in multithreaded programs).</p>
<p>Fine, fine, fine, but what good is this socket? The answer is that it=E2=
=80=99s really no good by itself, and you need to read on and make more sys=
tem calls for it to make any sense.</p>
<h2 data-number=3D"5.3" id=3D"bind"><span class=3D"header-section-number">5=
.3</span> <code>bind()</code>=E2=80=94What port am I on?</h2>
<p> Once you have a socket, you might have to associate that socket with a =
 port on your local machine. (This is commonly done if you=E2=80=99re going=
 to  <code>listen()</code> for incoming connections on a specific port=E2=
=80=94multiplayer network games do this when they tell you to =E2=80=9Cconn=
ect to 192.168.5.10 port 3490=E2=80=9D.) The port number is used by the ker=
nel to match an incoming packet to a certain process=E2=80=99s socket descr=
iptor. If you=E2=80=99re going to only be doing a  <code>connect()</code> (=
because you=E2=80=99re the client, not the server), this is probably be unn=
ecessary. Read it anyway, just for kicks.</p>
<p>Here is the synopsis for the <code>bind()</code> system call:</p>
<div class=3D"sourceCode" id=3D"cb26"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb26-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb26-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></span=
>
<span id=3D"cb26-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb26-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb26-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb26-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb26-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb26-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> bi=
nd(<span class=3D"dt">int</span> sockfd, <span class=3D"kw">struct</span> s=
ockaddr *my_addr, <span class=3D"dt">int</span> addrlen);</span></code></pr=
e></div>
<p><code>sockfd</code> is the socket file descriptor returned by <code>sock=
et()</code>. <code>my_addr</code> is a pointer to a <code>struct sockaddr</=
code> that contains information about your address, namely, port and  IP ad=
dress. <code>addrlen</code> is the length in bytes of that address.</p>
<p>Whew. That=E2=80=99s a bit to absorb in one chunk. Let=E2=80=99s have an=
 example that binds the socket to the host the program is running on, port =
3490:</p>
<div class=3D"sourceCode" id=3D"cb27"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb27-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb27-1"></a><span class=3D"kw">struct</s=
pan> addrinfo hints, *res;</span>
<span id=3D"cb27-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-2"></=
a><span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb27-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-3"></=
a></span>
<span id=3D"cb27-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-4"></=
a><span class=3D"co">// first, load up address structs with getaddrinfo():<=
/span></span>
<span id=3D"cb27-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-5"></=
a></span>
<span id=3D"cb27-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-6"></=
a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">sizeof=
</span> hints);</span>
<span id=3D"cb27-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-7"></=
a>hints.ai_family =3D AF_UNSPEC;  <span class=3D"co">// use IPv4 or IPv6, w=
hichever</span></span>
<span id=3D"cb27-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-8"></=
a>hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb27-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-9"></=
a>hints.ai_flags =3D AI_PASSIVE;     <span class=3D"co">// fill in my IP fo=
r me</span></span>
<span id=3D"cb27-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-10">=
</a></span>
<span id=3D"cb27-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-11">=
</a>getaddrinfo(NULL, <span class=3D"st">"3490"</span>, &amp;hints, &amp;re=
s);</span>
<span id=3D"cb27-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-12">=
</a></span>
<span id=3D"cb27-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-13">=
</a><span class=3D"co">// make a socket:</span></span>
<span id=3D"cb27-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-14">=
</a></span>
<span id=3D"cb27-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-15">=
</a>sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_pr=
otocol);</span>
<span id=3D"cb27-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-16">=
</a></span>
<span id=3D"cb27-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-17">=
</a><span class=3D"co">// bind it to the port we passed in to getaddrinfo()=
:</span></span>
<span id=3D"cb27-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-18">=
</a></span>
<span id=3D"cb27-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb27-19">=
</a>bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span></code></pre><=
/div>
<p>By using the <code>AI_PASSIVE</code> flag, I=E2=80=99m telling the progr=
am to bind to the IP of the host it=E2=80=99s running on. If you want to bi=
nd to a specific local IP address, drop the <code>AI_PASSIVE</code> and put=
 an IP address in for the first argument to <code>getaddrinfo()</code>.</p>
<p><code>bind()</code> also returns <code>-1</code> on error and sets <code=
>errno</code> to the error=E2=80=99s value.</p>
<p>Lots of old code manually packs the <code>struct sockaddr_in</code> befo=
re calling <code>bind()</code>. Obviously this is IPv4-specific, but there=
=E2=80=99s really nothing stopping you from doing the same thing with IPv6,=
 except that using <code>getaddrinfo()</code> is going to be easier, genera=
lly. Anyway, the old code looks something like this:</p>
<div class=3D"sourceCode" id=3D"cb28"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb28-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb28-1"></a><span class=3D"co">// !!! TH=
IS IS THE OLD WAY !!!</span></span>
<span id=3D"cb28-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-2"></=
a></span>
<span id=3D"cb28-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-3"></=
a><span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb28-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-4"></=
a><span class=3D"kw">struct</span> sockaddr_in my_addr;</span>
<span id=3D"cb28-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-5"></=
a></span>
<span id=3D"cb28-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-6"></=
a>sockfd =3D socket(PF_INET, SOCK_STREAM, <span class=3D"dv">0</span>);</sp=
an>
<span id=3D"cb28-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-7"></=
a></span>
<span id=3D"cb28-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-8"></=
a>my_addr.sin_family =3D AF_INET;</span>
<span id=3D"cb28-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-9"></=
a>my_addr.sin_port =3D htons(MYPORT);     <span class=3D"co">// short, netw=
ork byte order</span></span>
<span id=3D"cb28-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-10">=
</a>my_addr.sin_addr.s_addr =3D inet_addr(<span class=3D"st">"10.12.110.57"=
</span>);</span>
<span id=3D"cb28-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-11">=
</a>memset(my_addr.sin_zero, <span class=3D"ch">'\0'</span>, <span class=3D=
"kw">sizeof</span> my_addr.sin_zero);</span>
<span id=3D"cb28-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-12">=
</a></span>
<span id=3D"cb28-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb28-13">=
</a>bind(sockfd, (<span class=3D"kw">struct</span> sockaddr *)&amp;my_addr,=
 <span class=3D"kw">sizeof</span> my_addr);</span></code></pre></div>
<p>In the above code, you could also assign <code>INADDR_ANY</code> to the =
<code>s_addr</code> field if you wanted to bind to your local IP address (l=
ike the <code>AI_PASSIVE</code> flag, above). The IPv6 version of <code>INA=
DDR_ANY</code> is a global variable <code>in6addr_any</code> that is assign=
ed into the <code>sin6_addr</code> field of your <code>struct sockaddr_in6<=
/code>. (There is also a macro <code>IN6ADDR_ANY_INIT</code> that you can u=
se in a variable initializer.)</p>
<p>Another thing to watch out for when calling <code>bind()</code>: don=E2=
=80=99t go underboard with your port numbers.  All ports below 1024 are RES=
ERVED (unless you=E2=80=99re the superuser)! You can have any port number a=
bove that, right up to 65535 (provided they aren=E2=80=99t already being us=
ed by another program).</p>
<p>Sometimes, you might notice, you try to rerun a server and <code>bind()<=
/code> fails, claiming  =E2=80=9CAddress already in use.=E2=80=9D What does=
 that mean? Well, a little bit of a socket that was connected is still hang=
ing around in the kernel, and it=E2=80=99s hogging the port. You can either=
 wait for it to clear (a minute or so), or add code to your program allowin=
g it to reuse the port, like this:</p>
<p> </p>
<div class=3D"sourceCode" id=3D"cb29"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb29-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb29-1"></a><span class=3D"dt">int</span=
> yes=3D<span class=3D"dv">1</span>;</span>
<span id=3D"cb29-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb29-2"></=
a><span class=3D"co">//char yes=3D'1'; // Solaris people use this</span></s=
pan>
<span id=3D"cb29-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb29-3"></=
a></span>
<span id=3D"cb29-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb29-4"></=
a><span class=3D"co">// lose the pesky "Address already in use" error messa=
ge</span></span>
<span id=3D"cb29-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb29-5"></=
a><span class=3D"cf">if</span> (setsockopt(listener,SOL_SOCKET,SO_REUSEADDR=
,&amp;yes,<span class=3D"kw">sizeof</span> yes) =3D=3D -<span class=3D"dv">=
1</span>) {</span>
<span id=3D"cb29-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb29-6"></=
a>    perror(<span class=3D"st">"setsockopt"</span>);</span>
<span id=3D"cb29-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb29-7"></=
a>    exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb29-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb29-8"></=
a>} </span></code></pre></div>
<p> One small extra final note about <code>bind()</code>: there are times w=
hen you won=E2=80=99t absolutely have to call it. If you are  <code>connect=
()</code>ing to a remote machine and you don=E2=80=99t care what your local=
 port is (as is the case with <code>telnet</code> where you only care about=
 the remote port), you can simply call <code>connect()</code>, it=E2=80=99l=
l check to see if the socket is unbound, and will <code>bind()</code> it to=
 an unused local port if necessary.</p>
<h2 data-number=3D"5.4" id=3D"connect"><span class=3D"header-section-number=
">5.4</span> <code>connect()</code>=E2=80=94Hey, you!</h2>
<p> Let=E2=80=99s just pretend for a few minutes that you=E2=80=99re a teln=
et application. Your user commands you (just like in the movie  <em>TRON</e=
m>) to get a socket file descriptor. You comply and call <code>socket()</co=
de>. Next, the user tells you to connect to =E2=80=9C<code>10.12.110.57</co=
de>=E2=80=9D on port =E2=80=9C<code>23</code>=E2=80=9D (the standard telnet=
 port). Yow! What do you do now?</p>
<p>Lucky for you, program, you=E2=80=99re now perusing the section on <code=
>connect()</code>=E2=80=94how to connect to a remote host. So read furiousl=
y onward! No time to lose!</p>
<p>The <code>connect()</code> call is as follows:</p>
<div class=3D"sourceCode" id=3D"cb30"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb30-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb30-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></span=
>
<span id=3D"cb30-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb30-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb30-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb30-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb30-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb30-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> co=
nnect(<span class=3D"dt">int</span> sockfd, <span class=3D"kw">struct</span=
> sockaddr *serv_addr, <span class=3D"dt">int</span> addrlen); </span></cod=
e></pre></div>
<p><code>sockfd</code> is our friendly neighborhood socket file descriptor,=
 as returned by the <code>socket()</code> call, <code>serv_addr</code> is a=
 <code>struct sockaddr</code> containing the destination port and IP addres=
s, and <code>addrlen</code> is the length in bytes of the server address st=
ructure.</p>
<p>All of this information can be gleaned from the results of the <code>get=
addrinfo()</code> call, which rocks.</p>
<p>Is this starting to make more sense? I can=E2=80=99t hear you from here,=
 so I=E2=80=99ll just have to hope that it is. Let=E2=80=99s have an exampl=
e where we make a socket connection to =E2=80=9C<code>www.example.com</code=
>=E2=80=9D, port <code>3490</code>:</p>
<div class=3D"sourceCode" id=3D"cb31"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb31-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb31-1"></a><span class=3D"kw">struct</s=
pan> addrinfo hints, *res;</span>
<span id=3D"cb31-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-2"></=
a><span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb31-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-3"></=
a></span>
<span id=3D"cb31-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-4"></=
a><span class=3D"co">// first, load up address structs with getaddrinfo():<=
/span></span>
<span id=3D"cb31-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-5"></=
a></span>
<span id=3D"cb31-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-6"></=
a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">sizeof=
</span> hints);</span>
<span id=3D"cb31-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-7"></=
a>hints.ai_family =3D AF_UNSPEC;</span>
<span id=3D"cb31-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-8"></=
a>hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb31-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-9"></=
a></span>
<span id=3D"cb31-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-10">=
</a>getaddrinfo(<span class=3D"st">"www.example.com"</span>, <span class=3D=
"st">"3490"</span>, &amp;hints, &amp;res);</span>
<span id=3D"cb31-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-11">=
</a></span>
<span id=3D"cb31-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-12">=
</a><span class=3D"co">// make a socket:</span></span>
<span id=3D"cb31-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-13">=
</a></span>
<span id=3D"cb31-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-14">=
</a>sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_pr=
otocol);</span>
<span id=3D"cb31-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-15">=
</a></span>
<span id=3D"cb31-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-16">=
</a><span class=3D"co">// connect!</span></span>
<span id=3D"cb31-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-17">=
</a></span>
<span id=3D"cb31-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb31-18">=
</a>connect(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span></code></pr=
e></div>
<p>Again, old-school programs filled out their own <code>struct sockaddr_in=
</code>s to pass to <code>connect()</code>. You can do that if you want to.=
 See the similar note in the <a href=3D"https://beej.us/guide/bgnet/html/#b=
ind"><code>bind()</code> section</a>, above.</p>
<p>Be sure to check the return value from <code>connect()</code>=E2=80=94it=
=E2=80=99ll return <code>-1</code> on error and set the variable <code>errn=
o</code>.</p>
<!-- latex index here so we can get the subindex entry after the tt -->
<p></p>
<p>Also, notice that we didn=E2=80=99t call <code>bind()</code>. Basically,=
 we don=E2=80=99t care about our local port number; we only care where we=
=E2=80=99re going (the remote port). The kernel will choose a local port fo=
r us, and the site we connect to will automatically get this information fr=
om us. No worries.</p>
<h2 data-number=3D"5.5" id=3D"listen"><span class=3D"header-section-number"=
>5.5</span> <code>listen()</code>=E2=80=94Will somebody please call me?</h2=
>
<p> Ok, time for a change of pace. What if you don=E2=80=99t want to connec=
t to a remote host. Say, just for kicks, that you want to wait for incoming=
 connections and handle them in some way. The process is two step: first yo=
u <code>listen()</code>, then you  <code>accept()</code> (see below).</p>
<p>The <code>listen()</code> call is fairly simple, but requires a bit of e=
xplanation:</p>
<div class=3D"sourceCode" id=3D"cb32"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb32-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb32-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"dt">int</span> listen(<span class=3D"dt">int</span> sockfd, <span class=
=3D"dt">int</span> backlog); </span></code></pre></div>
<p><code>sockfd</code> is the usual socket file descriptor from the <code>s=
ocket()</code> system call.  <code>backlog</code> is the number of connecti=
ons allowed on the incoming queue. What does that mean? Well, incoming conn=
ections are going to wait in this queue until you <code>accept()</code> the=
m (see below) and this is the limit on how many can queue up. Most systems =
silently limit this number to about 20; you can probably get away with sett=
ing it to <code>5</code> or <code>10</code>.</p>
<p>Again, as per usual, <code>listen()</code> returns <code>-1</code> and s=
ets <code>errno</code> on error.</p>
<p>Well, as you can probably imagine, we need to call <code>bind()</code> b=
efore we call <code>listen()</code> so that the server is running on a spec=
ific port. (You have to be able to tell your buddies which port to connect =
to!) So if you=E2=80=99re going to be listening for incoming connections, t=
he sequence of system calls you=E2=80=99ll make is:</p>
<div class=3D"sourceCode" id=3D"cb33"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb33-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb33-1"></a>getaddrinfo();</span>
<span id=3D"cb33-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb33-2"></=
a>socket();</span>
<span id=3D"cb33-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb33-3"></=
a>bind();</span>
<span id=3D"cb33-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb33-4"></=
a>listen();</span>
<span id=3D"cb33-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb33-5"></=
a><span class=3D"co">/* accept() goes here */</span> </span></code></pre></=
div>
<p>I=E2=80=99ll just leave that in the place of sample code, since it=E2=80=
=99s fairly self-explanatory. (The code in the <code>accept()</code> sectio=
n, below, is more complete.) The really tricky part of this whole sha-bang =
is the call to <code>accept()</code>.</p>
<h2 data-number=3D"5.6" id=3D"acceptthank-you-for-calling-port-3490."><span=
 class=3D"header-section-number">5.6</span> <code>accept()</code>=E2=80=94=
=E2=80=9CThank you for calling port 3490.=E2=80=9D</h2>
<p> Get ready=E2=80=94the <code>accept()</code> call is kinda weird! What=
=E2=80=99s going to happen is this: someone far far away will try to <code>=
connect()</code> to your machine on a port that you are <code>listen()</cod=
e>ing on. Their connection will be queued up waiting to be <code>accept()</=
code>ed.&nbsp;You call <code>accept()</code> and you tell it to get the pen=
ding connection. It=E2=80=99ll return to you a <em>brand new socket file de=
scriptor</em> to use for this single connection! That=E2=80=99s right, sudd=
enly you have <em>two socket file descriptors</em> for the price of one! Th=
e original one is still listening for more new connections, and the newly c=
reated one is finally ready to <code>send()</code> and <code>recv()</code>.=
 We=E2=80=99re there!</p>
<p>The call is as follows:</p>
<div class=3D"sourceCode" id=3D"cb34"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb34-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb34-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></span=
>
<span id=3D"cb34-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb34-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb34-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb34-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb34-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb34-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> ac=
cept(<span class=3D"dt">int</span> sockfd, <span class=3D"kw">struct</span>=
 sockaddr *addr, socklen_t *addrlen); </span></code></pre></div>
<p><code>sockfd</code> is the <code>listen()</code>ing socket descriptor. E=
asy enough. <code>addr</code> will usually be a pointer to a local <code>st=
ruct sockaddr_storage</code>. This is where the information about the incom=
ing connection will go (and with it you can determine which host is calling=
 you from which port). <code>addrlen</code> is a local integer variable tha=
t should be set to <code>sizeof(struct sockaddr_storage)</code> before its =
address is passed to <code>accept()</code>. <code>accept()</code> will not =
put more than that many bytes into <code>addr</code>. If it puts fewer in, =
it=E2=80=99ll change the value of <code>addrlen</code> to reflect that.</p>
<p>Guess what? <code>accept()</code> returns <code>-1</code> and sets <code=
>errno</code> if an error occurs. Betcha didn=E2=80=99t figure that.</p>
<p>Like before, this is a bunch to absorb in one chunk, so here=E2=80=99s a=
 sample code fragment for your perusal:</p>
<div class=3D"sourceCode" id=3D"cb35"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb35-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb35-1"></a><span class=3D"pp">#include =
</span><span class=3D"im">&lt;string.h&gt;</span></span>
<span id=3D"cb35-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-2"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;=
</span></span>
<span id=3D"cb35-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-3"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt=
;</span></span>
<span id=3D"cb35-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-4"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</sp=
an></span>
<span id=3D"cb35-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-5"></=
a></span>
<span id=3D"cb35-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-6"></=
a><span class=3D"pp">#define MYPORT "3490"  </span><span class=3D"co">// th=
e port users will be connecting to</span></span>
<span id=3D"cb35-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-7"></=
a><span class=3D"pp">#define BACKLOG 10     </span><span class=3D"co">// ho=
w many pending connections queue will hold</span></span>
<span id=3D"cb35-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-8"></=
a></span>
<span id=3D"cb35-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-9"></=
a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</span>
<span id=3D"cb35-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-10">=
</a>{</span>
<span id=3D"cb35-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-11">=
</a>    <span class=3D"kw">struct</span> sockaddr_storage their_addr;</span=
>
<span id=3D"cb35-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-12">=
</a>    socklen_t addr_size;</span>
<span id=3D"cb35-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-13">=
</a>    <span class=3D"kw">struct</span> addrinfo hints, *res;</span>
<span id=3D"cb35-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-14">=
</a>    <span class=3D"dt">int</span> sockfd, new_fd;</span>
<span id=3D"cb35-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-15">=
</a></span>
<span id=3D"cb35-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-16">=
</a>    <span class=3D"co">// !! don't forget your error checking for these=
 calls !!</span></span>
<span id=3D"cb35-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-17">=
</a></span>
<span id=3D"cb35-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-18">=
</a>    <span class=3D"co">// first, load up address structs with getaddrin=
fo():</span></span>
<span id=3D"cb35-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-19">=
</a></span>
<span id=3D"cb35-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-20">=
</a>    memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">=
sizeof</span> hints);</span>
<span id=3D"cb35-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-21">=
</a>    hints.ai_family =3D AF_UNSPEC;  <span class=3D"co">// use IPv4 or I=
Pv6, whichever</span></span>
<span id=3D"cb35-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-22">=
</a>    hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb35-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-23">=
</a>    hints.ai_flags =3D AI_PASSIVE;     <span class=3D"co">// fill in my=
 IP for me</span></span>
<span id=3D"cb35-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-24">=
</a></span>
<span id=3D"cb35-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-25">=
</a>    getaddrinfo(NULL, MYPORT, &amp;hints, &amp;res);</span>
<span id=3D"cb35-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-26">=
</a></span>
<span id=3D"cb35-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-27">=
</a>    <span class=3D"co">// make a socket, bind it, and listen on it:</sp=
an></span>
<span id=3D"cb35-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-28">=
</a></span>
<span id=3D"cb35-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-29">=
</a>    sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;a=
i_protocol);</span>
<span id=3D"cb35-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-30">=
</a>    bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span>
<span id=3D"cb35-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-31">=
</a>    listen(sockfd, BACKLOG);</span>
<span id=3D"cb35-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-32">=
</a></span>
<span id=3D"cb35-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-33">=
</a>    <span class=3D"co">// now accept an incoming connection:</span></sp=
an>
<span id=3D"cb35-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-34">=
</a></span>
<span id=3D"cb35-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-35">=
</a>    addr_size =3D <span class=3D"kw">sizeof</span> their_addr;</span>
<span id=3D"cb35-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-36">=
</a>    new_fd =3D accept(sockfd, (<span class=3D"kw">struct</span> sockadd=
r *)&amp;their_addr, &amp;addr_size);</span>
<span id=3D"cb35-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-37">=
</a></span>
<span id=3D"cb35-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-38">=
</a>    <span class=3D"co">// ready to communicate on socket descriptor new=
_fd!</span></span>
<span id=3D"cb35-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-39">=
</a>    .</span>
<span id=3D"cb35-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-40">=
</a>    .</span>
<span id=3D"cb35-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb35-41">=
</a>    .</span></code></pre></div>
<p>Again, note that we will use the socket descriptor <code>new_fd</code> f=
or all <code>send()</code> and <code>recv()</code> calls. If you=E2=80=99re=
 only getting one single connection ever, you can <code>close()</code> the =
listening <code>sockfd</code> in order to prevent more incoming connections=
 on the same port, if you so desire.</p>
<h2 data-number=3D"5.7" id=3D"sendrecv"><span class=3D"header-section-numbe=
r">5.7</span> <code>send()</code> and <code>recv()</code>=E2=80=94Talk to m=
e, baby!</h2>
<p>These two functions are for communicating over stream sockets or connect=
ed datagram sockets. If you want to use regular unconnected datagram socket=
s, you=E2=80=99ll need to see the section on <a href=3D"https://beej.us/gui=
de/bgnet/html/#sendtorecv"><code>sendto()</code> and <code>recvfrom()</code=
></a>, below.</p>
<p> The <code>send()</code> call:</p>
<div class=3D"sourceCode" id=3D"cb36"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb36-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb36-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"dt">int</span> send(<span class=3D"dt">int</span> sockfd, <span class=
=3D"dt">const</span> <span class=3D"dt">void</span> *msg, <span class=3D"dt=
">int</span> len, <span class=3D"dt">int</span> flags); </span></code></pre=
></div>
<p><code>sockfd</code> is the socket descriptor you want to send data to (w=
hether it=E2=80=99s the one returned by <code>socket()</code> or the one yo=
u got with <code>accept()</code>). <code>msg</code> is a pointer to the dat=
a you want to send, and <code>len</code> is the length of that data in byte=
s. Just set <code>flags</code> to <code>0</code>. (See the <code>send()</co=
de> man page for more information concerning flags.)</p>
<p>Some sample code might be:</p>
<div class=3D"sourceCode" id=3D"cb37"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb37-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb37-1"></a><span class=3D"dt">char</spa=
n> *msg =3D <span class=3D"st">"Beej was here!"</span>;</span>
<span id=3D"cb37-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb37-2"></=
a><span class=3D"dt">int</span> len, bytes_sent;</span>
<span id=3D"cb37-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb37-3"></=
a>.</span>
<span id=3D"cb37-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb37-4"></=
a>.</span>
<span id=3D"cb37-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb37-5"></=
a>.</span>
<span id=3D"cb37-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb37-6"></=
a>len =3D strlen(msg);</span>
<span id=3D"cb37-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb37-7"></=
a>bytes_sent =3D send(sockfd, msg, len, <span class=3D"dv">0</span>);</span=
>
<span id=3D"cb37-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb37-8"></=
a>.</span>
<span id=3D"cb37-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb37-9"></=
a>.</span>
<span id=3D"cb37-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb37-10">=
</a>. </span></code></pre></div>
<p><code>send()</code> returns the number of bytes actually sent out=E2=80=
=94<em>this might be less than the number you told it to send!</em> See, so=
metimes you tell it to send a whole gob of data and it just can=E2=80=99t h=
andle it. It=E2=80=99ll fire off as much of the data as it can, and trust y=
ou to send the rest later. Remember, if the value returned by <code>send()<=
/code> doesn=E2=80=99t match the value in <code>len</code>, it=E2=80=99s up=
 to you to send the rest of the string. The good news is this: if the packe=
t is small (less than 1K or so) it will <em>probably</em> manage to send th=
e whole thing all in one go. Again, <code>-1</code> is returned on error, a=
nd <code>errno</code> is set to the error number.</p>
<p> The <code>recv()</code> call is similar in many respects:</p>
<div class=3D"sourceCode" id=3D"cb38"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb38-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb38-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"dt">int</span> recv(<span class=3D"dt">int</span> sockfd, <span class=
=3D"dt">void</span> *buf, <span class=3D"dt">int</span> len, <span class=3D=
"dt">int</span> flags);</span></code></pre></div>
<p><code>sockfd</code> is the socket descriptor to read from, <code>buf</co=
de> is the buffer to read the information into, <code>len</code> is the max=
imum length of the buffer, and <code>flags</code> can again be set to <code=
>0</code>. (See the <code>recv()</code> man page for flag information.)</p>
<p><code>recv()</code> returns the number of bytes actually read into the b=
uffer, or <code>-1</code> on error (with <code>errno</code> set, accordingl=
y).</p>
<p>Wait! <code>recv()</code> can return <code>0</code>. This can mean only =
one thing: the remote side has closed the connection on you! A return value=
 of <code>0</code> is <code>recv()</code>=E2=80=99s way of letting you know=
 this has occurred.</p>
<p>There, that was easy, wasn=E2=80=99t it? You can now pass data back and =
forth on stream sockets! Whee! You=E2=80=99re a Unix Network Programmer!</p=
>
<h2 data-number=3D"5.8" id=3D"sendtorecv"><span class=3D"header-section-num=
ber">5.8</span> <code>sendto()</code> and <code>recvfrom()</code>=E2=80=94T=
alk to me, DGRAM-style</h2>
<p> =E2=80=9CThis is all fine and dandy,=E2=80=9D I hear you saying, =E2=80=
=9Cbut where does this leave me with unconnected datagram sockets?=E2=80=9D=
 No problemo, amigo. We have just the thing.</p>
<p>Since datagram sockets aren=E2=80=99t connected to a remote host, guess =
which piece of information we need to give before we send a packet? That=E2=
=80=99s right! The destination address! Here=E2=80=99s the scoop:</p>
<div class=3D"sourceCode" id=3D"cb39"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb39-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb39-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"dt">int</span> sendto(<span class=3D"dt">int</span> sockfd, <span class=
=3D"dt">const</span> <span class=3D"dt">void</span> *msg, <span class=3D"dt=
">int</span> len, <span class=3D"dt">unsigned</span> <span class=3D"dt">int=
</span> flags,</span>
<span id=3D"cb39-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb39-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>               <span class=3D"dt">co=
nst</span> <span class=3D"kw">struct</span> sockaddr *to, socklen_t tolen);=
 </span></code></pre></div>
<p>As you can see, this call is basically the same as the call to <code>sen=
d()</code> with the addition of two other pieces of information. <code>to</=
code> is a pointer to a <code>struct sockaddr</code> (which will probably b=
e another <code>struct sockaddr_in</code> or <code>struct sockaddr_in6</cod=
e> or <code>struct sockaddr_storage</code> that you cast at the last minute=
) which contains the destination  IP address and  port. <code>tolen</code>,=
 an <code>int</code> deep-down, can simply be set to <code>sizeof *to</code=
> or <code>sizeof(struct sockaddr_storage)</code>.</p>
<p>To get your hands on the destination address structure, you=E2=80=99ll p=
robably either get it from <code>getaddrinfo()</code>, or from <code>recvfr=
om()</code>, below, or you=E2=80=99ll fill it out by hand.</p>
<p>Just like with <code>send()</code>, <code>sendto()</code> returns the nu=
mber of bytes actually sent (which, again, might be less than the number of=
 bytes you told it to send!), or <code>-1</code> on error.</p>
<p>Equally similar are <code>recv()</code> and  <code>recvfrom()</code>. Th=
e synopsis of <code>recvfrom()</code> is:</p>
<div class=3D"sourceCode" id=3D"cb40"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb40-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb40-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"dt">int</span> recvfrom(<span class=3D"dt">int</span> sockfd, <span cla=
ss=3D"dt">void</span> *buf, <span class=3D"dt">int</span> len, <span class=
=3D"dt">unsigned</span> <span class=3D"dt">int</span> flags,</span>
<span id=3D"cb40-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb40-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>                 <span class=3D"kw">=
struct</span> sockaddr *from, <span class=3D"dt">int</span> *fromlen); </sp=
an></code></pre></div>
<p>Again, this is just like <code>recv()</code> with the addition of a coup=
le fields. <code>from</code> is a pointer to a local  <code>struct sockaddr=
_storage</code> that will be filled with the IP address and port of the ori=
ginating machine. <code>fromlen</code> is a pointer to a local <code>int</c=
ode> that should be initialized to <code>sizeof *from</code> or <code>sizeo=
f(struct sockaddr_storage)</code>. When the function returns, <code>fromlen=
</code> will contain the length of the address actually stored in <code>fro=
m</code>.</p>
<p><code>recvfrom()</code> returns the number of bytes received, or <code>-=
1</code> on error (with <code>errno</code> set accordingly).</p>
<p>So, here=E2=80=99s a question: why do we use <code>struct sockaddr_stora=
ge</code> as the socket type? Why not <code>struct sockaddr_in</code>? Beca=
use, you see, we want to not tie ourselves down to IPv4 or IPv6. So we use =
the generic <code>struct sockaddr_storage</code> which we know will be big =
enough for either.</p>
<p>(So=E2=80=A6 here=E2=80=99s another question: why isn=E2=80=99t <code>st=
ruct sockaddr</code> itself big enough for any address? We even cast the ge=
neral-purpose <code>struct sockaddr_storage</code> to the general-purpose <=
code>struct sockaddr</code>! Seems extraneous and redundant, huh. The answe=
r is, it just isn=E2=80=99t big enough, and I=E2=80=99d guess that changing=
 it at this point would be Problematic. So they made a new one.)</p>
<p>Remember, if you  <code>connect()</code> a datagram socket, you can then=
 simply use <code>send()</code> and <code>recv()</code> for all your transa=
ctions. The socket itself is still a datagram socket and the packets still =
use UDP, but the socket interface will automatically add the destination an=
d source information for you.</p>
<h2 data-number=3D"5.9" id=3D"close-and-shutdownget-outta-my-face"><span cl=
ass=3D"header-section-number">5.9</span> <code>close()</code> and <code>shu=
tdown()</code>=E2=80=94Get outta my face!</h2>
<p>Whew! You=E2=80=99ve been <code>send()</code>ing and <code>recv()</code>=
ing data all day long, and you=E2=80=99ve had it. You=E2=80=99re ready to c=
lose the connection on your socket descriptor. This is easy. You can just u=
se the regular Unix file descriptor  <code>close()</code> function:</p>
<div class=3D"sourceCode" id=3D"cb41"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb41-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb41-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    close(sockfd=
); </span></code></pre></div>
<p>This will prevent any more reads and writes to the socket. Anyone attemp=
ting to read or write the socket on the remote end will receive an error.</=
p>
<p>Just in case you want a little more control over how the socket closes, =
you can use the  <code>shutdown()</code> function. It allows you to cut off=
 communication in a certain direction, or both ways (just like <code>close(=
)</code> does). Synopsis:</p>
<div class=3D"sourceCode" id=3D"cb42"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb42-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb42-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"dt">int</span> shutdown(<span class=3D"dt">int</span> sockfd, <span cla=
ss=3D"dt">int</span> how); </span></code></pre></div>
<p><code>sockfd</code> is the socket file descriptor you want to shutdown, =
and <code>how</code> is one of the following:</p>
<table>
<thead>
<tr class=3D"header">
<th style=3D"text-align: center;"><code>how</code></th>
<th>Effect</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td style=3D"text-align: center;"><code>0</code></td>
<td>Further receives are disallowed</td>
</tr>
<tr class=3D"even">
<td style=3D"text-align: center;"><code>1</code></td>
<td>Further sends are disallowed</td>
</tr>
<tr class=3D"odd">
<td style=3D"text-align: center;"><code>2</code></td>
<td>Further sends and receives are disallowed (like <code>close()</code>)</=
td>
</tr>
</tbody>
</table>
<p><code>shutdown()</code> returns <code>0</code> on success, and <code>-1<=
/code> on error (with <code>errno</code> set accordingly).</p>
<p>If you deign to use <code>shutdown()</code> on unconnected datagram sock=
ets, it will simply make the socket unavailable for further <code>send()</c=
ode> and <code>recv()</code> calls (remember that you can use these if you =
<code>connect()</code> your datagram socket).</p>
<p>It=E2=80=99s important to note that <code>shutdown()</code> doesn=E2=80=
=99t actually close the file descriptor=E2=80=94it just changes its usabili=
ty. To free a socket descriptor, you need to use <code>close()</code>.</p>
<p>Nothing to it.</p>
<p>(Except to remember that if you=E2=80=99re using  Windows and  Winsock t=
hat you should call  <code>closesocket()</code> instead of <code>close()</c=
ode>.)</p>
<h2 data-number=3D"5.10" id=3D"getpeernamewho-are-you"><span class=3D"heade=
r-section-number">5.10</span> <code>getpeername()</code>=E2=80=94Who are yo=
u?</h2>
<p> This function is so easy.</p>
<p>It=E2=80=99s so easy, I almost didn=E2=80=99t give it its own section. B=
ut here it is anyway.</p>
<p>The function <code>getpeername()</code> will tell you who is at the othe=
r end of a connected stream socket. The synopsis:</p>
<div class=3D"sourceCode" id=3D"cb43"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb43-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb43-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt;</span></spa=
n>
<span id=3D"cb43-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb43-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb43-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb43-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> ge=
tpeername(<span class=3D"dt">int</span> sockfd, <span class=3D"kw">struct</=
span> sockaddr *addr, <span class=3D"dt">int</span> *addrlen); </span></cod=
e></pre></div>
<p><code>sockfd</code> is the descriptor of the connected stream socket, <c=
ode>addr</code> is a pointer to a <code>struct sockaddr</code> (or a <code>=
struct sockaddr_in</code>) that will hold the information about the other s=
ide of the connection, and <code>addrlen</code> is a pointer to an <code>in=
t</code>, that should be initialized to <code>sizeof *addr</code> or <code>=
sizeof(struct sockaddr)</code>.</p>
<p>The function returns <code>-1</code> on error and sets <code>errno</code=
> accordingly.</p>
<p>Once you have their address, you can use  <code>inet_ntop()</code>,  <co=
de>getnameinfo()</code>, or  <code>gethostbyaddr()</code> to print or get m=
ore information. No, you can=E2=80=99t get their login name. (Ok, ok. If th=
e other computer is running an ident daemon, this is possible. This, howeve=
r, is beyond the scope of this document. Check out <a href=3D"https://tools=
.ietf.org/html/rfc1413">RFC 1413</a><a href=3D"https://beej.us/guide/bgnet/=
html/#fn22" class=3D"footnote-ref" id=3D"fnref22" role=3D"doc-noteref"><sup=
>22</sup></a> for more info.)</p>
<h2 data-number=3D"5.11" id=3D"gethostnamewho-am-i"><span class=3D"header-s=
ection-number">5.11</span> <code>gethostname()</code>=E2=80=94Who am I?</h2=
>
<p> Even easier than <code>getpeername()</code> is the function <code>getho=
stname()</code>. It returns the name of the computer that your program is r=
unning on. The name can then be used by  <code>gethostbyname()</code>, belo=
w, to determine the  IP address of your local machine.</p>
<p>What could be more fun? I could think of a few things, but they don=E2=
=80=99t pertain to socket programming. Anyway, here=E2=80=99s the breakdown=
:</p>
<div class=3D"sourceCode" id=3D"cb44"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb44-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb44-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</span></span>
<span id=3D"cb44-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb44-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb44-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb44-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> ge=
thostname(<span class=3D"dt">char</span> *hostname, <span class=3D"dt">size=
_t</span> size); </span></code></pre></div>
<p>The arguments are simple: <code>hostname</code> is a pointer to an array=
 of chars that will contain the hostname upon the function=E2=80=99s return=
, and <code>size</code> is the length in bytes of the <code>hostname</code>=
 array.</p>
<p>The function returns <code>0</code> on successful completion, and <code>=
-1</code> on error, setting <code>errno</code> as usual.</p>
<h1 data-number=3D"6" id=3D"client-server-background"><span class=3D"header=
-section-number">6</span> Client-Server Background</h1>
<p> It=E2=80=99s a client-server world, baby. Just about everything on the =
network deals with client processes talking to server processes and vice-ve=
rsa. Take <code>telnet</code>, for instance. When you connect to a remote h=
ost on port 23 with telnet (the client), a program on that host (called <co=
de>telnetd</code>, the server) springs to life. It handles the incoming tel=
net connection, sets you up with a login prompt, etc.</p>
<figure>
<embed src=3D"https://beej.us/guide/bgnet/html/cs.svg" title=3D"[Client-Ser=
ver Interaction Diagram]"><figcaption aria-hidden=3D"true">Client-Server In=
teraction.</figcaption>
</figure>
<p>The exchange of information between client and server is summarized in t=
he above diagram.</p>
<p>Note that the client-server pair can speak <code>SOCK_STREAM</code>, <co=
de>SOCK_DGRAM</code>, or anything else (as long as they=E2=80=99re speaking=
 the same thing). Some good examples of client-server pairs are <code>telne=
t</code>/<code>telnetd</code>, <code>ftp</code>/<code>ftpd</code>, or <code=
>Firefox</code>/<code>Apache</code>. Every time you use <code>ftp</code>, t=
here=E2=80=99s a remote program, <code>ftpd</code>, that serves you.</p>
<p>Often, there will only be one server on a machine, and that server will =
handle multiple clients using  <code>fork()</code>. The basic routine is: s=
erver will wait for a connection, <code>accept()</code> it, and <code>fork(=
)</code> a child process to handle it. This is what our sample server does =
in the next section.</p>
<h2 data-number=3D"6.1" id=3D"a-simple-stream-server"><span class=3D"header=
-section-number">6.1</span> A Simple Stream Server</h2>
<p> All this server does is send the string =E2=80=9C<code>Hello, world!</c=
ode>=E2=80=9D out over a stream connection. All you need to do to test this=
 server is run it in one window, and telnet to it from another with:</p>
<pre><code>    $ telnet remotehostname 3490</code></pre>
<p>where <code>remotehostname</code> is the name of the machine you=E2=80=
=99re running it on.</p>
<p><a href=3D"https://beej.us/guide/bgnet/examples/server.c">The server cod=
e</a><a href=3D"https://beej.us/guide/bgnet/html/#fn23" class=3D"footnote-r=
ef" id=3D"fnref23" role=3D"doc-noteref"><sup>23</sup></a>:</p>
<div class=3D"sourceCode" id=3D"cb46"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb46-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb46-1"></a><span class=3D"co">/*</span>=
</span>
<span id=3D"cb46-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-2"></=
a><span class=3D"co">** server.c -- a stream socket server demo</span></spa=
n>
<span id=3D"cb46-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-3"></=
a><span class=3D"co">*/</span></span>
<span id=3D"cb46-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-4"></=
a></span>
<span id=3D"cb46-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-5"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb46-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdlib.h&gt;</s=
pan></span>
<span id=3D"cb46-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</s=
pan></span>
<span id=3D"cb46-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;errno.h&gt;</sp=
an></span>
<span id=3D"cb46-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-9"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;string.h&gt;</s=
pan></span>
<span id=3D"cb46-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-10">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&g=
t;</span></span>
<span id=3D"cb46-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-11">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&=
gt;</span></span>
<span id=3D"cb46-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-12">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&=
gt;</span></span>
<span id=3D"cb46-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-13">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</=
span></span>
<span id=3D"cb46-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-14">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&g=
t;</span></span>
<span id=3D"cb46-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-15">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/wait.h&gt=
;</span></span>
<span id=3D"cb46-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-16">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;signal.h&gt;<=
/span></span>
<span id=3D"cb46-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-17">=
</a></span>
<span id=3D"cb46-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-18">=
</a><span class=3D"pp">#define PORT "3490"  </span><span class=3D"co">// th=
e port users will be connecting to</span></span>
<span id=3D"cb46-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-19">=
</a></span>
<span id=3D"cb46-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-20">=
</a><span class=3D"pp">#define BACKLOG 10   </span><span class=3D"co">// ho=
w many pending connections queue will hold</span></span>
<span id=3D"cb46-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-21">=
</a></span>
<span id=3D"cb46-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-22">=
</a><span class=3D"dt">void</span> sigchld_handler(<span class=3D"dt">int</=
span> s)</span>
<span id=3D"cb46-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-23">=
</a>{</span>
<span id=3D"cb46-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-24">=
</a>    <span class=3D"co">// waitpid() might overwrite errno, so we save a=
nd restore it:</span></span>
<span id=3D"cb46-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-25">=
</a>    <span class=3D"dt">int</span> saved_errno =3D errno;</span>
<span id=3D"cb46-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-26">=
</a></span>
<span id=3D"cb46-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-27">=
</a>    <span class=3D"cf">while</span>(waitpid(-<span class=3D"dv">1</span=
>, NULL, WNOHANG) &gt; <span class=3D"dv">0</span>);</span>
<span id=3D"cb46-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-28">=
</a></span>
<span id=3D"cb46-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-29">=
</a>    errno =3D saved_errno;</span>
<span id=3D"cb46-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-30">=
</a>}</span>
<span id=3D"cb46-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-31">=
</a></span>
<span id=3D"cb46-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-32">=
</a></span>
<span id=3D"cb46-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-33">=
</a><span class=3D"co">// get sockaddr, IPv4 or IPv6:</span></span>
<span id=3D"cb46-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-34">=
</a><span class=3D"dt">void</span> *get_in_addr(<span class=3D"kw">struct</=
span> sockaddr *sa)</span>
<span id=3D"cb46-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-35">=
</a>{</span>
<span id=3D"cb46-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-36">=
</a>    <span class=3D"cf">if</span> (sa-&gt;sa_family =3D=3D AF_INET) {</s=
pan>
<span id=3D"cb46-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-37">=
</a>        <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">str=
uct</span> sockaddr_in*)sa)-&gt;sin_addr);</span>
<span id=3D"cb46-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-38">=
</a>    }</span>
<span id=3D"cb46-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-39">=
</a></span>
<span id=3D"cb46-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-40">=
</a>    <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">struct<=
/span> sockaddr_in6*)sa)-&gt;sin6_addr);</span>
<span id=3D"cb46-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-41">=
</a>}</span>
<span id=3D"cb46-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-42">=
</a></span>
<span id=3D"cb46-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-43">=
</a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</spa=
n>
<span id=3D"cb46-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-44">=
</a>{</span>
<span id=3D"cb46-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-45">=
</a>    <span class=3D"dt">int</span> sockfd, new_fd;  <span class=3D"co">/=
/ listen on sock_fd, new connection on new_fd</span></span>
<span id=3D"cb46-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-46">=
</a>    <span class=3D"kw">struct</span> addrinfo hints, *servinfo, *p;</sp=
an>
<span id=3D"cb46-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-47">=
</a>    <span class=3D"kw">struct</span> sockaddr_storage their_addr; <span=
 class=3D"co">// connector's address information</span></span>
<span id=3D"cb46-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-48">=
</a>    socklen_t sin_size;</span>
<span id=3D"cb46-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-49">=
</a>    <span class=3D"kw">struct</span> sigaction sa;</span>
<span id=3D"cb46-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-50">=
</a>    <span class=3D"dt">int</span> yes=3D<span class=3D"dv">1</span>;</s=
pan>
<span id=3D"cb46-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-51">=
</a>    <span class=3D"dt">char</span> s[INET6_ADDRSTRLEN];</span>
<span id=3D"cb46-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-52">=
</a>    <span class=3D"dt">int</span> rv;</span>
<span id=3D"cb46-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-53">=
</a></span>
<span id=3D"cb46-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-54">=
</a>    memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">=
sizeof</span> hints);</span>
<span id=3D"cb46-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-55">=
</a>    hints.ai_family =3D AF_UNSPEC;</span>
<span id=3D"cb46-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-56">=
</a>    hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb46-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-57">=
</a>    hints.ai_flags =3D AI_PASSIVE; <span class=3D"co">// use my IP</spa=
n></span>
<span id=3D"cb46-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-58">=
</a></span>
<span id=3D"cb46-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-59">=
</a>    <span class=3D"cf">if</span> ((rv =3D getaddrinfo(NULL, PORT, &amp;=
hints, &amp;servinfo)) !=3D <span class=3D"dv">0</span>) {</span>
<span id=3D"cb46-60"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-60">=
</a>        fprintf(stderr, <span class=3D"st">"getaddrinfo: %s</span><span=
 class=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(rv));</spa=
n>
<span id=3D"cb46-61"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-61">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">1</span>;</=
span>
<span id=3D"cb46-62"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-62">=
</a>    }</span>
<span id=3D"cb46-63"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-63">=
</a></span>
<span id=3D"cb46-64"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-64">=
</a>    <span class=3D"co">// loop through all the results and bind to the =
first we can</span></span>
<span id=3D"cb46-65"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-65">=
</a>    <span class=3D"cf">for</span>(p =3D servinfo; p !=3D NULL; p =3D p-=
&gt;ai_next) {</span>
<span id=3D"cb46-66"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-66">=
</a>        <span class=3D"cf">if</span> ((sockfd =3D socket(p-&gt;ai_famil=
y, p-&gt;ai_socktype,</span>
<span id=3D"cb46-67"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-67">=
</a>                p-&gt;ai_protocol)) =3D=3D -<span class=3D"dv">1</span>=
) {</span>
<span id=3D"cb46-68"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-68">=
</a>            perror(<span class=3D"st">"server: socket"</span>);</span>
<span id=3D"cb46-69"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-69">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb46-70"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-70">=
</a>        }</span>
<span id=3D"cb46-71"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-71">=
</a></span>
<span id=3D"cb46-72"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-72">=
</a>        <span class=3D"cf">if</span> (setsockopt(sockfd, SOL_SOCKET, SO=
_REUSEADDR, &amp;yes,</span>
<span id=3D"cb46-73"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-73">=
</a>                <span class=3D"kw">sizeof</span>(<span class=3D"dt">int=
</span>)) =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb46-74"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-74">=
</a>            perror(<span class=3D"st">"setsockopt"</span>);</span>
<span id=3D"cb46-75"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-75">=
</a>            exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb46-76"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-76">=
</a>        }</span>
<span id=3D"cb46-77"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-77">=
</a></span>
<span id=3D"cb46-78"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-78">=
</a>        <span class=3D"cf">if</span> (bind(sockfd, p-&gt;ai_addr, p-&gt=
;ai_addrlen) =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb46-79"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-79">=
</a>            close(sockfd);</span>
<span id=3D"cb46-80"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-80">=
</a>            perror(<span class=3D"st">"server: bind"</span>);</span>
<span id=3D"cb46-81"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-81">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb46-82"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-82">=
</a>        }</span>
<span id=3D"cb46-83"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-83">=
</a></span>
<span id=3D"cb46-84"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-84">=
</a>        <span class=3D"cf">break</span>;</span>
<span id=3D"cb46-85"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-85">=
</a>    }</span>
<span id=3D"cb46-86"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-86">=
</a></span>
<span id=3D"cb46-87"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-87">=
</a>    freeaddrinfo(servinfo); <span class=3D"co">// all done with this st=
ructure</span></span>
<span id=3D"cb46-88"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-88">=
</a></span>
<span id=3D"cb46-89"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-89">=
</a>    <span class=3D"cf">if</span> (p =3D=3D NULL)  {</span>
<span id=3D"cb46-90"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-90">=
</a>        fprintf(stderr, <span class=3D"st">"server: failed to bind</spa=
n><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb46-91"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-91">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb46-92"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-92">=
</a>    }</span>
<span id=3D"cb46-93"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-93">=
</a></span>
<span id=3D"cb46-94"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-94">=
</a>    <span class=3D"cf">if</span> (listen(sockfd, BACKLOG) =3D=3D -<span=
 class=3D"dv">1</span>) {</span>
<span id=3D"cb46-95"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-95">=
</a>        perror(<span class=3D"st">"listen"</span>);</span>
<span id=3D"cb46-96"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-96">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb46-97"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-97">=
</a>    }</span>
<span id=3D"cb46-98"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-98">=
</a></span>
<span id=3D"cb46-99"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-99">=
</a>    sa.sa_handler =3D sigchld_handler; <span class=3D"co">// reap all d=
ead processes</span></span>
<span id=3D"cb46-100"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-100=
"></a>    sigemptyset(&amp;sa.sa_mask);</span>
<span id=3D"cb46-101"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-101=
"></a>    sa.sa_flags =3D SA_RESTART;</span>
<span id=3D"cb46-102"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-102=
"></a>    <span class=3D"cf">if</span> (sigaction(SIGCHLD, &amp;sa, NULL) =
=3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb46-103"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-103=
"></a>        perror(<span class=3D"st">"sigaction"</span>);</span>
<span id=3D"cb46-104"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-104=
"></a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb46-105"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-105=
"></a>    }</span>
<span id=3D"cb46-106"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-106=
"></a></span>
<span id=3D"cb46-107"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-107=
"></a>    printf(<span class=3D"st">"server: waiting for connections...</sp=
an><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb46-108"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-108=
"></a></span>
<span id=3D"cb46-109"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-109=
"></a>    <span class=3D"cf">while</span>(<span class=3D"dv">1</span>) {  <=
span class=3D"co">// main accept() loop</span></span>
<span id=3D"cb46-110"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-110=
"></a>        sin_size =3D <span class=3D"kw">sizeof</span> their_addr;</sp=
an>
<span id=3D"cb46-111"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-111=
"></a>        new_fd =3D accept(sockfd, (<span class=3D"kw">struct</span> s=
ockaddr *)&amp;their_addr, &amp;sin_size);</span>
<span id=3D"cb46-112"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-112=
"></a>        <span class=3D"cf">if</span> (new_fd =3D=3D -<span class=3D"d=
v">1</span>) {</span>
<span id=3D"cb46-113"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-113=
"></a>            perror(<span class=3D"st">"accept"</span>);</span>
<span id=3D"cb46-114"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-114=
"></a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb46-115"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-115=
"></a>        }</span>
<span id=3D"cb46-116"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-116=
"></a></span>
<span id=3D"cb46-117"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-117=
"></a>        inet_ntop(their_addr.ss_family,</span>
<span id=3D"cb46-118"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-118=
"></a>            get_in_addr((<span class=3D"kw">struct</span> sockaddr *)=
&amp;their_addr),</span>
<span id=3D"cb46-119"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-119=
"></a>            s, <span class=3D"kw">sizeof</span> s);</span>
<span id=3D"cb46-120"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-120=
"></a>        printf(<span class=3D"st">"server: got connection from %s</sp=
an><span class=3D"sc">\n</span><span class=3D"st">"</span>, s);</span>
<span id=3D"cb46-121"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-121=
"></a></span>
<span id=3D"cb46-122"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-122=
"></a>        <span class=3D"cf">if</span> (!fork()) { <span class=3D"co">/=
/ this is the child process</span></span>
<span id=3D"cb46-123"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-123=
"></a>            close(sockfd); <span class=3D"co">// child doesn't need t=
he listener</span></span>
<span id=3D"cb46-124"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-124=
"></a>            <span class=3D"cf">if</span> (send(new_fd, <span class=3D=
"st">"Hello, world!"</span>, <span class=3D"dv">13</span>, <span class=3D"d=
v">0</span>) =3D=3D -<span class=3D"dv">1</span>)</span>
<span id=3D"cb46-125"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-125=
"></a>                perror(<span class=3D"st">"send"</span>);</span>
<span id=3D"cb46-126"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-126=
"></a>            close(new_fd);</span>
<span id=3D"cb46-127"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-127=
"></a>            exit(<span class=3D"dv">0</span>);</span>
<span id=3D"cb46-128"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-128=
"></a>        }</span>
<span id=3D"cb46-129"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-129=
"></a>        close(new_fd);  <span class=3D"co">// parent doesn't need thi=
s</span></span>
<span id=3D"cb46-130"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-130=
"></a>    }</span>
<span id=3D"cb46-131"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-131=
"></a></span>
<span id=3D"cb46-132"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-132=
"></a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</sp=
an>
<span id=3D"cb46-133"><a href=3D"https://beej.us/guide/bgnet/html/#cb46-133=
"></a>}</span></code></pre></div>
<p>In case you=E2=80=99re curious, I have the code in one big <code>main()<=
/code> function for (I feel) syntactic clarity. Feel free to split it into =
smaller functions if it makes you feel better.</p>
<p>(Also, this whole  <code>sigaction()</code> thing might be new to you=E2=
=80=94that=E2=80=99s ok. The code that=E2=80=99s there is responsible for r=
eaping  zombie processes that appear as the <code>fork()</code>ed child pro=
cesses exit. If you make lots of zombies and don=E2=80=99t reap them, your =
system administrator will become agitated.)</p>
<p>You can get the data from this server by using the client listed in the =
next section.</p>
<h2 data-number=3D"6.2" id=3D"a-simple-stream-client"><span class=3D"header=
-section-number">6.2</span> A Simple Stream Client</h2>
<p> This guy=E2=80=99s even easier than the server. All this client does is=
 connect to the host you specify on the command line, port 3490. It gets th=
e string that the server sends.</p>
<p><a href=3D"https://beej.us/guide/bgnet/examples/client.c">The client sou=
rce</a><a href=3D"https://beej.us/guide/bgnet/html/#fn24" class=3D"footnote=
-ref" id=3D"fnref24" role=3D"doc-noteref"><sup>24</sup></a>:</p>
<div class=3D"sourceCode" id=3D"cb47"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb47-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb47-1"></a><span class=3D"co">/*</span>=
</span>
<span id=3D"cb47-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-2"></=
a><span class=3D"co">** client.c -- a stream socket client demo</span></spa=
n>
<span id=3D"cb47-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-3"></=
a><span class=3D"co">*/</span></span>
<span id=3D"cb47-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-4"></=
a></span>
<span id=3D"cb47-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-5"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb47-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdlib.h&gt;</s=
pan></span>
<span id=3D"cb47-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</s=
pan></span>
<span id=3D"cb47-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;errno.h&gt;</sp=
an></span>
<span id=3D"cb47-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-9"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;string.h&gt;</s=
pan></span>
<span id=3D"cb47-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-10">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</=
span></span>
<span id=3D"cb47-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-11">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&g=
t;</span></span>
<span id=3D"cb47-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-12">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&=
gt;</span></span>
<span id=3D"cb47-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-13">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&=
gt;</span></span>
<span id=3D"cb47-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-14">=
</a></span>
<span id=3D"cb47-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-15">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&g=
t;</span></span>
<span id=3D"cb47-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-16">=
</a></span>
<span id=3D"cb47-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-17">=
</a><span class=3D"pp">#define PORT "3490" </span><span class=3D"co">// the=
 port client will be connecting to </span></span>
<span id=3D"cb47-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-18">=
</a></span>
<span id=3D"cb47-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-19">=
</a><span class=3D"pp">#define MAXDATASIZE 100 </span><span class=3D"co">//=
 max number of bytes we can get at once </span></span>
<span id=3D"cb47-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-20">=
</a></span>
<span id=3D"cb47-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-21">=
</a><span class=3D"co">// get sockaddr, IPv4 or IPv6:</span></span>
<span id=3D"cb47-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-22">=
</a><span class=3D"dt">void</span> *get_in_addr(<span class=3D"kw">struct</=
span> sockaddr *sa)</span>
<span id=3D"cb47-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-23">=
</a>{</span>
<span id=3D"cb47-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-24">=
</a>    <span class=3D"cf">if</span> (sa-&gt;sa_family =3D=3D AF_INET) {</s=
pan>
<span id=3D"cb47-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-25">=
</a>        <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">str=
uct</span> sockaddr_in*)sa)-&gt;sin_addr);</span>
<span id=3D"cb47-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-26">=
</a>    }</span>
<span id=3D"cb47-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-27">=
</a></span>
<span id=3D"cb47-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-28">=
</a>    <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">struct<=
/span> sockaddr_in6*)sa)-&gt;sin6_addr);</span>
<span id=3D"cb47-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-29">=
</a>}</span>
<span id=3D"cb47-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-30">=
</a></span>
<span id=3D"cb47-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-31">=
</a><span class=3D"dt">int</span> main(<span class=3D"dt">int</span> argc, =
<span class=3D"dt">char</span> *argv[])</span>
<span id=3D"cb47-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-32">=
</a>{</span>
<span id=3D"cb47-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-33">=
</a>    <span class=3D"dt">int</span> sockfd, numbytes;  </span>
<span id=3D"cb47-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-34">=
</a>    <span class=3D"dt">char</span> buf[MAXDATASIZE];</span>
<span id=3D"cb47-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-35">=
</a>    <span class=3D"kw">struct</span> addrinfo hints, *servinfo, *p;</sp=
an>
<span id=3D"cb47-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-36">=
</a>    <span class=3D"dt">int</span> rv;</span>
<span id=3D"cb47-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-37">=
</a>    <span class=3D"dt">char</span> s[INET6_ADDRSTRLEN];</span>
<span id=3D"cb47-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-38">=
</a></span>
<span id=3D"cb47-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-39">=
</a>    <span class=3D"cf">if</span> (argc !=3D <span class=3D"dv">2</span>=
) {</span>
<span id=3D"cb47-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-40">=
</a>        fprintf(stderr,<span class=3D"st">"usage: client hostname</span=
><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb47-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-41">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb47-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-42">=
</a>    }</span>
<span id=3D"cb47-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-43">=
</a></span>
<span id=3D"cb47-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-44">=
</a>    memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">=
sizeof</span> hints);</span>
<span id=3D"cb47-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-45">=
</a>    hints.ai_family =3D AF_UNSPEC;</span>
<span id=3D"cb47-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-46">=
</a>    hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb47-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-47">=
</a></span>
<span id=3D"cb47-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-48">=
</a>    <span class=3D"cf">if</span> ((rv =3D getaddrinfo(argv[<span class=
=3D"dv">1</span>], PORT, &amp;hints, &amp;servinfo)) !=3D <span class=3D"dv=
">0</span>) {</span>
<span id=3D"cb47-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-49">=
</a>        fprintf(stderr, <span class=3D"st">"getaddrinfo: %s</span><span=
 class=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(rv));</spa=
n>
<span id=3D"cb47-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-50">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">1</span>;</=
span>
<span id=3D"cb47-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-51">=
</a>    }</span>
<span id=3D"cb47-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-52">=
</a></span>
<span id=3D"cb47-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-53">=
</a>    <span class=3D"co">// loop through all the results and connect to t=
he first we can</span></span>
<span id=3D"cb47-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-54">=
</a>    <span class=3D"cf">for</span>(p =3D servinfo; p !=3D NULL; p =3D p-=
&gt;ai_next) {</span>
<span id=3D"cb47-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-55">=
</a>        <span class=3D"cf">if</span> ((sockfd =3D socket(p-&gt;ai_famil=
y, p-&gt;ai_socktype,</span>
<span id=3D"cb47-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-56">=
</a>                p-&gt;ai_protocol)) =3D=3D -<span class=3D"dv">1</span>=
) {</span>
<span id=3D"cb47-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-57">=
</a>            perror(<span class=3D"st">"client: socket"</span>);</span>
<span id=3D"cb47-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-58">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb47-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-59">=
</a>        }</span>
<span id=3D"cb47-60"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-60">=
</a></span>
<span id=3D"cb47-61"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-61">=
</a>        <span class=3D"cf">if</span> (connect(sockfd, p-&gt;ai_addr, p-=
&gt;ai_addrlen) =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb47-62"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-62">=
</a>            close(sockfd);</span>
<span id=3D"cb47-63"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-63">=
</a>            perror(<span class=3D"st">"client: connect"</span>);</span>
<span id=3D"cb47-64"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-64">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb47-65"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-65">=
</a>        }</span>
<span id=3D"cb47-66"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-66">=
</a></span>
<span id=3D"cb47-67"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-67">=
</a>        <span class=3D"cf">break</span>;</span>
<span id=3D"cb47-68"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-68">=
</a>    }</span>
<span id=3D"cb47-69"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-69">=
</a></span>
<span id=3D"cb47-70"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-70">=
</a>    <span class=3D"cf">if</span> (p =3D=3D NULL) {</span>
<span id=3D"cb47-71"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-71">=
</a>        fprintf(stderr, <span class=3D"st">"client: failed to connect</=
span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb47-72"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-72">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">2</span>;</=
span>
<span id=3D"cb47-73"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-73">=
</a>    }</span>
<span id=3D"cb47-74"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-74">=
</a></span>
<span id=3D"cb47-75"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-75">=
</a>    inet_ntop(p-&gt;ai_family, get_in_addr((<span class=3D"kw">struct</=
span> sockaddr *)p-&gt;ai_addr),</span>
<span id=3D"cb47-76"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-76">=
</a>            s, <span class=3D"kw">sizeof</span> s);</span>
<span id=3D"cb47-77"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-77">=
</a>    printf(<span class=3D"st">"client: connecting to %s</span><span cla=
ss=3D"sc">\n</span><span class=3D"st">"</span>, s);</span>
<span id=3D"cb47-78"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-78">=
</a></span>
<span id=3D"cb47-79"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-79">=
</a>    freeaddrinfo(servinfo); <span class=3D"co">// all done with this st=
ructure</span></span>
<span id=3D"cb47-80"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-80">=
</a></span>
<span id=3D"cb47-81"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-81">=
</a>    <span class=3D"cf">if</span> ((numbytes =3D recv(sockfd, buf, MAXDA=
TASIZE-<span class=3D"dv">1</span>, <span class=3D"dv">0</span>)) =3D=3D -<=
span class=3D"dv">1</span>) {</span>
<span id=3D"cb47-82"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-82">=
</a>        perror(<span class=3D"st">"recv"</span>);</span>
<span id=3D"cb47-83"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-83">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb47-84"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-84">=
</a>    }</span>
<span id=3D"cb47-85"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-85">=
</a></span>
<span id=3D"cb47-86"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-86">=
</a>    buf[numbytes] =3D <span class=3D"ch">'\0'</span>;</span>
<span id=3D"cb47-87"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-87">=
</a></span>
<span id=3D"cb47-88"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-88">=
</a>    printf(<span class=3D"st">"client: received '%s'</span><span class=
=3D"sc">\n</span><span class=3D"st">"</span>,buf);</span>
<span id=3D"cb47-89"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-89">=
</a></span>
<span id=3D"cb47-90"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-90">=
</a>    close(sockfd);</span>
<span id=3D"cb47-91"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-91">=
</a></span>
<span id=3D"cb47-92"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-92">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb47-93"><a href=3D"https://beej.us/guide/bgnet/html/#cb47-93">=
</a>}</span></code></pre></div>
<p>Notice that if you don=E2=80=99t run the server before you run the clien=
t, <code>connect()</code> returns  =E2=80=9CConnection refused=E2=80=9D. Ve=
ry useful.</p>
<h2 data-number=3D"6.3" id=3D"datagram"><span class=3D"header-section-numbe=
r">6.3</span> Datagram Sockets</h2>
<p>We=E2=80=99ve already covered the basics of UDP datagram sockets with ou=
r discussion of <code>sendto()</code> and <code>recvfrom()</code>, above, s=
o I=E2=80=99ll just present a couple of sample programs: <code>talker.c</co=
de> and <code>listener.c</code>.</p>
<p> <code>listener</code> sits on a machine waiting for an incoming packet =
on port 4950. <code>talker</code> sends a packet to that port, on the speci=
fied machine, that contains whatever the user enters on the command line.</=
p>
<p>Because datagram sockets are connectionless and just fire packets off in=
to the ether with callous disregard for success, we are going to tell the c=
lient and server to use specifically IPv6. This way we avoid the situation =
where the server is listening on IPv6 and the client sends on IPv4; the dat=
a simply would not be received. (In our connected TCP stream sockets world,=
 we might still have the mismatch, but the error on <code>connect()</code> =
for one address family would cause us to retry for the other.)</p>
<p>Here is the <a href=3D"https://beej.us/guide/bgnet/examples/listener.c">=
source for <code>listener.c</code></a><a href=3D"https://beej.us/guide/bgne=
t/html/#fn25" class=3D"footnote-ref" id=3D"fnref25" role=3D"doc-noteref"><s=
up>25</sup></a>:</p>
<div class=3D"sourceCode" id=3D"cb48"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb48-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb48-1"></a><span class=3D"co">/*</span>=
</span>
<span id=3D"cb48-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-2"></=
a><span class=3D"co">** listener.c -- a datagram sockets "server" demo</spa=
n></span>
<span id=3D"cb48-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-3"></=
a><span class=3D"co">*/</span></span>
<span id=3D"cb48-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-4"></=
a></span>
<span id=3D"cb48-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-5"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb48-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdlib.h&gt;</s=
pan></span>
<span id=3D"cb48-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</s=
pan></span>
<span id=3D"cb48-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;errno.h&gt;</sp=
an></span>
<span id=3D"cb48-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-9"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;string.h&gt;</s=
pan></span>
<span id=3D"cb48-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-10">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&g=
t;</span></span>
<span id=3D"cb48-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-11">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&=
gt;</span></span>
<span id=3D"cb48-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-12">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&=
gt;</span></span>
<span id=3D"cb48-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-13">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&g=
t;</span></span>
<span id=3D"cb48-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-14">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</=
span></span>
<span id=3D"cb48-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-15">=
</a></span>
<span id=3D"cb48-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-16">=
</a><span class=3D"pp">#define MYPORT "4950"    </span><span class=3D"co">/=
/ the port users will be connecting to</span></span>
<span id=3D"cb48-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-17">=
</a></span>
<span id=3D"cb48-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-18">=
</a><span class=3D"pp">#define MAXBUFLEN 100</span></span>
<span id=3D"cb48-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-19">=
</a></span>
<span id=3D"cb48-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-20">=
</a><span class=3D"co">// get sockaddr, IPv4 or IPv6:</span></span>
<span id=3D"cb48-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-21">=
</a><span class=3D"dt">void</span> *get_in_addr(<span class=3D"kw">struct</=
span> sockaddr *sa)</span>
<span id=3D"cb48-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-22">=
</a>{</span>
<span id=3D"cb48-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-23">=
</a>    <span class=3D"cf">if</span> (sa-&gt;sa_family =3D=3D AF_INET) {</s=
pan>
<span id=3D"cb48-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-24">=
</a>        <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">str=
uct</span> sockaddr_in*)sa)-&gt;sin_addr);</span>
<span id=3D"cb48-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-25">=
</a>    }</span>
<span id=3D"cb48-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-26">=
</a></span>
<span id=3D"cb48-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-27">=
</a>    <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">struct<=
/span> sockaddr_in6*)sa)-&gt;sin6_addr);</span>
<span id=3D"cb48-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-28">=
</a>}</span>
<span id=3D"cb48-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-29">=
</a></span>
<span id=3D"cb48-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-30">=
</a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</spa=
n>
<span id=3D"cb48-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-31">=
</a>{</span>
<span id=3D"cb48-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-32">=
</a>    <span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb48-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-33">=
</a>    <span class=3D"kw">struct</span> addrinfo hints, *servinfo, *p;</sp=
an>
<span id=3D"cb48-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-34">=
</a>    <span class=3D"dt">int</span> rv;</span>
<span id=3D"cb48-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-35">=
</a>    <span class=3D"dt">int</span> numbytes;</span>
<span id=3D"cb48-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-36">=
</a>    <span class=3D"kw">struct</span> sockaddr_storage their_addr;</span=
>
<span id=3D"cb48-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-37">=
</a>    <span class=3D"dt">char</span> buf[MAXBUFLEN];</span>
<span id=3D"cb48-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-38">=
</a>    socklen_t addr_len;</span>
<span id=3D"cb48-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-39">=
</a>    <span class=3D"dt">char</span> s[INET6_ADDRSTRLEN];</span>
<span id=3D"cb48-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-40">=
</a></span>
<span id=3D"cb48-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-41">=
</a>    memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">=
sizeof</span> hints);</span>
<span id=3D"cb48-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-42">=
</a>    hints.ai_family =3D AF_INET6; <span class=3D"co">// set to AF_INET =
to use IPv4</span></span>
<span id=3D"cb48-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-43">=
</a>    hints.ai_socktype =3D SOCK_DGRAM;</span>
<span id=3D"cb48-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-44">=
</a>    hints.ai_flags =3D AI_PASSIVE; <span class=3D"co">// use my IP</spa=
n></span>
<span id=3D"cb48-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-45">=
</a></span>
<span id=3D"cb48-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-46">=
</a>    <span class=3D"cf">if</span> ((rv =3D getaddrinfo(NULL, MYPORT, &am=
p;hints, &amp;servinfo)) !=3D <span class=3D"dv">0</span>) {</span>
<span id=3D"cb48-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-47">=
</a>        fprintf(stderr, <span class=3D"st">"getaddrinfo: %s</span><span=
 class=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(rv));</spa=
n>
<span id=3D"cb48-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-48">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">1</span>;</=
span>
<span id=3D"cb48-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-49">=
</a>    }</span>
<span id=3D"cb48-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-50">=
</a></span>
<span id=3D"cb48-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-51">=
</a>    <span class=3D"co">// loop through all the results and bind to the =
first we can</span></span>
<span id=3D"cb48-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-52">=
</a>    <span class=3D"cf">for</span>(p =3D servinfo; p !=3D NULL; p =3D p-=
&gt;ai_next) {</span>
<span id=3D"cb48-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-53">=
</a>        <span class=3D"cf">if</span> ((sockfd =3D socket(p-&gt;ai_famil=
y, p-&gt;ai_socktype,</span>
<span id=3D"cb48-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-54">=
</a>                p-&gt;ai_protocol)) =3D=3D -<span class=3D"dv">1</span>=
) {</span>
<span id=3D"cb48-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-55">=
</a>            perror(<span class=3D"st">"listener: socket"</span>);</span=
>
<span id=3D"cb48-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-56">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb48-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-57">=
</a>        }</span>
<span id=3D"cb48-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-58">=
</a></span>
<span id=3D"cb48-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-59">=
</a>        <span class=3D"cf">if</span> (bind(sockfd, p-&gt;ai_addr, p-&gt=
;ai_addrlen) =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb48-60"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-60">=
</a>            close(sockfd);</span>
<span id=3D"cb48-61"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-61">=
</a>            perror(<span class=3D"st">"listener: bind"</span>);</span>
<span id=3D"cb48-62"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-62">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb48-63"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-63">=
</a>        }</span>
<span id=3D"cb48-64"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-64">=
</a></span>
<span id=3D"cb48-65"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-65">=
</a>        <span class=3D"cf">break</span>;</span>
<span id=3D"cb48-66"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-66">=
</a>    }</span>
<span id=3D"cb48-67"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-67">=
</a></span>
<span id=3D"cb48-68"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-68">=
</a>    <span class=3D"cf">if</span> (p =3D=3D NULL) {</span>
<span id=3D"cb48-69"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-69">=
</a>        fprintf(stderr, <span class=3D"st">"listener: failed to bind so=
cket</span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb48-70"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-70">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">2</span>;</=
span>
<span id=3D"cb48-71"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-71">=
</a>    }</span>
<span id=3D"cb48-72"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-72">=
</a></span>
<span id=3D"cb48-73"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-73">=
</a>    freeaddrinfo(servinfo);</span>
<span id=3D"cb48-74"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-74">=
</a></span>
<span id=3D"cb48-75"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-75">=
</a>    printf(<span class=3D"st">"listener: waiting to recvfrom...</span><=
span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb48-76"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-76">=
</a></span>
<span id=3D"cb48-77"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-77">=
</a>    addr_len =3D <span class=3D"kw">sizeof</span> their_addr;</span>
<span id=3D"cb48-78"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-78">=
</a>    <span class=3D"cf">if</span> ((numbytes =3D recvfrom(sockfd, buf, M=
AXBUFLEN-<span class=3D"dv">1</span> , <span class=3D"dv">0</span>,</span>
<span id=3D"cb48-79"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-79">=
</a>        (<span class=3D"kw">struct</span> sockaddr *)&amp;their_addr, &=
amp;addr_len)) =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb48-80"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-80">=
</a>        perror(<span class=3D"st">"recvfrom"</span>);</span>
<span id=3D"cb48-81"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-81">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb48-82"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-82">=
</a>    }</span>
<span id=3D"cb48-83"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-83">=
</a></span>
<span id=3D"cb48-84"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-84">=
</a>    printf(<span class=3D"st">"listener: got packet from %s</span><span=
 class=3D"sc">\n</span><span class=3D"st">"</span>,</span>
<span id=3D"cb48-85"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-85">=
</a>        inet_ntop(their_addr.ss_family,</span>
<span id=3D"cb48-86"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-86">=
</a>            get_in_addr((<span class=3D"kw">struct</span> sockaddr *)&a=
mp;their_addr),</span>
<span id=3D"cb48-87"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-87">=
</a>            s, <span class=3D"kw">sizeof</span> s));</span>
<span id=3D"cb48-88"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-88">=
</a>    printf(<span class=3D"st">"listener: packet is %d bytes long</span>=
<span class=3D"sc">\n</span><span class=3D"st">"</span>, numbytes);</span>
<span id=3D"cb48-89"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-89">=
</a>    buf[numbytes] =3D <span class=3D"ch">'\0'</span>;</span>
<span id=3D"cb48-90"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-90">=
</a>    printf(<span class=3D"st">"listener: packet contains </span><span c=
lass=3D"sc">\"</span><span class=3D"st">%s</span><span class=3D"sc">\"\n</s=
pan><span class=3D"st">"</span>, buf);</span>
<span id=3D"cb48-91"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-91">=
</a></span>
<span id=3D"cb48-92"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-92">=
</a>    close(sockfd);</span>
<span id=3D"cb48-93"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-93">=
</a></span>
<span id=3D"cb48-94"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-94">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb48-95"><a href=3D"https://beej.us/guide/bgnet/html/#cb48-95">=
</a>}</span></code></pre></div>
<p>Notice that in our call to <code>getaddrinfo()</code> we=E2=80=99re fina=
lly using <code>SOCK_DGRAM</code>. Also, note that there=E2=80=99s no need =
to <code>listen()</code> or <code>accept()</code>. This is one of the perks=
 of using unconnected datagram sockets!</p>
<p> Next comes the <a href=3D"https://beej.us/guide/bgnet/examples/talker.c=
">source for <code>talker.c</code></a><a href=3D"https://beej.us/guide/bgne=
t/html/#fn26" class=3D"footnote-ref" id=3D"fnref26" role=3D"doc-noteref"><s=
up>26</sup></a>:</p>
<div class=3D"sourceCode" id=3D"cb49"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb49-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb49-1"></a><span class=3D"co">/*</span>=
</span>
<span id=3D"cb49-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-2"></=
a><span class=3D"co">** talker.c -- a datagram "client" demo</span></span>
<span id=3D"cb49-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-3"></=
a><span class=3D"co">*/</span></span>
<span id=3D"cb49-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-4"></=
a></span>
<span id=3D"cb49-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-5"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb49-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdlib.h&gt;</s=
pan></span>
<span id=3D"cb49-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</s=
pan></span>
<span id=3D"cb49-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;errno.h&gt;</sp=
an></span>
<span id=3D"cb49-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-9"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;string.h&gt;</s=
pan></span>
<span id=3D"cb49-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-10">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&g=
t;</span></span>
<span id=3D"cb49-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-11">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&=
gt;</span></span>
<span id=3D"cb49-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-12">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&=
gt;</span></span>
<span id=3D"cb49-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-13">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&g=
t;</span></span>
<span id=3D"cb49-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-14">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</=
span></span>
<span id=3D"cb49-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-15">=
</a></span>
<span id=3D"cb49-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-16">=
</a><span class=3D"pp">#define SERVERPORT "4950"    </span><span class=3D"c=
o">// the port users will be connecting to</span></span>
<span id=3D"cb49-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-17">=
</a></span>
<span id=3D"cb49-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-18">=
</a><span class=3D"dt">int</span> main(<span class=3D"dt">int</span> argc, =
<span class=3D"dt">char</span> *argv[])</span>
<span id=3D"cb49-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-19">=
</a>{</span>
<span id=3D"cb49-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-20">=
</a>    <span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb49-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-21">=
</a>    <span class=3D"kw">struct</span> addrinfo hints, *servinfo, *p;</sp=
an>
<span id=3D"cb49-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-22">=
</a>    <span class=3D"dt">int</span> rv;</span>
<span id=3D"cb49-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-23">=
</a>    <span class=3D"dt">int</span> numbytes;</span>
<span id=3D"cb49-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-24">=
</a></span>
<span id=3D"cb49-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-25">=
</a>    <span class=3D"cf">if</span> (argc !=3D <span class=3D"dv">3</span>=
) {</span>
<span id=3D"cb49-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-26">=
</a>        fprintf(stderr,<span class=3D"st">"usage: talker hostname messa=
ge</span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb49-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-27">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb49-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-28">=
</a>    }</span>
<span id=3D"cb49-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-29">=
</a></span>
<span id=3D"cb49-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-30">=
</a>    memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">=
sizeof</span> hints);</span>
<span id=3D"cb49-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-31">=
</a>    hints.ai_family =3D AF_INET6; <span class=3D"co">// set to AF_INET =
to use IPv4</span></span>
<span id=3D"cb49-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-32">=
</a>    hints.ai_socktype =3D SOCK_DGRAM;</span>
<span id=3D"cb49-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-33">=
</a></span>
<span id=3D"cb49-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-34">=
</a>    <span class=3D"cf">if</span> ((rv =3D getaddrinfo(argv[<span class=
=3D"dv">1</span>], SERVERPORT, &amp;hints, &amp;servinfo)) !=3D <span class=
=3D"dv">0</span>) {</span>
<span id=3D"cb49-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-35">=
</a>        fprintf(stderr, <span class=3D"st">"getaddrinfo: %s</span><span=
 class=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(rv));</spa=
n>
<span id=3D"cb49-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-36">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">1</span>;</=
span>
<span id=3D"cb49-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-37">=
</a>    }</span>
<span id=3D"cb49-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-38">=
</a></span>
<span id=3D"cb49-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-39">=
</a>    <span class=3D"co">// loop through all the results and make a socke=
t</span></span>
<span id=3D"cb49-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-40">=
</a>    <span class=3D"cf">for</span>(p =3D servinfo; p !=3D NULL; p =3D p-=
&gt;ai_next) {</span>
<span id=3D"cb49-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-41">=
</a>        <span class=3D"cf">if</span> ((sockfd =3D socket(p-&gt;ai_famil=
y, p-&gt;ai_socktype,</span>
<span id=3D"cb49-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-42">=
</a>                p-&gt;ai_protocol)) =3D=3D -<span class=3D"dv">1</span>=
) {</span>
<span id=3D"cb49-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-43">=
</a>            perror(<span class=3D"st">"talker: socket"</span>);</span>
<span id=3D"cb49-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-44">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb49-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-45">=
</a>        }</span>
<span id=3D"cb49-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-46">=
</a></span>
<span id=3D"cb49-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-47">=
</a>        <span class=3D"cf">break</span>;</span>
<span id=3D"cb49-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-48">=
</a>    }</span>
<span id=3D"cb49-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-49">=
</a></span>
<span id=3D"cb49-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-50">=
</a>    <span class=3D"cf">if</span> (p =3D=3D NULL) {</span>
<span id=3D"cb49-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-51">=
</a>        fprintf(stderr, <span class=3D"st">"talker: failed to create so=
cket</span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb49-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-52">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">2</span>;</=
span>
<span id=3D"cb49-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-53">=
</a>    }</span>
<span id=3D"cb49-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-54">=
</a></span>
<span id=3D"cb49-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-55">=
</a>    <span class=3D"cf">if</span> ((numbytes =3D sendto(sockfd, argv[<sp=
an class=3D"dv">2</span>], strlen(argv[<span class=3D"dv">2</span>]), <span=
 class=3D"dv">0</span>,</span>
<span id=3D"cb49-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-56">=
</a>             p-&gt;ai_addr, p-&gt;ai_addrlen)) =3D=3D -<span class=3D"d=
v">1</span>) {</span>
<span id=3D"cb49-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-57">=
</a>        perror(<span class=3D"st">"talker: sendto"</span>);</span>
<span id=3D"cb49-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-58">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb49-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-59">=
</a>    }</span>
<span id=3D"cb49-60"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-60">=
</a></span>
<span id=3D"cb49-61"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-61">=
</a>    freeaddrinfo(servinfo);</span>
<span id=3D"cb49-62"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-62">=
</a></span>
<span id=3D"cb49-63"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-63">=
</a>    printf(<span class=3D"st">"talker: sent %d bytes to %s</span><span =
class=3D"sc">\n</span><span class=3D"st">"</span>, numbytes, argv[<span cla=
ss=3D"dv">1</span>]);</span>
<span id=3D"cb49-64"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-64">=
</a>    close(sockfd);</span>
<span id=3D"cb49-65"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-65">=
</a></span>
<span id=3D"cb49-66"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-66">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb49-67"><a href=3D"https://beej.us/guide/bgnet/html/#cb49-67">=
</a>}</span></code></pre></div>
<p>And that=E2=80=99s all there is to it! Run <code>listener</code> on some=
 machine, then run <code>talker</code> on another. Watch them communicate! =
Fun G-rated excitement for the entire nuclear family!</p>
<p>You don=E2=80=99t even have to run the server this time! You can run <co=
de>talker</code> by itself, and it just happily fires packets off into the =
ether where they disappear if no one is ready with a <code>recvfrom()</code=
> on the other side. Remember: data sent using UDP datagram sockets isn=E2=
=80=99t guaranteed to arrive!</p>
<p>Except for one more tiny detail that I=E2=80=99ve mentioned many times i=
n the past:  connected datagram sockets. I need to talk about this here, si=
nce we=E2=80=99re in the datagram section of the document. Let=E2=80=99s sa=
y that <code>talker</code> calls <code>connect()</code> and specifies the <=
code>listener</code>=E2=80=99s address. From that point on, <code>talker</c=
ode> may only sent to and receive from the address specified by <code>conne=
ct()</code>. For this reason, you don=E2=80=99t have to use <code>sendto()<=
/code> and <code>recvfrom()</code>; you can simply use <code>send()</code> =
and <code>recv()</code>.</p>
<h1 data-number=3D"7" id=3D"slightly-advanced-techniques"><span class=3D"he=
ader-section-number">7</span> Slightly Advanced Techniques</h1>
<p>These aren=E2=80=99t <em>really</em> advanced, but they=E2=80=99re getti=
ng out of the more basic levels we=E2=80=99ve already covered. In fact, if =
you=E2=80=99ve gotten this far, you should consider yourself fairly accompl=
ished in the basics of Unix network programming! Congratulations!</p>
<p>So here we go into the brave new world of some of the more esoteric thin=
gs you might want to learn about sockets. Have at it!</p>
<h2 data-number=3D"7.1" id=3D"blocking"><span class=3D"header-section-numbe=
r">7.1</span> Blocking</h2>
<p> Blocking. You=E2=80=99ve heard about it=E2=80=94now what the heck is it=
? In a nutshell, =E2=80=9Cblock=E2=80=9D is techie jargon for =E2=80=9Cslee=
p=E2=80=9D. You probably noticed that when you run <code>listener</code>, a=
bove, it just sits there until a packet arrives. What happened is that it c=
alled <code>recvfrom()</code>, there was no data, and so <code>recvfrom()</=
code> is said to =E2=80=9Cblock=E2=80=9D (that is, sleep there) until some =
data arrives.</p>
<p>Lots of functions block. <code>accept()</code> blocks. All the <code>rec=
v()</code> functions block. The reason they can do this is because they=E2=
=80=99re allowed to. When you first create the socket descriptor with <code=
>socket()</code>, the kernel sets it to blocking.  If you don=E2=80=99t wan=
t a socket to be blocking, you have to make a call to  <code>fcntl()</code>=
:</p>
<div class=3D"sourceCode" id=3D"cb50"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb50-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb50-1"></a><span class=3D"pp">#include =
</span><span class=3D"im">&lt;unistd.h&gt;</span></span>
<span id=3D"cb50-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb50-2"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;fcntl.h&gt;</sp=
an></span>
<span id=3D"cb50-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb50-3"></=
a>.</span>
<span id=3D"cb50-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb50-4"></=
a>.</span>
<span id=3D"cb50-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb50-5"></=
a>.</span>
<span id=3D"cb50-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb50-6"></=
a>sockfd =3D socket(PF_INET, SOCK_STREAM, <span class=3D"dv">0</span>);</sp=
an>
<span id=3D"cb50-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb50-7"></=
a>fcntl(sockfd, F_SETFL, O_NONBLOCK);</span>
<span id=3D"cb50-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb50-8"></=
a>.</span>
<span id=3D"cb50-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb50-9"></=
a>.</span>
<span id=3D"cb50-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb50-10">=
</a>. </span></code></pre></div>
<p>By setting a socket to non-blocking, you can effectively =E2=80=9Cpoll=
=E2=80=9D the socket for information. If you try to read from a non-blockin=
g socket and there=E2=80=99s no data there, it=E2=80=99s not allowed to blo=
ck=E2=80=94it will return <code>-1</code> and <code>errno</code> will be se=
t to  <code>EAGAIN</code> or  <code>EWOULDBLOCK</code>.</p>
<p>(Wait=E2=80=94it can return  <code>EAGAIN</code> <em>or</em>  <code>EWOU=
LDBLOCK</code>? Which do you check for? The specification doesn=E2=80=99t a=
ctually specify which your system will return, so for portability, check th=
em both.)</p>
<p>Generally speaking, however, this type of polling is a bad idea. If you =
put your program in a busy-wait looking for data on the socket, you=E2=80=
=99ll suck up CPU time like it was going out of style. A more elegant solut=
ion for checking to see if there=E2=80=99s data waiting to be read comes in=
 the following section on  <code>poll()</code>.</p>
<h2 data-number=3D"7.2" id=3D"poll"><span class=3D"header-section-number">7=
.2</span> <code>poll()</code>=E2=80=94Synchronous I/O Multiplexing</h2>
<p> What you really want to be able to do is somehow monitor a <em>bunch</e=
m> of sockets at once and then handle the ones that have data ready. This w=
ay you don=E2=80=99t have to continously poll all those sockets to see whic=
h are ready to read.</p>
<blockquote>
<p><em>A word of warning: <code>poll()</code> is horribly slow when it come=
s to giant numbers of connections. In those circumstances, you=E2=80=99ll g=
et better performance out of an event library such as <a href=3D"https://li=
bevent.org/">libevent</a><a href=3D"https://beej.us/guide/bgnet/html/#fn27"=
 class=3D"footnote-ref" id=3D"fnref27" role=3D"doc-noteref"><sup>27</sup></=
a> that attempts to use the fastest possible method availabile on your syst=
em.</em></p>
</blockquote>
<p>So how can you avoid polling? Not slightly ironically, you can avoid pol=
ling by using the <code>poll()</code> system call. In a nutshell, we=E2=80=
=99re going to ask the operating system to do all the dirty work for us, an=
d just let us know when some data is ready to read on which sockets. In the=
 meantime, our process can go to sleep, saving system resources.</p>
<p>The general gameplan is to keep an array of <code>struct pollfd</code>s =
with information about which socket descriptors we want to monitor, and wha=
t kind of events we want to monitor for. The OS will block on the <code>pol=
l()</code> call until one of those events occurs (e.g.&nbsp;=E2=80=9Csocket=
 ready to read!=E2=80=9D) or until a user-specified timeout occurs.</p>
<p>Usefully, a <code>listen()</code>ing socket will return =E2=80=9Cready t=
o read=E2=80=9D when a new incoming connection is ready to be <code>accept(=
)</code>ed.</p>
<p>That=E2=80=99s enough banter. How do we use this?</p>
<div class=3D"sourceCode" id=3D"cb51"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb51-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb51-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;poll.h&gt;</span></span>
<span id=3D"cb51-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb51-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb51-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb51-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> po=
ll(<span class=3D"kw">struct</span> pollfd fds[], nfds_t nfds, <span class=
=3D"dt">int</span> timeout);</span></code></pre></div>
<p><code>fds</code> is our array of information (which sockets to monitor f=
or what), <code>nfds</code> is the count of elements in the array, and <cod=
e>timeout</code> is a timeout in milliseconds. It returns the number of ele=
ments in the array that have had an event occur.</p>
<p>Let=E2=80=99s have a look at that <code>struct</code>:</p>
<p></p>
<div class=3D"sourceCode" id=3D"cb52"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb52-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb52-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"kw">struct</span> pollfd {</span>
<span id=3D"cb52-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb52-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int</span=
> fd;         <span class=3D"co">// the socket descriptor</span></span>
<span id=3D"cb52-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb52-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">short</sp=
an> events;   <span class=3D"co">// bitmap of events we're interested in</s=
pan></span>
<span id=3D"cb52-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb52-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">short</sp=
an> revents;  <span class=3D"co">// when poll() returns, bitmap of events t=
hat occurred</span></span>
<span id=3D"cb52-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb52-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    };</span></code></pre></div>
<p>So we=E2=80=99re going to have an array of those, and we=E2=80=99ll see =
the <code>fd</code> field for each element to a socket descriptor we=E2=80=
=99re interested in monitoring. And then we=E2=80=99ll set the <code>events=
</code> field to indicate the type of events we=E2=80=99re interested in.</=
p>
<p>The <code>events</code> field is the bitwise-OR of the following:</p>
<table>
<thead>
<tr class=3D"header">
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>POLLIN</code></td>
<td>Alert me when data is ready to <code>recv()</code> on this socket.</td>
</tr>
<tr class=3D"even">
<td><code>POLLOUT</code></td>
<td>Alert me when I can <code>send()</code> data to this socket without blo=
cking.</td>
</tr>
</tbody>
</table>
<p>Once you have your array of <code>struct pollfd</code>s in order, then y=
ou can pass it to <code>poll()</code>, also passing the size of the array, =
as well as a timeout value in milliseconds. (You can specify a negative tim=
eout to wait forever.)</p>
<p>After <code>poll()</code> returns, you can check the <code>revents</code=
> field to see if <code>POLLIN</code> or <code>POLLOUT</code> is set, indic=
ating that event occurred.</p>
<p>(There=E2=80=99s actually more that you can do with the <code>poll()</co=
de> call. See the <a href=3D"https://beej.us/guide/bgnet/html/#pollman"><co=
de>poll()</code> man page, below</a>, for more details.)</p>
<p>Here=E2=80=99s <a href=3D"https://beej.us/guide/bgnet/examples/poll.c">a=
n example</a><a href=3D"https://beej.us/guide/bgnet/html/#fn28" class=3D"fo=
otnote-ref" id=3D"fnref28" role=3D"doc-noteref"><sup>28</sup></a> where we=
=E2=80=99ll wait 2.5 seconds for data to be ready to read from standard inp=
ut, i.e.&nbsp;when you hit <code>RETURN</code>:</p>
<div class=3D"sourceCode" id=3D"cb53"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb53-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb53-1"></a><span class=3D"pp">#include =
</span><span class=3D"im">&lt;stdio.h&gt;</span></span>
<span id=3D"cb53-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-2"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;poll.h&gt;</spa=
n></span>
<span id=3D"cb53-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-3"></=
a></span>
<span id=3D"cb53-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-4"></=
a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</span>
<span id=3D"cb53-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-5"></=
a>{</span>
<span id=3D"cb53-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-6"></=
a>    <span class=3D"kw">struct</span> pollfd pfds[<span class=3D"dv">1</sp=
an>]; <span class=3D"co">// More if you want to monitor more</span></span>
<span id=3D"cb53-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-7"></=
a></span>
<span id=3D"cb53-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-8"></=
a>    pfds[<span class=3D"dv">0</span>].fd =3D <span class=3D"dv">0</span>;=
          <span class=3D"co">// Standard input</span></span>
<span id=3D"cb53-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-9"></=
a>    pfds[<span class=3D"dv">0</span>].events =3D POLLIN; <span class=3D"c=
o">// Tell me when ready to read</span></span>
<span id=3D"cb53-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-10">=
</a></span>
<span id=3D"cb53-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-11">=
</a>    <span class=3D"co">// If you needed to monitor other things, as wel=
l:</span></span>
<span id=3D"cb53-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-12">=
</a>    <span class=3D"co">//pfds[1].fd =3D some_socket; // Some socket des=
criptor</span></span>
<span id=3D"cb53-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-13">=
</a>    <span class=3D"co">//pfds[1].events =3D POLLIN;  // Tell me when re=
ady to read</span></span>
<span id=3D"cb53-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-14">=
</a></span>
<span id=3D"cb53-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-15">=
</a>    printf(<span class=3D"st">"Hit RETURN or wait 2.5 seconds for timeo=
ut</span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb53-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-16">=
</a></span>
<span id=3D"cb53-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-17">=
</a>    <span class=3D"dt">int</span> num_events =3D poll(pfds, <span class=
=3D"dv">1</span>, <span class=3D"dv">2500</span>); <span class=3D"co">// 2.=
5 second timeout</span></span>
<span id=3D"cb53-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-18">=
</a></span>
<span id=3D"cb53-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-19">=
</a>    <span class=3D"cf">if</span> (num_events =3D=3D <span class=3D"dv">=
0</span>) {</span>
<span id=3D"cb53-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-20">=
</a>        printf(<span class=3D"st">"Poll timed out!</span><span class=3D=
"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb53-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-21">=
</a>    } <span class=3D"cf">else</span> {</span>
<span id=3D"cb53-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-22">=
</a>        <span class=3D"dt">int</span> pollin_happened =3D pfds[<span cl=
ass=3D"dv">0</span>].revents &amp; POLLIN;</span>
<span id=3D"cb53-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-23">=
</a></span>
<span id=3D"cb53-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-24">=
</a>        <span class=3D"cf">if</span> (pollin_happened) {</span>
<span id=3D"cb53-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-25">=
</a>            printf(<span class=3D"st">"File descriptor %d is ready to r=
ead</span><span class=3D"sc">\n</span><span class=3D"st">"</span>, pfds[<sp=
an class=3D"dv">0</span>].fd);</span>
<span id=3D"cb53-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-26">=
</a>        } <span class=3D"cf">else</span> {</span>
<span id=3D"cb53-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-27">=
</a>            printf(<span class=3D"st">"Unexpected event occurred: %d</s=
pan><span class=3D"sc">\n</span><span class=3D"st">"</span>, pfds[<span cla=
ss=3D"dv">0</span>].revents);</span>
<span id=3D"cb53-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-28">=
</a>        }</span>
<span id=3D"cb53-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-29">=
</a>    }</span>
<span id=3D"cb53-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-30">=
</a></span>
<span id=3D"cb53-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-31">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb53-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb53-32">=
</a>}</span></code></pre></div>
<p>Notice again that <code>poll()</code> returns the number of elements in =
the <code>pfds</code> array for which events have occurred. It doesn=E2=80=
=99t tell you <em>which</em> elements in the array (you still have to scan =
for that), but it does tell you how many entries have a non-zero <code>reve=
nts</code> field (so you can stop scanning after you find that many).</p>
<p>A couple questions might come up here: how to add new file descriptors t=
o the set I pass to <code>poll()</code>? For this, simply make sure you hav=
e enough space in the array for all you need, or <code>realloc()</code> mor=
e space as needed.</p>
<p>What about deleting items from the set? For this, you can copy the last =
element in the array over-top the one you=E2=80=99re deleting. And then pas=
s in one fewer as the count to <code>poll()</code>. Another option is that =
you can set any <code>fd</code> field to a negative number and <code>poll()=
</code> will ignore it.</p>
<p>How can we put it all together into a chat server that you can <code>tel=
net</code> to?</p>
<p>What we=E2=80=99ll do is start a listener socket, and add it to the set =
of file descriptors to <code>poll()</code>. (It will show ready-to-read whe=
n there=E2=80=99s an incoming connection.)</p>
<p>Then we=E2=80=99ll add new connections to our <code>struct pollfd</code>=
 array. And we=E2=80=99ll grow it dynamically if we run out of space.</p>
<p>When a connection is closed, we=E2=80=99ll remove it from the array.</p>
<p>And when a connection is ready-to-read, we=E2=80=99ll read the data from=
 it and send that data to all the other connections so they can see what th=
e other users typed.</p>
<p>So give <a href=3D"https://beej.us/guide/bgnet/examples/pollserver.c">th=
is poll server</a><a href=3D"https://beej.us/guide/bgnet/html/#fn29" class=
=3D"footnote-ref" id=3D"fnref29" role=3D"doc-noteref"><sup>29</sup></a> a t=
ry. Run it in one window, then <code>telnet localhost 9034</code> from a nu=
mber of other terminal windows. You should be able to see what you type in =
one window in the other ones (after you hit RETURN).</p>
<p>Not only that, but if you hit <code>CTRL-]</code> and type <code>quit</c=
ode> to exit <code>telnet</code>, the server should detect the disconnectio=
n and remove you from the array of file descriptors.</p>
<div class=3D"sourceCode" id=3D"cb54"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb54-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb54-1"></a><span class=3D"co">/*</span>=
</span>
<span id=3D"cb54-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-2"></=
a><span class=3D"co">** pollserver.c -- a cheezy multiperson chat server</s=
pan></span>
<span id=3D"cb54-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-3"></=
a><span class=3D"co">*/</span></span>
<span id=3D"cb54-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-4"></=
a></span>
<span id=3D"cb54-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-5"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb54-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdlib.h&gt;</s=
pan></span>
<span id=3D"cb54-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;string.h&gt;</s=
pan></span>
<span id=3D"cb54-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</s=
pan></span>
<span id=3D"cb54-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-9"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;=
</span></span>
<span id=3D"cb54-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-10">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&=
gt;</span></span>
<span id=3D"cb54-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-11">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&=
gt;</span></span>
<span id=3D"cb54-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-12">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&g=
t;</span></span>
<span id=3D"cb54-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-13">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</=
span></span>
<span id=3D"cb54-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-14">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;poll.h&gt;</s=
pan></span>
<span id=3D"cb54-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-15">=
</a></span>
<span id=3D"cb54-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-16">=
</a><span class=3D"pp">#define PORT "9034"   </span><span class=3D"co">// P=
ort we're listening on</span></span>
<span id=3D"cb54-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-17">=
</a></span>
<span id=3D"cb54-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-18">=
</a><span class=3D"co">// Get sockaddr, IPv4 or IPv6:</span></span>
<span id=3D"cb54-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-19">=
</a><span class=3D"dt">void</span> *get_in_addr(<span class=3D"kw">struct</=
span> sockaddr *sa)</span>
<span id=3D"cb54-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-20">=
</a>{</span>
<span id=3D"cb54-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-21">=
</a>    <span class=3D"cf">if</span> (sa-&gt;sa_family =3D=3D AF_INET) {</s=
pan>
<span id=3D"cb54-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-22">=
</a>        <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">str=
uct</span> sockaddr_in*)sa)-&gt;sin_addr);</span>
<span id=3D"cb54-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-23">=
</a>    }</span>
<span id=3D"cb54-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-24">=
</a></span>
<span id=3D"cb54-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-25">=
</a>    <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">struct<=
/span> sockaddr_in6*)sa)-&gt;sin6_addr);</span>
<span id=3D"cb54-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-26">=
</a>}</span>
<span id=3D"cb54-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-27">=
</a></span>
<span id=3D"cb54-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-28">=
</a><span class=3D"co">// Return a listening socket</span></span>
<span id=3D"cb54-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-29">=
</a><span class=3D"dt">int</span> get_listener_socket(<span class=3D"dt">vo=
id</span>)</span>
<span id=3D"cb54-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-30">=
</a>{</span>
<span id=3D"cb54-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-31">=
</a>    <span class=3D"dt">int</span> listener;     <span class=3D"co">// L=
istening socket descriptor</span></span>
<span id=3D"cb54-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-32">=
</a>    <span class=3D"dt">int</span> yes=3D<span class=3D"dv">1</span>;   =
     <span class=3D"co">// For setsockopt() SO_REUSEADDR, below</span></spa=
n>
<span id=3D"cb54-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-33">=
</a>    <span class=3D"dt">int</span> rv;</span>
<span id=3D"cb54-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-34">=
</a></span>
<span id=3D"cb54-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-35">=
</a>    <span class=3D"kw">struct</span> addrinfo hints, *ai, *p;</span>
<span id=3D"cb54-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-36">=
</a></span>
<span id=3D"cb54-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-37">=
</a>    <span class=3D"co">// Get us a socket and bind it</span></span>
<span id=3D"cb54-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-38">=
</a>    memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">=
sizeof</span> hints);</span>
<span id=3D"cb54-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-39">=
</a>    hints.ai_family =3D AF_UNSPEC;</span>
<span id=3D"cb54-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-40">=
</a>    hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb54-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-41">=
</a>    hints.ai_flags =3D AI_PASSIVE;</span>
<span id=3D"cb54-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-42">=
</a>    <span class=3D"cf">if</span> ((rv =3D getaddrinfo(NULL, PORT, &amp;=
hints, &amp;ai)) !=3D <span class=3D"dv">0</span>) {</span>
<span id=3D"cb54-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-43">=
</a>        fprintf(stderr, <span class=3D"st">"selectserver: %s</span><spa=
n class=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(rv));</sp=
an>
<span id=3D"cb54-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-44">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb54-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-45">=
</a>    }</span>
<span id=3D"cb54-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-46">=
</a>    </span>
<span id=3D"cb54-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-47">=
</a>    <span class=3D"cf">for</span>(p =3D ai; p !=3D NULL; p =3D p-&gt;ai=
_next) {</span>
<span id=3D"cb54-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-48">=
</a>        listener =3D socket(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;a=
i_protocol);</span>
<span id=3D"cb54-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-49">=
</a>        <span class=3D"cf">if</span> (listener &lt; <span class=3D"dv">=
0</span>) { </span>
<span id=3D"cb54-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-50">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb54-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-51">=
</a>        }</span>
<span id=3D"cb54-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-52">=
</a>        </span>
<span id=3D"cb54-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-53">=
</a>        <span class=3D"co">// Lose the pesky "address already in use" e=
rror message</span></span>
<span id=3D"cb54-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-54">=
</a>        setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span =
class=3D"kw">sizeof</span>(<span class=3D"dt">int</span>));</span>
<span id=3D"cb54-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-55">=
</a></span>
<span id=3D"cb54-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-56">=
</a>        <span class=3D"cf">if</span> (bind(listener, p-&gt;ai_addr, p-&=
gt;ai_addrlen) &lt; <span class=3D"dv">0</span>) {</span>
<span id=3D"cb54-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-57">=
</a>            close(listener);</span>
<span id=3D"cb54-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-58">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb54-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-59">=
</a>        }</span>
<span id=3D"cb54-60"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-60">=
</a></span>
<span id=3D"cb54-61"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-61">=
</a>        <span class=3D"cf">break</span>;</span>
<span id=3D"cb54-62"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-62">=
</a>    }</span>
<span id=3D"cb54-63"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-63">=
</a></span>
<span id=3D"cb54-64"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-64">=
</a>    freeaddrinfo(ai); <span class=3D"co">// All done with this</span></=
span>
<span id=3D"cb54-65"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-65">=
</a></span>
<span id=3D"cb54-66"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-66">=
</a>    <span class=3D"co">// If we got here, it means we didn't get bound<=
/span></span>
<span id=3D"cb54-67"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-67">=
</a>    <span class=3D"cf">if</span> (p =3D=3D NULL) {</span>
<span id=3D"cb54-68"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-68">=
</a>        <span class=3D"cf">return</span> -<span class=3D"dv">1</span>;<=
/span>
<span id=3D"cb54-69"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-69">=
</a>    }</span>
<span id=3D"cb54-70"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-70">=
</a></span>
<span id=3D"cb54-71"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-71">=
</a>    <span class=3D"co">// Listen</span></span>
<span id=3D"cb54-72"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-72">=
</a>    <span class=3D"cf">if</span> (listen(listener, <span class=3D"dv">1=
0</span>) =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb54-73"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-73">=
</a>        <span class=3D"cf">return</span> -<span class=3D"dv">1</span>;<=
/span>
<span id=3D"cb54-74"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-74">=
</a>    }</span>
<span id=3D"cb54-75"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-75">=
</a></span>
<span id=3D"cb54-76"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-76">=
</a>    <span class=3D"cf">return</span> listener;</span>
<span id=3D"cb54-77"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-77">=
</a>}</span>
<span id=3D"cb54-78"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-78">=
</a></span>
<span id=3D"cb54-79"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-79">=
</a><span class=3D"co">// Add a new file descriptor to the set</span></span=
>
<span id=3D"cb54-80"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-80">=
</a><span class=3D"dt">void</span> add_to_pfds(<span class=3D"kw">struct</s=
pan> pollfd *pfds[], <span class=3D"dt">int</span> newfd, <span class=3D"dt=
">int</span> *fd_count, <span class=3D"dt">int</span> *fd_size)</span>
<span id=3D"cb54-81"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-81">=
</a>{</span>
<span id=3D"cb54-82"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-82">=
</a>    <span class=3D"co">// If we don't have room, add more space in the =
pfds array</span></span>
<span id=3D"cb54-83"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-83">=
</a>    <span class=3D"cf">if</span> (*fd_count =3D=3D *fd_size) {</span>
<span id=3D"cb54-84"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-84">=
</a>        *fd_size *=3D <span class=3D"dv">2</span>; <span class=3D"co">/=
/ Double it</span></span>
<span id=3D"cb54-85"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-85">=
</a></span>
<span id=3D"cb54-86"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-86">=
</a>        *pfds =3D realloc(*pfds, <span class=3D"kw">sizeof</span>(**pfd=
s) * (*fd_size));</span>
<span id=3D"cb54-87"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-87">=
</a>    }</span>
<span id=3D"cb54-88"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-88">=
</a></span>
<span id=3D"cb54-89"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-89">=
</a>    (*pfds)[*fd_count].fd =3D newfd;</span>
<span id=3D"cb54-90"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-90">=
</a>    (*pfds)[*fd_count].events =3D POLLIN; <span class=3D"co">// Check r=
eady-to-read</span></span>
<span id=3D"cb54-91"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-91">=
</a></span>
<span id=3D"cb54-92"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-92">=
</a>    (*fd_count)++;</span>
<span id=3D"cb54-93"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-93">=
</a>}</span>
<span id=3D"cb54-94"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-94">=
</a></span>
<span id=3D"cb54-95"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-95">=
</a><span class=3D"co">// Remove an index from the set</span></span>
<span id=3D"cb54-96"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-96">=
</a><span class=3D"dt">void</span> del_from_pfds(<span class=3D"kw">struct<=
/span> pollfd pfds[], <span class=3D"dt">int</span> i, <span class=3D"dt">i=
nt</span> *fd_count)</span>
<span id=3D"cb54-97"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-97">=
</a>{</span>
<span id=3D"cb54-98"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-98">=
</a>    <span class=3D"co">// Copy the one from the end over this one</span=
></span>
<span id=3D"cb54-99"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-99">=
</a>    pfds[i] =3D pfds[*fd_count-<span class=3D"dv">1</span>];</span>
<span id=3D"cb54-100"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-100=
"></a></span>
<span id=3D"cb54-101"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-101=
"></a>    (*fd_count)--;</span>
<span id=3D"cb54-102"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-102=
"></a>}</span>
<span id=3D"cb54-103"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-103=
"></a></span>
<span id=3D"cb54-104"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-104=
"></a><span class=3D"co">// Main</span></span>
<span id=3D"cb54-105"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-105=
"></a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</s=
pan>
<span id=3D"cb54-106"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-106=
"></a>{</span>
<span id=3D"cb54-107"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-107=
"></a>    <span class=3D"dt">int</span> listener;     <span class=3D"co">//=
 Listening socket descriptor</span></span>
<span id=3D"cb54-108"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-108=
"></a></span>
<span id=3D"cb54-109"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-109=
"></a>    <span class=3D"dt">int</span> newfd;        <span class=3D"co">//=
 Newly accept()ed socket descriptor</span></span>
<span id=3D"cb54-110"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-110=
"></a>    <span class=3D"kw">struct</span> sockaddr_storage remoteaddr; <sp=
an class=3D"co">// Client address</span></span>
<span id=3D"cb54-111"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-111=
"></a>    socklen_t addrlen;</span>
<span id=3D"cb54-112"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-112=
"></a></span>
<span id=3D"cb54-113"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-113=
"></a>    <span class=3D"dt">char</span> buf[<span class=3D"dv">256</span>]=
;    <span class=3D"co">// Buffer for client data</span></span>
<span id=3D"cb54-114"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-114=
"></a></span>
<span id=3D"cb54-115"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-115=
"></a>    <span class=3D"dt">char</span> remoteIP[INET6_ADDRSTRLEN];</span>
<span id=3D"cb54-116"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-116=
"></a></span>
<span id=3D"cb54-117"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-117=
"></a>    <span class=3D"co">// Start off with room for 5 connections</span=
></span>
<span id=3D"cb54-118"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-118=
"></a>    <span class=3D"co">// (We'll realloc as necessary)</span></span>
<span id=3D"cb54-119"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-119=
"></a>    <span class=3D"dt">int</span> fd_count =3D <span class=3D"dv">0</=
span>;</span>
<span id=3D"cb54-120"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-120=
"></a>    <span class=3D"dt">int</span> fd_size =3D <span class=3D"dv">5</s=
pan>;</span>
<span id=3D"cb54-121"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-121=
"></a>    <span class=3D"kw">struct</span> pollfd *pfds =3D malloc(<span cl=
ass=3D"kw">sizeof</span> *pfds * fd_size);</span>
<span id=3D"cb54-122"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-122=
"></a></span>
<span id=3D"cb54-123"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-123=
"></a>    <span class=3D"co">// Set up and get a listening socket</span></s=
pan>
<span id=3D"cb54-124"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-124=
"></a>    listener =3D get_listener_socket();</span>
<span id=3D"cb54-125"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-125=
"></a></span>
<span id=3D"cb54-126"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-126=
"></a>    <span class=3D"cf">if</span> (listener =3D=3D -<span class=3D"dv"=
>1</span>) {</span>
<span id=3D"cb54-127"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-127=
"></a>        fprintf(stderr, <span class=3D"st">"error getting listening s=
ocket</span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span=
>
<span id=3D"cb54-128"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-128=
"></a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb54-129"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-129=
"></a>    }</span>
<span id=3D"cb54-130"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-130=
"></a></span>
<span id=3D"cb54-131"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-131=
"></a>    <span class=3D"co">// Add the listener to set</span></span>
<span id=3D"cb54-132"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-132=
"></a>    pfds[<span class=3D"dv">0</span>].fd =3D listener;</span>
<span id=3D"cb54-133"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-133=
"></a>    pfds[<span class=3D"dv">0</span>].events =3D POLLIN; <span class=
=3D"co">// Report ready to read on incoming connection</span></span>
<span id=3D"cb54-134"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-134=
"></a></span>
<span id=3D"cb54-135"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-135=
"></a>    fd_count =3D <span class=3D"dv">1</span>; <span class=3D"co">// F=
or the listener</span></span>
<span id=3D"cb54-136"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-136=
"></a></span>
<span id=3D"cb54-137"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-137=
"></a>    <span class=3D"co">// Main loop</span></span>
<span id=3D"cb54-138"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-138=
"></a>    <span class=3D"cf">for</span>(;;) {</span>
<span id=3D"cb54-139"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-139=
"></a>        <span class=3D"dt">int</span> poll_count =3D poll(pfds, fd_co=
unt, -<span class=3D"dv">1</span>);</span>
<span id=3D"cb54-140"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-140=
"></a></span>
<span id=3D"cb54-141"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-141=
"></a>        <span class=3D"cf">if</span> (poll_count =3D=3D -<span class=
=3D"dv">1</span>) {</span>
<span id=3D"cb54-142"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-142=
"></a>            perror(<span class=3D"st">"poll"</span>);</span>
<span id=3D"cb54-143"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-143=
"></a>            exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb54-144"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-144=
"></a>        }</span>
<span id=3D"cb54-145"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-145=
"></a></span>
<span id=3D"cb54-146"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-146=
"></a>        <span class=3D"co">// Run through the existing connections lo=
oking for data to read</span></span>
<span id=3D"cb54-147"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-147=
"></a>        <span class=3D"cf">for</span>(<span class=3D"dt">int</span> i=
 =3D <span class=3D"dv">0</span>; i &lt; fd_count; i++) {</span>
<span id=3D"cb54-148"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-148=
"></a></span>
<span id=3D"cb54-149"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-149=
"></a>            <span class=3D"co">// Check if someone's ready to read</s=
pan></span>
<span id=3D"cb54-150"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-150=
"></a>            <span class=3D"cf">if</span> (pfds[i].revents &amp; POLLI=
N) { <span class=3D"co">// We got one!!</span></span>
<span id=3D"cb54-151"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-151=
"></a></span>
<span id=3D"cb54-152"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-152=
"></a>                <span class=3D"cf">if</span> (pfds[i].fd =3D=3D liste=
ner) {</span>
<span id=3D"cb54-153"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-153=
"></a>                    <span class=3D"co">// If listener is ready to rea=
d, handle new connection</span></span>
<span id=3D"cb54-154"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-154=
"></a></span>
<span id=3D"cb54-155"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-155=
"></a>                    addrlen =3D <span class=3D"kw">sizeof</span> remo=
teaddr;</span>
<span id=3D"cb54-156"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-156=
"></a>                    newfd =3D accept(listener,</span>
<span id=3D"cb54-157"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-157=
"></a>                        (<span class=3D"kw">struct</span> sockaddr *)=
&amp;remoteaddr,</span>
<span id=3D"cb54-158"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-158=
"></a>                        &amp;addrlen);</span>
<span id=3D"cb54-159"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-159=
"></a></span>
<span id=3D"cb54-160"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-160=
"></a>                    <span class=3D"cf">if</span> (newfd =3D=3D -<span=
 class=3D"dv">1</span>) {</span>
<span id=3D"cb54-161"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-161=
"></a>                        perror(<span class=3D"st">"accept"</span>);</=
span>
<span id=3D"cb54-162"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-162=
"></a>                    } <span class=3D"cf">else</span> {</span>
<span id=3D"cb54-163"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-163=
"></a>                        add_to_pfds(&amp;pfds, newfd, &amp;fd_count, =
&amp;fd_size);</span>
<span id=3D"cb54-164"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-164=
"></a></span>
<span id=3D"cb54-165"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-165=
"></a>                        printf(<span class=3D"st">"pollserver: new co=
nnection from %s on "</span></span>
<span id=3D"cb54-166"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-166=
"></a>                            <span class=3D"st">"socket %d</span><span=
 class=3D"sc">\n</span><span class=3D"st">"</span>,</span>
<span id=3D"cb54-167"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-167=
"></a>                            inet_ntop(remoteaddr.ss_family,</span>
<span id=3D"cb54-168"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-168=
"></a>                                get_in_addr((<span class=3D"kw">struc=
t</span> sockaddr*)&amp;remoteaddr),</span>
<span id=3D"cb54-169"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-169=
"></a>                                remoteIP, INET6_ADDRSTRLEN),</span>
<span id=3D"cb54-170"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-170=
"></a>                            newfd);</span>
<span id=3D"cb54-171"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-171=
"></a>                    }</span>
<span id=3D"cb54-172"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-172=
"></a>                } <span class=3D"cf">else</span> {</span>
<span id=3D"cb54-173"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-173=
"></a>                    <span class=3D"co">// If not the listener, we're =
just a regular client</span></span>
<span id=3D"cb54-174"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-174=
"></a>                    <span class=3D"dt">int</span> nbytes =3D recv(pfd=
s[i].fd, buf, <span class=3D"kw">sizeof</span> buf, <span class=3D"dv">0</s=
pan>);</span>
<span id=3D"cb54-175"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-175=
"></a></span>
<span id=3D"cb54-176"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-176=
"></a>                    <span class=3D"dt">int</span> sender_fd =3D pfds[=
i].fd;</span>
<span id=3D"cb54-177"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-177=
"></a></span>
<span id=3D"cb54-178"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-178=
"></a>                    <span class=3D"cf">if</span> (nbytes &lt;=3D <spa=
n class=3D"dv">0</span>) {</span>
<span id=3D"cb54-179"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-179=
"></a>                        <span class=3D"co">// Got error or connection=
 closed by client</span></span>
<span id=3D"cb54-180"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-180=
"></a>                        <span class=3D"cf">if</span> (nbytes =3D=3D <=
span class=3D"dv">0</span>) {</span>
<span id=3D"cb54-181"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-181=
"></a>                            <span class=3D"co">// Connection closed</=
span></span>
<span id=3D"cb54-182"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-182=
"></a>                            printf(<span class=3D"st">"pollserver: so=
cket %d hung up</span><span class=3D"sc">\n</span><span class=3D"st">"</spa=
n>, sender_fd);</span>
<span id=3D"cb54-183"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-183=
"></a>                        } <span class=3D"cf">else</span> {</span>
<span id=3D"cb54-184"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-184=
"></a>                            perror(<span class=3D"st">"recv"</span>);=
</span>
<span id=3D"cb54-185"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-185=
"></a>                        }</span>
<span id=3D"cb54-186"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-186=
"></a></span>
<span id=3D"cb54-187"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-187=
"></a>                        close(pfds[i].fd); <span class=3D"co">// Bye!=
</span></span>
<span id=3D"cb54-188"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-188=
"></a></span>
<span id=3D"cb54-189"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-189=
"></a>                        del_from_pfds(pfds, i, &amp;fd_count);</span>
<span id=3D"cb54-190"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-190=
"></a></span>
<span id=3D"cb54-191"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-191=
"></a>                    } <span class=3D"cf">else</span> {</span>
<span id=3D"cb54-192"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-192=
"></a>                        <span class=3D"co">// We got some good data f=
rom a client</span></span>
<span id=3D"cb54-193"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-193=
"></a></span>
<span id=3D"cb54-194"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-194=
"></a>                        <span class=3D"cf">for</span>(<span class=3D"=
dt">int</span> j =3D <span class=3D"dv">0</span>; j &lt; fd_count; j++) {</=
span>
<span id=3D"cb54-195"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-195=
"></a>                            <span class=3D"co">// Send to everyone!</=
span></span>
<span id=3D"cb54-196"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-196=
"></a>                            <span class=3D"dt">int</span> dest_fd =3D=
 pfds[j].fd;</span>
<span id=3D"cb54-197"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-197=
"></a></span>
<span id=3D"cb54-198"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-198=
"></a>                            <span class=3D"co">// Except the listener=
 and ourselves</span></span>
<span id=3D"cb54-199"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-199=
"></a>                            <span class=3D"cf">if</span> (dest_fd !=
=3D listener &amp;&amp; dest_fd !=3D sender_fd) {</span>
<span id=3D"cb54-200"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-200=
"></a>                                <span class=3D"cf">if</span> (send(de=
st_fd, buf, nbytes, <span class=3D"dv">0</span>) =3D=3D -<span class=3D"dv"=
>1</span>) {</span>
<span id=3D"cb54-201"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-201=
"></a>                                    perror(<span class=3D"st">"send"<=
/span>);</span>
<span id=3D"cb54-202"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-202=
"></a>                                }</span>
<span id=3D"cb54-203"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-203=
"></a>                            }</span>
<span id=3D"cb54-204"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-204=
"></a>                        }</span>
<span id=3D"cb54-205"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-205=
"></a>                    }</span>
<span id=3D"cb54-206"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-206=
"></a>                } <span class=3D"co">// </span><span class=3D"re">END=
</span><span class=3D"co"> handle data from client</span></span>
<span id=3D"cb54-207"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-207=
"></a>            } <span class=3D"co">// </span><span class=3D"re">END</sp=
an><span class=3D"co"> got ready-to-read from poll()</span></span>
<span id=3D"cb54-208"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-208=
"></a>        } <span class=3D"co">// </span><span class=3D"re">END</span><=
span class=3D"co"> looping through file descriptors</span></span>
<span id=3D"cb54-209"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-209=
"></a>    } <span class=3D"co">// </span><span class=3D"re">END</span><span=
 class=3D"co"> for(;;)--and you thought it would never end!</span></span>
<span id=3D"cb54-210"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-210=
"></a>    </span>
<span id=3D"cb54-211"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-211=
"></a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</sp=
an>
<span id=3D"cb54-212"><a href=3D"https://beej.us/guide/bgnet/html/#cb54-212=
"></a>}</span></code></pre></div>
<p>In the next section, we=E2=80=99ll look at a similar, older function cal=
led <code>select()</code>. Both <code>select()</code> and <code>poll()</cod=
e> offer similar functionality and performance, and only really differ in h=
ow they=E2=80=99re used. <code>select()</code> might be slightly more porta=
ble, but is perhaps a little clunkier in use. Choose the one you like the b=
est, as long as it=E2=80=99s supported on your system.</p>
<h2 data-number=3D"7.3" id=3D"select"><span class=3D"header-section-number"=
>7.3</span> <code>select()</code>=E2=80=94Synchronous I/O Multiplexing, Old=
 School</h2>
<p> This function is somewhat strange, but it=E2=80=99s very useful. Take t=
he following situation: you are a server and you want to listen for incomin=
g connections as well as keep reading from the connections you already have=
.</p>
<p>No problem, you say, just an <code>accept()</code> and a couple of <code=
>recv()</code>s. Not so fast, buster! What if you=E2=80=99re blocking on an=
 <code>accept()</code> call? How are you going to <code>recv()</code> data =
at the same time? =E2=80=9CUse non-blocking sockets!=E2=80=9D No way! You d=
on=E2=80=99t want to be a CPU hog. What, then?</p>
<p><code>select()</code> gives you the power to monitor several sockets at =
the same time. It=E2=80=99ll tell you which ones are ready for reading, whi=
ch are ready for writing, and which sockets have raised exceptions, if you =
really want to know that.</p>
<blockquote>
<p><em>A word of warning: <code>select()</code>, though very portable, is t=
erribly slow when it comes to giant numbers of connections. In those circum=
stances, you=E2=80=99ll get better performance out of an event library such=
 as <a href=3D"https://libevent.org/">libevent</a><a href=3D"https://beej.u=
s/guide/bgnet/html/#fn30" class=3D"footnote-ref" id=3D"fnref30" role=3D"doc=
-noteref"><sup>30</sup></a> that attempts to use the fastest possible metho=
d availabile on your system.</em></p>
</blockquote>
<p>Without any further ado, I=E2=80=99ll offer the synopsis of <code>select=
()</code>:</p>
<div class=3D"sourceCode" id=3D"cb55"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb55-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb55-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/time.h&gt;</span></span>
<span id=3D"cb55-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb55-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/types.h&gt;</span></span>
<span id=3D"cb55-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb55-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;unistd.h&gt;</span></span>
<span id=3D"cb55-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb55-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb55-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb55-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> se=
lect(<span class=3D"dt">int</span> numfds, fd_set *readfds, fd_set *writefd=
s,</span>
<span id=3D"cb55-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb55-6" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>               fd_set *exceptfds, <s=
pan class=3D"kw">struct</span> timeval *timeout); </span></code></pre></div=
>
<p>The function monitors =E2=80=9Csets=E2=80=9D of file descriptors; in par=
ticular <code>readfds</code>, <code>writefds</code>, and <code>exceptfds</c=
ode>. If you want to see if you can read from standard input and some socke=
t descriptor, <code>sockfd</code>, just add the file descriptors <code>0</c=
ode> and <code>sockfd</code> to the set <code>readfds</code>. The parameter=
 <code>numfds</code> should be set to the values of the highest file descri=
ptor plus one. In this example, it should be set to <code>sockfd+1</code>, =
since it is assuredly higher than standard input (<code>0</code>).</p>
<p>When <code>select()</code> returns, <code>readfds</code> will be modifie=
d to reflect which of the file descriptors you selected which is ready for =
reading. You can test them with the macro <code>FD_ISSET()</code>, below.</=
p>
<p>Before progressing much further, I=E2=80=99ll talk about how to manipula=
te these sets. Each set is of the type <code>fd_set</code>. The following m=
acros operate on this type:</p>
<p>   </p>
<table>
<thead>
<tr class=3D"header">
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>FD_SET(int fd, fd_set *set);</code></td>
<td>Add <code>fd</code> to the <code>set</code>.</td>
</tr>
<tr class=3D"even">
<td><code>FD_CLR(int fd, fd_set *set);</code></td>
<td>Remove <code>fd</code> from the <code>set</code>.</td>
</tr>
<tr class=3D"odd">
<td><code>FD_ISSET(int fd, fd_set *set);</code></td>
<td>Return true if <code>fd</code> is in the <code>set</code>.</td>
</tr>
<tr class=3D"even">
<td><code>FD_ZERO(fd_set *set);</code></td>
<td>Clear all entries from the <code>set</code>.</td>
</tr>
</tbody>
</table>
<p>Finally, what is this weirded out  <code>struct timeval</code>? Well, so=
metimes you don=E2=80=99t want to wait forever for someone to send you some=
 data. Maybe every 96 seconds you want to print =E2=80=9CStill Going=E2=80=
=A6=E2=80=9D to the terminal even though nothing has happened. This time st=
ructure allows you to specify a timeout period. If the time is exceeded and=
 <code>select()</code> still hasn=E2=80=99t found any ready file descriptor=
s, it=E2=80=99ll return so you can continue processing.</p>
<p>The <code>struct timeval</code> has the follow fields:</p>
<div class=3D"sourceCode" id=3D"cb56"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb56-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb56-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"kw">struct</span> timeval {</span>
<span id=3D"cb56-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb56-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int</span=
> tv_sec;     <span class=3D"co">// seconds</span></span>
<span id=3D"cb56-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb56-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int</span=
> tv_usec;    <span class=3D"co">// microseconds</span></span>
<span id=3D"cb56-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb56-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    }; </span></code></pre></div>
<p>Just set <code>tv_sec</code> to the number of seconds to wait, and set <=
code>tv_usec</code> to the number of microseconds to wait. Yes, that=E2=80=
=99s _micro_seconds, not milliseconds. There are 1,000 microseconds in a mi=
llisecond, and 1,000 milliseconds in a second. Thus, there are 1,000,000 mi=
croseconds in a second. Why is it =E2=80=9Cusec=E2=80=9D? The =E2=80=9Cu=E2=
=80=9D is supposed to look like the Greek letter =CE=BC (Mu) that we use fo=
r =E2=80=9Cmicro=E2=80=9D. Also, when the function returns, <code>timeout</=
code> <em>might</em> be updated to show the time still remaining. This depe=
nds on what flavor of Unix you=E2=80=99re running.</p>
<p>Yay! We have a microsecond resolution timer! Well, don=E2=80=99t count o=
n it. You=E2=80=99ll probably have to wait some part of your standard Unix =
timeslice no matter how small you set your <code>struct timeval</code>.</p>
<p>Other things of interest: If you set the fields in your <code>struct tim=
eval</code> to <code>0</code>, <code>select()</code> will timeout immediate=
ly, effectively polling all the file descriptors in your sets. If you set t=
he parameter <code>timeout</code> to NULL, it will never timeout, and will =
wait until the first file descriptor is ready. Finally, if you don=E2=80=99=
t care about waiting for a certain set, you can just set it to NULL in the =
call to <code>select()</code>.</p>
<p><a href=3D"https://beej.us/guide/bgnet/examples/select.c">The following =
code snippet</a><a href=3D"https://beej.us/guide/bgnet/html/#fn31" class=3D=
"footnote-ref" id=3D"fnref31" role=3D"doc-noteref"><sup>31</sup></a> waits =
2.5 seconds for something to appear on standard input:</p>
<div class=3D"sourceCode" id=3D"cb57"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb57-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb57-1"></a><span class=3D"co">/*</span>=
</span>
<span id=3D"cb57-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-2"></=
a><span class=3D"co">** select.c -- a select() demo</span></span>
<span id=3D"cb57-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-3"></=
a><span class=3D"co">*/</span></span>
<span id=3D"cb57-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-4"></=
a></span>
<span id=3D"cb57-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-5"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb57-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/time.h&gt;<=
/span></span>
<span id=3D"cb57-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;=
</span></span>
<span id=3D"cb57-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</s=
pan></span>
<span id=3D"cb57-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-9"></=
a></span>
<span id=3D"cb57-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-10">=
</a><span class=3D"pp">#define STDIN 0  </span><span class=3D"co">// file d=
escriptor for standard input</span></span>
<span id=3D"cb57-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-11">=
</a></span>
<span id=3D"cb57-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-12">=
</a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</spa=
n>
<span id=3D"cb57-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-13">=
</a>{</span>
<span id=3D"cb57-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-14">=
</a>    <span class=3D"kw">struct</span> timeval tv;</span>
<span id=3D"cb57-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-15">=
</a>    fd_set readfds;</span>
<span id=3D"cb57-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-16">=
</a></span>
<span id=3D"cb57-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-17">=
</a>    tv.tv_sec =3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb57-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-18">=
</a>    tv.tv_usec =3D <span class=3D"dv">500000</span>;</span>
<span id=3D"cb57-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-19">=
</a></span>
<span id=3D"cb57-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-20">=
</a>    FD_ZERO(&amp;readfds);</span>
<span id=3D"cb57-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-21">=
</a>    FD_SET(STDIN, &amp;readfds);</span>
<span id=3D"cb57-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-22">=
</a></span>
<span id=3D"cb57-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-23">=
</a>    <span class=3D"co">// don't care about writefds and exceptfds:</spa=
n></span>
<span id=3D"cb57-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-24">=
</a>    select(STDIN+<span class=3D"dv">1</span>, &amp;readfds, NULL, NULL,=
 &amp;tv);</span>
<span id=3D"cb57-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-25">=
</a></span>
<span id=3D"cb57-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-26">=
</a>    <span class=3D"cf">if</span> (FD_ISSET(STDIN, &amp;readfds))</span>
<span id=3D"cb57-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-27">=
</a>        printf(<span class=3D"st">"A key was pressed!</span><span class=
=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb57-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-28">=
</a>    <span class=3D"cf">else</span></span>
<span id=3D"cb57-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-29">=
</a>        printf(<span class=3D"st">"Timed out.</span><span class=3D"sc">=
\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb57-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-30">=
</a></span>
<span id=3D"cb57-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-31">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb57-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb57-32">=
</a>} </span></code></pre></div>
<p>If you=E2=80=99re on a line buffered terminal, the key you hit should be=
 RETURN or it will time out anyway.</p>
<p>Now, some of you might think this is a great way to wait for data on a d=
atagram socket=E2=80=94and you are right: it <em>might</em> be. Some Unices=
 can use select in this manner, and some can=E2=80=99t. You should see what=
 your local man page says on the matter if you want to attempt it.</p>
<p>Some Unices update the time in your <code>struct timeval</code> to refle=
ct the amount of time still remaining before a timeout. But others do not. =
Don=E2=80=99t rely on that occurring if you want to be portable. (Use  <cod=
e>gettimeofday()</code> if you need to track time elapsed. It=E2=80=99s a b=
ummer, I know, but that=E2=80=99s the way it is.)</p>
<p>What happens if a socket in the read set closes the connection? Well, in=
 that case, <code>select()</code> returns with that socket descriptor set a=
s =E2=80=9Cready to read=E2=80=9D. When you actually do <code>recv()</code>=
 from it, <code>recv()</code> will return <code>0</code>. That=E2=80=99s ho=
w you know the client has closed the connection.</p>
<p>One more note of interest about <code>select()</code>: if you have a soc=
ket that is   <code>listen()</code>ing, you can check to see if there is a =
new connection by putting that socket=E2=80=99s file descriptor in the <cod=
e>readfds</code> set.</p>
<p>And that, my friends, is a quick overview of the almighty <code>select()=
</code> function.</p>
<p>But, by popular demand, here is an in-depth example. Unfortunately, the =
difference between the dirt-simple example, above, and this one here is sig=
nificant. But have a look, then read the description that follows it.</p>
<p><a href=3D"https://beej.us/guide/bgnet/examples/selectserver.c">This pro=
gram</a><a href=3D"https://beej.us/guide/bgnet/html/#fn32" class=3D"footnot=
e-ref" id=3D"fnref32" role=3D"doc-noteref"><sup>32</sup></a> acts like a si=
mple multi-user chat server. Start it running in one window, then <code>tel=
net</code> to it (=E2=80=9C<code>telnet hostname 9034</code>=E2=80=9D) from=
 multiple other windows. When you type something in one <code>telnet</code>=
 session, it should appear in all the others.</p>
<div class=3D"sourceCode" id=3D"cb58"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb58-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb58-1"></a><span class=3D"co">/*</span>=
</span>
<span id=3D"cb58-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-2"></=
a><span class=3D"co">** selectserver.c -- a cheezy multiperson chat server<=
/span></span>
<span id=3D"cb58-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-3"></=
a><span class=3D"co">*/</span></span>
<span id=3D"cb58-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-4"></=
a></span>
<span id=3D"cb58-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-5"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb58-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdlib.h&gt;</s=
pan></span>
<span id=3D"cb58-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;string.h&gt;</s=
pan></span>
<span id=3D"cb58-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</s=
pan></span>
<span id=3D"cb58-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-9"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;=
</span></span>
<span id=3D"cb58-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-10">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&=
gt;</span></span>
<span id=3D"cb58-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-11">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&=
gt;</span></span>
<span id=3D"cb58-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-12">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&g=
t;</span></span>
<span id=3D"cb58-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-13">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</=
span></span>
<span id=3D"cb58-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-14">=
</a></span>
<span id=3D"cb58-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-15">=
</a><span class=3D"pp">#define PORT "9034"   </span><span class=3D"co">// p=
ort we're listening on</span></span>
<span id=3D"cb58-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-16">=
</a></span>
<span id=3D"cb58-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-17">=
</a><span class=3D"co">// get sockaddr, IPv4 or IPv6:</span></span>
<span id=3D"cb58-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-18">=
</a><span class=3D"dt">void</span> *get_in_addr(<span class=3D"kw">struct</=
span> sockaddr *sa)</span>
<span id=3D"cb58-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-19">=
</a>{</span>
<span id=3D"cb58-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-20">=
</a>    <span class=3D"cf">if</span> (sa-&gt;sa_family =3D=3D AF_INET) {</s=
pan>
<span id=3D"cb58-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-21">=
</a>        <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">str=
uct</span> sockaddr_in*)sa)-&gt;sin_addr);</span>
<span id=3D"cb58-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-22">=
</a>    }</span>
<span id=3D"cb58-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-23">=
</a></span>
<span id=3D"cb58-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-24">=
</a>    <span class=3D"cf">return</span> &amp;(((<span class=3D"kw">struct<=
/span> sockaddr_in6*)sa)-&gt;sin6_addr);</span>
<span id=3D"cb58-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-25">=
</a>}</span>
<span id=3D"cb58-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-26">=
</a></span>
<span id=3D"cb58-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-27">=
</a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</spa=
n>
<span id=3D"cb58-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-28">=
</a>{</span>
<span id=3D"cb58-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-29">=
</a>    fd_set master;    <span class=3D"co">// master file descriptor list=
</span></span>
<span id=3D"cb58-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-30">=
</a>    fd_set read_fds;  <span class=3D"co">// temp file descriptor list f=
or select()</span></span>
<span id=3D"cb58-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-31">=
</a>    <span class=3D"dt">int</span> fdmax;        <span class=3D"co">// m=
aximum file descriptor number</span></span>
<span id=3D"cb58-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-32">=
</a></span>
<span id=3D"cb58-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-33">=
</a>    <span class=3D"dt">int</span> listener;     <span class=3D"co">// l=
istening socket descriptor</span></span>
<span id=3D"cb58-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-34">=
</a>    <span class=3D"dt">int</span> newfd;        <span class=3D"co">// n=
ewly accept()ed socket descriptor</span></span>
<span id=3D"cb58-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-35">=
</a>    <span class=3D"kw">struct</span> sockaddr_storage remoteaddr; <span=
 class=3D"co">// client address</span></span>
<span id=3D"cb58-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-36">=
</a>    socklen_t addrlen;</span>
<span id=3D"cb58-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-37">=
</a></span>
<span id=3D"cb58-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-38">=
</a>    <span class=3D"dt">char</span> buf[<span class=3D"dv">256</span>]; =
   <span class=3D"co">// buffer for client data</span></span>
<span id=3D"cb58-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-39">=
</a>    <span class=3D"dt">int</span> nbytes;</span>
<span id=3D"cb58-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-40">=
</a></span>
<span id=3D"cb58-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-41">=
</a>    <span class=3D"dt">char</span> remoteIP[INET6_ADDRSTRLEN];</span>
<span id=3D"cb58-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-42">=
</a></span>
<span id=3D"cb58-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-43">=
</a>    <span class=3D"dt">int</span> yes=3D<span class=3D"dv">1</span>;   =
     <span class=3D"co">// for setsockopt() SO_REUSEADDR, below</span></spa=
n>
<span id=3D"cb58-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-44">=
</a>    <span class=3D"dt">int</span> i, j, rv;</span>
<span id=3D"cb58-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-45">=
</a></span>
<span id=3D"cb58-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-46">=
</a>    <span class=3D"kw">struct</span> addrinfo hints, *ai, *p;</span>
<span id=3D"cb58-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-47">=
</a></span>
<span id=3D"cb58-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-48">=
</a>    FD_ZERO(&amp;master);    <span class=3D"co">// clear the master and=
 temp sets</span></span>
<span id=3D"cb58-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-49">=
</a>    FD_ZERO(&amp;read_fds);</span>
<span id=3D"cb58-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-50">=
</a></span>
<span id=3D"cb58-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-51">=
</a>    <span class=3D"co">// get us a socket and bind it</span></span>
<span id=3D"cb58-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-52">=
</a>    memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">=
sizeof</span> hints);</span>
<span id=3D"cb58-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-53">=
</a>    hints.ai_family =3D AF_UNSPEC;</span>
<span id=3D"cb58-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-54">=
</a>    hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb58-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-55">=
</a>    hints.ai_flags =3D AI_PASSIVE;</span>
<span id=3D"cb58-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-56">=
</a>    <span class=3D"cf">if</span> ((rv =3D getaddrinfo(NULL, PORT, &amp;=
hints, &amp;ai)) !=3D <span class=3D"dv">0</span>) {</span>
<span id=3D"cb58-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-57">=
</a>        fprintf(stderr, <span class=3D"st">"selectserver: %s</span><spa=
n class=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(rv));</sp=
an>
<span id=3D"cb58-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-58">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb58-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-59">=
</a>    }</span>
<span id=3D"cb58-60"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-60">=
</a>    </span>
<span id=3D"cb58-61"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-61">=
</a>    <span class=3D"cf">for</span>(p =3D ai; p !=3D NULL; p =3D p-&gt;ai=
_next) {</span>
<span id=3D"cb58-62"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-62">=
</a>        listener =3D socket(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;a=
i_protocol);</span>
<span id=3D"cb58-63"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-63">=
</a>        <span class=3D"cf">if</span> (listener &lt; <span class=3D"dv">=
0</span>) { </span>
<span id=3D"cb58-64"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-64">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb58-65"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-65">=
</a>        }</span>
<span id=3D"cb58-66"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-66">=
</a>        </span>
<span id=3D"cb58-67"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-67">=
</a>        <span class=3D"co">// lose the pesky "address already in use" e=
rror message</span></span>
<span id=3D"cb58-68"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-68">=
</a>        setsockopt(listener, SOL_SOCKET, SO_REUSEADDR, &amp;yes, <span =
class=3D"kw">sizeof</span>(<span class=3D"dt">int</span>));</span>
<span id=3D"cb58-69"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-69">=
</a></span>
<span id=3D"cb58-70"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-70">=
</a>        <span class=3D"cf">if</span> (bind(listener, p-&gt;ai_addr, p-&=
gt;ai_addrlen) &lt; <span class=3D"dv">0</span>) {</span>
<span id=3D"cb58-71"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-71">=
</a>            close(listener);</span>
<span id=3D"cb58-72"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-72">=
</a>            <span class=3D"cf">continue</span>;</span>
<span id=3D"cb58-73"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-73">=
</a>        }</span>
<span id=3D"cb58-74"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-74">=
</a></span>
<span id=3D"cb58-75"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-75">=
</a>        <span class=3D"cf">break</span>;</span>
<span id=3D"cb58-76"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-76">=
</a>    }</span>
<span id=3D"cb58-77"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-77">=
</a></span>
<span id=3D"cb58-78"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-78">=
</a>    <span class=3D"co">// if we got here, it means we didn't get bound<=
/span></span>
<span id=3D"cb58-79"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-79">=
</a>    <span class=3D"cf">if</span> (p =3D=3D NULL) {</span>
<span id=3D"cb58-80"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-80">=
</a>        fprintf(stderr, <span class=3D"st">"selectserver: failed to bin=
d</span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb58-81"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-81">=
</a>        exit(<span class=3D"dv">2</span>);</span>
<span id=3D"cb58-82"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-82">=
</a>    }</span>
<span id=3D"cb58-83"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-83">=
</a></span>
<span id=3D"cb58-84"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-84">=
</a>    freeaddrinfo(ai); <span class=3D"co">// all done with this</span></=
span>
<span id=3D"cb58-85"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-85">=
</a></span>
<span id=3D"cb58-86"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-86">=
</a>    <span class=3D"co">// listen</span></span>
<span id=3D"cb58-87"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-87">=
</a>    <span class=3D"cf">if</span> (listen(listener, <span class=3D"dv">1=
0</span>) =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb58-88"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-88">=
</a>        perror(<span class=3D"st">"listen"</span>);</span>
<span id=3D"cb58-89"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-89">=
</a>        exit(<span class=3D"dv">3</span>);</span>
<span id=3D"cb58-90"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-90">=
</a>    }</span>
<span id=3D"cb58-91"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-91">=
</a></span>
<span id=3D"cb58-92"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-92">=
</a>    <span class=3D"co">// add the listener to the master set</span></sp=
an>
<span id=3D"cb58-93"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-93">=
</a>    FD_SET(listener, &amp;master);</span>
<span id=3D"cb58-94"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-94">=
</a></span>
<span id=3D"cb58-95"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-95">=
</a>    <span class=3D"co">// keep track of the biggest file descriptor</sp=
an></span>
<span id=3D"cb58-96"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-96">=
</a>    fdmax =3D listener; <span class=3D"co">// so far, it's this one</sp=
an></span>
<span id=3D"cb58-97"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-97">=
</a></span>
<span id=3D"cb58-98"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-98">=
</a>    <span class=3D"co">// main loop</span></span>
<span id=3D"cb58-99"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-99">=
</a>    <span class=3D"cf">for</span>(;;) {</span>
<span id=3D"cb58-100"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-100=
"></a>        read_fds =3D master; <span class=3D"co">// copy it</span></sp=
an>
<span id=3D"cb58-101"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-101=
"></a>        <span class=3D"cf">if</span> (select(fdmax+<span class=3D"dv"=
>1</span>, &amp;read_fds, NULL, NULL, NULL) =3D=3D -<span class=3D"dv">1</s=
pan>) {</span>
<span id=3D"cb58-102"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-102=
"></a>            perror(<span class=3D"st">"select"</span>);</span>
<span id=3D"cb58-103"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-103=
"></a>            exit(<span class=3D"dv">4</span>);</span>
<span id=3D"cb58-104"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-104=
"></a>        }</span>
<span id=3D"cb58-105"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-105=
"></a></span>
<span id=3D"cb58-106"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-106=
"></a>        <span class=3D"co">// run through the existing connections lo=
oking for data to read</span></span>
<span id=3D"cb58-107"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-107=
"></a>        <span class=3D"cf">for</span>(i =3D <span class=3D"dv">0</spa=
n>; i &lt;=3D fdmax; i++) {</span>
<span id=3D"cb58-108"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-108=
"></a>            <span class=3D"cf">if</span> (FD_ISSET(i, &amp;read_fds))=
 { <span class=3D"co">// we got one!!</span></span>
<span id=3D"cb58-109"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-109=
"></a>                <span class=3D"cf">if</span> (i =3D=3D listener) {</s=
pan>
<span id=3D"cb58-110"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-110=
"></a>                    <span class=3D"co">// handle new connections</spa=
n></span>
<span id=3D"cb58-111"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-111=
"></a>                    addrlen =3D <span class=3D"kw">sizeof</span> remo=
teaddr;</span>
<span id=3D"cb58-112"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-112=
"></a>                    newfd =3D accept(listener,</span>
<span id=3D"cb58-113"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-113=
"></a>                        (<span class=3D"kw">struct</span> sockaddr *)=
&amp;remoteaddr,</span>
<span id=3D"cb58-114"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-114=
"></a>                        &amp;addrlen);</span>
<span id=3D"cb58-115"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-115=
"></a></span>
<span id=3D"cb58-116"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-116=
"></a>                    <span class=3D"cf">if</span> (newfd =3D=3D -<span=
 class=3D"dv">1</span>) {</span>
<span id=3D"cb58-117"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-117=
"></a>                        perror(<span class=3D"st">"accept"</span>);</=
span>
<span id=3D"cb58-118"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-118=
"></a>                    } <span class=3D"cf">else</span> {</span>
<span id=3D"cb58-119"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-119=
"></a>                        FD_SET(newfd, &amp;master); <span class=3D"co=
">// add to master set</span></span>
<span id=3D"cb58-120"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-120=
"></a>                        <span class=3D"cf">if</span> (newfd &gt; fdma=
x) {    <span class=3D"co">// keep track of the max</span></span>
<span id=3D"cb58-121"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-121=
"></a>                            fdmax =3D newfd;</span>
<span id=3D"cb58-122"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-122=
"></a>                        }</span>
<span id=3D"cb58-123"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-123=
"></a>                        printf(<span class=3D"st">"selectserver: new =
connection from %s on "</span></span>
<span id=3D"cb58-124"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-124=
"></a>                            <span class=3D"st">"socket %d</span><span=
 class=3D"sc">\n</span><span class=3D"st">"</span>,</span>
<span id=3D"cb58-125"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-125=
"></a>                            inet_ntop(remoteaddr.ss_family,</span>
<span id=3D"cb58-126"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-126=
"></a>                                get_in_addr((<span class=3D"kw">struc=
t</span> sockaddr*)&amp;remoteaddr),</span>
<span id=3D"cb58-127"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-127=
"></a>                                remoteIP, INET6_ADDRSTRLEN),</span>
<span id=3D"cb58-128"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-128=
"></a>                            newfd);</span>
<span id=3D"cb58-129"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-129=
"></a>                    }</span>
<span id=3D"cb58-130"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-130=
"></a>                } <span class=3D"cf">else</span> {</span>
<span id=3D"cb58-131"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-131=
"></a>                    <span class=3D"co">// handle data from a client</=
span></span>
<span id=3D"cb58-132"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-132=
"></a>                    <span class=3D"cf">if</span> ((nbytes =3D recv(i,=
 buf, <span class=3D"kw">sizeof</span> buf, <span class=3D"dv">0</span>)) &=
lt;=3D <span class=3D"dv">0</span>) {</span>
<span id=3D"cb58-133"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-133=
"></a>                        <span class=3D"co">// got error or connection=
 closed by client</span></span>
<span id=3D"cb58-134"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-134=
"></a>                        <span class=3D"cf">if</span> (nbytes =3D=3D <=
span class=3D"dv">0</span>) {</span>
<span id=3D"cb58-135"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-135=
"></a>                            <span class=3D"co">// connection closed</=
span></span>
<span id=3D"cb58-136"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-136=
"></a>                            printf(<span class=3D"st">"selectserver: =
socket %d hung up</span><span class=3D"sc">\n</span><span class=3D"st">"</s=
pan>, i);</span>
<span id=3D"cb58-137"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-137=
"></a>                        } <span class=3D"cf">else</span> {</span>
<span id=3D"cb58-138"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-138=
"></a>                            perror(<span class=3D"st">"recv"</span>);=
</span>
<span id=3D"cb58-139"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-139=
"></a>                        }</span>
<span id=3D"cb58-140"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-140=
"></a>                        close(i); <span class=3D"co">// bye!</span></=
span>
<span id=3D"cb58-141"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-141=
"></a>                        FD_CLR(i, &amp;master); <span class=3D"co">//=
 remove from master set</span></span>
<span id=3D"cb58-142"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-142=
"></a>                    } <span class=3D"cf">else</span> {</span>
<span id=3D"cb58-143"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-143=
"></a>                        <span class=3D"co">// we got some data from a=
 client</span></span>
<span id=3D"cb58-144"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-144=
"></a>                        <span class=3D"cf">for</span>(j =3D <span cla=
ss=3D"dv">0</span>; j &lt;=3D fdmax; j++) {</span>
<span id=3D"cb58-145"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-145=
"></a>                            <span class=3D"co">// send to everyone!</=
span></span>
<span id=3D"cb58-146"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-146=
"></a>                            <span class=3D"cf">if</span> (FD_ISSET(j,=
 &amp;master)) {</span>
<span id=3D"cb58-147"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-147=
"></a>                                <span class=3D"co">// except the list=
ener and ourselves</span></span>
<span id=3D"cb58-148"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-148=
"></a>                                <span class=3D"cf">if</span> (j !=3D =
listener &amp;&amp; j !=3D i) {</span>
<span id=3D"cb58-149"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-149=
"></a>                                    <span class=3D"cf">if</span> (sen=
d(j, buf, nbytes, <span class=3D"dv">0</span>) =3D=3D -<span class=3D"dv">1=
</span>) {</span>
<span id=3D"cb58-150"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-150=
"></a>                                        perror(<span class=3D"st">"se=
nd"</span>);</span>
<span id=3D"cb58-151"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-151=
"></a>                                    }</span>
<span id=3D"cb58-152"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-152=
"></a>                                }</span>
<span id=3D"cb58-153"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-153=
"></a>                            }</span>
<span id=3D"cb58-154"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-154=
"></a>                        }</span>
<span id=3D"cb58-155"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-155=
"></a>                    }</span>
<span id=3D"cb58-156"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-156=
"></a>                } <span class=3D"co">// </span><span class=3D"re">END=
</span><span class=3D"co"> handle data from client</span></span>
<span id=3D"cb58-157"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-157=
"></a>            } <span class=3D"co">// </span><span class=3D"re">END</sp=
an><span class=3D"co"> got new incoming connection</span></span>
<span id=3D"cb58-158"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-158=
"></a>        } <span class=3D"co">// </span><span class=3D"re">END</span><=
span class=3D"co"> looping through file descriptors</span></span>
<span id=3D"cb58-159"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-159=
"></a>    } <span class=3D"co">// </span><span class=3D"re">END</span><span=
 class=3D"co"> for(;;)--and you thought it would never end!</span></span>
<span id=3D"cb58-160"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-160=
"></a>    </span>
<span id=3D"cb58-161"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-161=
"></a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</sp=
an>
<span id=3D"cb58-162"><a href=3D"https://beej.us/guide/bgnet/html/#cb58-162=
"></a>}</span></code></pre></div>
<p>Notice I have two file descriptor sets in the code: <code>master</code> =
and <code>read_fds</code>. The first, <code>master</code>, holds all the so=
cket descriptors that are currently connected, as well as the socket descri=
ptor that is listening for new connections.</p>
<p>The reason I have the <code>master</code> set is that <code>select()</co=
de> actually <em>changes</em> the set you pass into it to reflect which soc=
kets are ready to read. Since I have to keep track of the connections from =
one call of <code>select()</code> to the next, I must store these safely aw=
ay somewhere. At the last minute, I copy the <code>master</code> into the <=
code>read_fds</code>, and then call <code>select()</code>.</p>
<p>But doesn=E2=80=99t this mean that every time I get a new connection, I =
have to add it to the <code>master</code> set? Yup! And every time a connec=
tion closes, I have to remove it from the <code>master</code> set? Yes, it =
does.</p>
<p>Notice I check to see when the <code>listener</code> socket is ready to =
read. When it is, it means I have a new connection pending, and I <code>acc=
ept()</code> it and add it to the <code>master</code> set. Similarly, when =
a client connection is ready to read, and <code>recv()</code> returns <code=
>0</code>, I know the client has closed the connection, and I must remove i=
t from the <code>master</code> set.</p>
<p>If the client <code>recv()</code> returns non-zero, though, I know some =
data has been received. So I get it, and then go through the <code>master</=
code> list and send that data to all the rest of the connected clients.</p>
<p>And that, my friends, is a less-than-simple overview of the almighty <co=
de>select()</code> function.</p>
<p>Quick note to all you Linux fans out there: sometimes, in rare circumsta=
nces, Linux=E2=80=99s <code>select()</code> can return =E2=80=9Cready-to-re=
ad=E2=80=9D and then not actually be ready to read! This means it will bloc=
k on the <code>read()</code> after the <code>select()</code> says it won=E2=
=80=99t! Why you little=E2=80=94! Anyway, the workaround solution is to set=
 the  <code>O_NONBLOCK</code> flag on the receiving socket so it errors wit=
h <code>EWOULDBLOCK</code> (which you can just safely ignore if it occurs).=
 See the <a href=3D"https://beej.us/guide/bgnet/html/#fcntlman"><code>fcntl=
()</code> reference page</a> for more info on setting a socket to non-block=
ing.</p>
<p>In addition, here is a bonus afterthought: there is another function cal=
led  <code>poll()</code> which behaves much the same way <code>select()</co=
de> does, but with a different system for managing the file descriptor sets=
. <a href=3D"https://beej.us/guide/bgnet/html/#pollman">Check it out!</a></=
p>
<h2 data-number=3D"7.4" id=3D"sendall"><span class=3D"header-section-number=
">7.4</span> Handling Partial <code>send()</code>s</h2>
<p>Remember back in the <a href=3D"https://beej.us/guide/bgnet/html/#sendre=
cv">section about <code>send()</code></a>, above, when I said that <code>se=
nd()</code> might not send all the bytes you asked it to? That is, you want=
 it to send 512 bytes, but it returns 412. What happened to the remaining 1=
00 bytes?</p>
<p>Well, they=E2=80=99re still in your little buffer waiting to be sent out=
. Due to circumstances beyond your control, the kernel decided not to send =
all the data out in one chunk, and now, my friend, it=E2=80=99s up to you t=
o get the data out there.</p>
<p> You could write a function like this to do it, too:</p>
<div class=3D"sourceCode" id=3D"cb59"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb59-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb59-1"></a><span class=3D"pp">#include =
</span><span class=3D"im">&lt;sys/types.h&gt;</span></span>
<span id=3D"cb59-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-2"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt=
;</span></span>
<span id=3D"cb59-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-3"></=
a></span>
<span id=3D"cb59-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-4"></=
a><span class=3D"dt">int</span> sendall(<span class=3D"dt">int</span> s, <s=
pan class=3D"dt">char</span> *buf, <span class=3D"dt">int</span> *len)</spa=
n>
<span id=3D"cb59-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-5"></=
a>{</span>
<span id=3D"cb59-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-6"></=
a>    <span class=3D"dt">int</span> total =3D <span class=3D"dv">0</span>; =
       <span class=3D"co">// how many bytes we've sent</span></span>
<span id=3D"cb59-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-7"></=
a>    <span class=3D"dt">int</span> bytesleft =3D *len; <span class=3D"co">=
// how many we have left to send</span></span>
<span id=3D"cb59-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-8"></=
a>    <span class=3D"dt">int</span> n;</span>
<span id=3D"cb59-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-9"></=
a></span>
<span id=3D"cb59-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-10">=
</a>    <span class=3D"cf">while</span>(total &lt; *len) {</span>
<span id=3D"cb59-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-11">=
</a>        n =3D send(s, buf+total, bytesleft, <span class=3D"dv">0</span>=
);</span>
<span id=3D"cb59-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-12">=
</a>        <span class=3D"cf">if</span> (n =3D=3D -<span class=3D"dv">1</s=
pan>) { <span class=3D"cf">break</span>; }</span>
<span id=3D"cb59-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-13">=
</a>        total +=3D n;</span>
<span id=3D"cb59-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-14">=
</a>        bytesleft -=3D n;</span>
<span id=3D"cb59-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-15">=
</a>    }</span>
<span id=3D"cb59-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-16">=
</a></span>
<span id=3D"cb59-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-17">=
</a>    *len =3D total; <span class=3D"co">// return number actually sent h=
ere</span></span>
<span id=3D"cb59-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-18">=
</a></span>
<span id=3D"cb59-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-19">=
</a>    <span class=3D"cf">return</span> n=3D=3D-<span class=3D"dv">1</span=
>?-<span class=3D"dv">1</span>:<span class=3D"dv">0</span>; <span class=3D"=
co">// return -1 on failure, 0 on success</span></span>
<span id=3D"cb59-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb59-20">=
</a>} </span></code></pre></div>
<p>In this example, <code>s</code> is the socket you want to send the data =
to, <code>buf</code> is the buffer containing the data, and <code>len</code=
> is a pointer to an <code>int</code> containing the number of bytes in the=
 buffer.</p>
<p>The function returns <code>-1</code> on error (and <code>errno</code> is=
 still set from the call to <code>send()</code>). Also, the number of bytes=
 actually sent is returned in <code>len</code>. This will be the same numbe=
r of bytes you asked it to send, unless there was an error. <code>sendall()=
</code> will do it=E2=80=99s best, huffing and puffing, to send the data ou=
t, but if there=E2=80=99s an error, it gets back to you right away.</p>
<p>For completeness, here=E2=80=99s a sample call to the function:</p>
<div class=3D"sourceCode" id=3D"cb60"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb60-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb60-1"></a><span class=3D"dt">char</spa=
n> buf[<span class=3D"dv">10</span>] =3D <span class=3D"st">"Beej!"</span>;=
</span>
<span id=3D"cb60-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb60-2"></=
a><span class=3D"dt">int</span> len;</span>
<span id=3D"cb60-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb60-3"></=
a></span>
<span id=3D"cb60-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb60-4"></=
a>len =3D strlen(buf);</span>
<span id=3D"cb60-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb60-5"></=
a><span class=3D"cf">if</span> (sendall(s, buf, &amp;len) =3D=3D -<span cla=
ss=3D"dv">1</span>) {</span>
<span id=3D"cb60-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb60-6"></=
a>    perror(<span class=3D"st">"sendall"</span>);</span>
<span id=3D"cb60-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb60-7"></=
a>    printf(<span class=3D"st">"We only sent %d bytes because of the error=
!</span><span class=3D"sc">\n</span><span class=3D"st">"</span>, len);</spa=
n>
<span id=3D"cb60-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb60-8"></=
a>} </span></code></pre></div>
<p>What happens on the receiver=E2=80=99s end when part of a packet arrives=
? If the packets are variable length, how does the receiver know when one p=
acket ends and another begins? Yes, real-world scenarios are a royal pain i=
n the  donkeys. You probably have to  <em>encapsulate</em> (remember that f=
rom the <a href=3D"https://beej.us/guide/bgnet/html/#lowlevel">data encapsu=
lation section</a> way back there at the beginning?) Read on for details!</=
p>
<h2 data-number=3D"7.5" id=3D"serialization"><span class=3D"header-section-=
number">7.5</span> Serialization=E2=80=94How to Pack Data</h2>
<p> It=E2=80=99s easy enough to send text data across the network, you=E2=
=80=99re finding, but what happens if you want to send some =E2=80=9Cbinary=
=E2=80=9D data like <code>int</code>s or <code>float</code>s? It turns out =
you have a few options.</p>
<ol type=3D"1">
<li><p>Convert the number into text with a function like <code>sprintf()</c=
ode>, then send the text. The receiver will parse the text back into a numb=
er using a function like <code>strtol()</code>.</p></li>
<li><p>Just send the data raw, passing a pointer to the data to <code>send(=
)</code>.</p></li>
<li><p>Encode the number into a portable binary form. The receiver will dec=
ode it.</p></li>
</ol>
<p>Sneak preview! Tonight only!</p>
<p>[<em>Curtain raises</em>]</p>
<p>Beej says, =E2=80=9CI prefer Method Three, above!=E2=80=9D</p>
<p>[<em>THE END</em>]</p>
<p>(Before I begin this section in earnest, I should tell you that there ar=
e libraries out there for doing this, and rolling your own and remaining po=
rtable and error-free is quite a challenge. So hunt around and do your home=
work before deciding to implement this stuff yourself. I include the inform=
ation here for those curious about how things like this work.)</p>
<p>Actually all the methods, above, have their drawbacks and advantages, bu=
t, like I said, in general, I prefer the third method. First, though, let=
=E2=80=99s talk about some of the drawbacks and advantages to the other two=
.</p>
<p>The first method, encoding the numbers as text before sending, has the a=
dvantage that you can easily print and read the data that=E2=80=99s coming =
over the wire. Sometimes a human-readable protocol is excellent to use in a=
 non-bandwidth-intensive situation, such as with  <a href=3D"https://en.wik=
ipedia.org/wiki/Internet_Relay_Chat">Internet Relay Chat (IRC)</a><a href=
=3D"https://beej.us/guide/bgnet/html/#fn33" class=3D"footnote-ref" id=3D"fn=
ref33" role=3D"doc-noteref"><sup>33</sup></a>. However, it has the disadvan=
tage that it is slow to convert, and the results almost always take up more=
 space than the original number!</p>
<p>Method two: passing the raw data. This one is quite easy (but dangerous!=
): just take a pointer to the data to send, and call send with it.</p>
<div class=3D"sourceCode" id=3D"cb61"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb61-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb61-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"dt">double</span> d =3D <span class=3D"fl">3490.15926535</span>;</span>
<span id=3D"cb61-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb61-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb61-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb61-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    send(s, &amp;d, <span class=3D"k=
w">sizeof</span> d, <span class=3D"dv">0</span>);  <span class=3D"co">/* </=
span><span class=3D"al">DANGER</span><span class=3D"co">--non-portable! */<=
/span></span></code></pre></div>
<p>The receiver gets it like this:</p>
<div class=3D"sourceCode" id=3D"cb62"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb62-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb62-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"dt">double</span> d;</span>
<span id=3D"cb62-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb62-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb62-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb62-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    recv(s, &amp;d, <span class=3D"k=
w">sizeof</span> d, <span class=3D"dv">0</span>);  <span class=3D"co">/* </=
span><span class=3D"al">DANGER</span><span class=3D"co">--non-portable! */<=
/span></span></code></pre></div>
<p>Fast, simple=E2=80=94what=E2=80=99s not to like? Well, it turns out that=
 not all architectures represent a <code>double</code> (or <code>int</code>=
 for that matter) with the same bit representation or even the same byte or=
dering! The code is decidedly non-portable. (Hey=E2=80=94maybe you don=E2=
=80=99t need portability, in which case this is nice and fast.)</p>
<p>When packing integer types, we=E2=80=99ve already seen how the  <code>ht=
ons()</code>-class of functions can help keep things portable by transformi=
ng the numbers into  Network Byte Order, and how that=E2=80=99s the Right T=
hing to do. Unfortunately, there are no similar functions for <code>float</=
code> types. Is all hope lost?</p>
<p>Fear not! (Were you afraid there for a second? No? Not even a little bit=
?) There is something we can do: we can pack (or =E2=80=9Cmarshal=E2=80=9D,=
 or =E2=80=9Cserialize=E2=80=9D, or one of a thousand million other names) =
the data into a known binary format that the receiver can unpack on the rem=
ote side.</p>
<p>What do I mean by =E2=80=9Cknown binary format=E2=80=9D? Well, we=E2=80=
=99ve already seen the <code>htons()</code> example, right? It changes (or =
=E2=80=9Cencodes=E2=80=9D, if you want to think of it that way) a number fr=
om whatever the host format is into Network Byte Order. To reverse (unencod=
e) the number, the receiver calls <code>ntohs()</code>.</p>
<p>But didn=E2=80=99t I just get finished saying there wasn=E2=80=99t any s=
uch function for other non-integer types? Yes. I did. And since there=E2=80=
=99s no standard way in C to do this, it=E2=80=99s a bit of a pickle (that =
a gratuitous pun there for you Python fans).</p>
<p>The thing to do is to pack the data into a known format and send that ov=
er the wire for decoding. For example, to pack <code>float</code>s, here=E2=
=80=99s <a href=3D"https://beej.us/guide/bgnet/examples/pack.c">something q=
uick and dirty with plenty of room for improvement</a><a href=3D"https://be=
ej.us/guide/bgnet/html/#fn34" class=3D"footnote-ref" id=3D"fnref34" role=3D=
"doc-noteref"><sup>34</sup></a>:</p>
<div class=3D"sourceCode" id=3D"cb63"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb63-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb63-1"></a><span class=3D"pp">#include =
</span><span class=3D"im">&lt;stdint.h&gt;</span></span>
<span id=3D"cb63-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-2"></=
a></span>
<span id=3D"cb63-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-3"></=
a><span class=3D"dt">uint32_t</span> htonf(<span class=3D"dt">float</span> =
f)</span>
<span id=3D"cb63-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-4"></=
a>{</span>
<span id=3D"cb63-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-5"></=
a>    <span class=3D"dt">uint32_t</span> p;</span>
<span id=3D"cb63-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-6"></=
a>    <span class=3D"dt">uint32_t</span> sign;</span>
<span id=3D"cb63-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-7"></=
a></span>
<span id=3D"cb63-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-8"></=
a>    <span class=3D"cf">if</span> (f &lt; <span class=3D"dv">0</span>) { s=
ign =3D <span class=3D"dv">1</span>; f =3D -f; }</span>
<span id=3D"cb63-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-9"></=
a>    <span class=3D"cf">else</span> { sign =3D <span class=3D"dv">0</span>=
; }</span>
<span id=3D"cb63-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-10">=
</a>        </span>
<span id=3D"cb63-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-11">=
</a>    p =3D ((((<span class=3D"dt">uint32_t</span>)f)&amp;<span class=3D"=
bn">0x7fff</span>)&lt;&lt;<span class=3D"dv">16</span>) | (sign&lt;&lt;<spa=
n class=3D"dv">31</span>); <span class=3D"co">// whole part and sign</span>=
</span>
<span id=3D"cb63-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-12">=
</a>    p |=3D (<span class=3D"dt">uint32_t</span>)(((f - (<span class=3D"d=
t">int</span>)f) * <span class=3D"fl">65536.0</span><span class=3D"bu">f</s=
pan>))&amp;<span class=3D"bn">0xffff</span>; <span class=3D"co">// fraction=
</span></span>
<span id=3D"cb63-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-13">=
</a></span>
<span id=3D"cb63-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-14">=
</a>    <span class=3D"cf">return</span> p;</span>
<span id=3D"cb63-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-15">=
</a>}</span>
<span id=3D"cb63-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-16">=
</a></span>
<span id=3D"cb63-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-17">=
</a><span class=3D"dt">float</span> ntohf(<span class=3D"dt">uint32_t</span=
> p)</span>
<span id=3D"cb63-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-18">=
</a>{</span>
<span id=3D"cb63-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-19">=
</a>    <span class=3D"dt">float</span> f =3D ((p&gt;&gt;<span class=3D"dv"=
>16</span>)&amp;<span class=3D"bn">0x7fff</span>); <span class=3D"co">// wh=
ole part</span></span>
<span id=3D"cb63-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-20">=
</a>    f +=3D (p&amp;<span class=3D"bn">0xffff</span>) / <span class=3D"fl=
">65536.0</span><span class=3D"bu">f</span>; <span class=3D"co">// fraction=
</span></span>
<span id=3D"cb63-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-21">=
</a></span>
<span id=3D"cb63-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-22">=
</a>    <span class=3D"cf">if</span> (((p&gt;&gt;<span class=3D"dv">31</spa=
n>)&amp;<span class=3D"bn">0x1</span>) =3D=3D <span class=3D"bn">0x1</span>=
) { f =3D -f; } <span class=3D"co">// sign bit set</span></span>
<span id=3D"cb63-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-23">=
</a></span>
<span id=3D"cb63-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-24">=
</a>    <span class=3D"cf">return</span> f;</span>
<span id=3D"cb63-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb63-25">=
</a>}</span></code></pre></div>
<p>The above code is sort of a naive implementation that stores a <code>flo=
at</code> in a 32-bit number. The high bit (31) is used to store the sign o=
f the number (=E2=80=9C1=E2=80=9D means negative), and the next seven bits =
(30-16) are used to store the whole number portion of the <code>float</code=
>. Finally, the remaining bits (15-0) are used to store the fractional port=
ion of the number.</p>
<p>Usage is fairly straightforward:</p>
<div class=3D"sourceCode" id=3D"cb64"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb64-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb64-1"></a><span class=3D"pp">#include =
</span><span class=3D"im">&lt;stdio.h&gt;</span></span>
<span id=3D"cb64-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-2"></=
a></span>
<span id=3D"cb64-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-3"></=
a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</span>
<span id=3D"cb64-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-4"></=
a>{</span>
<span id=3D"cb64-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-5"></=
a>    <span class=3D"dt">float</span> f =3D <span class=3D"fl">3.1415926</s=
pan>, f2;</span>
<span id=3D"cb64-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-6"></=
a>    <span class=3D"dt">uint32_t</span> netf;</span>
<span id=3D"cb64-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-7"></=
a></span>
<span id=3D"cb64-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-8"></=
a>    netf =3D htonf(f);  <span class=3D"co">// convert to "network" form</=
span></span>
<span id=3D"cb64-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-9"></=
a>    f2 =3D ntohf(netf); <span class=3D"co">// convert back to test</span>=
</span>
<span id=3D"cb64-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-10">=
</a></span>
<span id=3D"cb64-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-11">=
</a>    printf(<span class=3D"st">"Original: %f</span><span class=3D"sc">\n=
</span><span class=3D"st">"</span>, f);        <span class=3D"co">// 3.1415=
93</span></span>
<span id=3D"cb64-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-12">=
</a>    printf(<span class=3D"st">" Network: 0x%08X</span><span class=3D"sc=
">\n</span><span class=3D"st">"</span>, netf); <span class=3D"co">// 0x0003=
243F</span></span>
<span id=3D"cb64-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-13">=
</a>    printf(<span class=3D"st">"Unpacked: %f</span><span class=3D"sc">\n=
</span><span class=3D"st">"</span>, f2);       <span class=3D"co">// 3.1415=
86</span></span>
<span id=3D"cb64-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-14">=
</a></span>
<span id=3D"cb64-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-15">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb64-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb64-16">=
</a>}</span></code></pre></div>
<p>On the plus side, it=E2=80=99s small, simple, and fast. On the minus sid=
e, it=E2=80=99s not an efficient use of space and the range is severely res=
tricted=E2=80=94try storing a number greater-than 32767 in there and it won=
=E2=80=99t be very happy! You can also see in the above example that the la=
st couple decimal places are not correctly preserved.</p>
<p>What can we do instead? Well, <em>The</em> Standard for storing floating=
 point numbers is known as  <a href=3D"https://en.wikipedia.org/wiki/IEEE_7=
54">IEEE-754</a><a href=3D"https://beej.us/guide/bgnet/html/#fn35" class=3D=
"footnote-ref" id=3D"fnref35" role=3D"doc-noteref"><sup>35</sup></a>. Most =
computers use this format internally for doing floating point math, so in t=
hose cases, strictly speaking, conversion wouldn=E2=80=99t need to be done.=
 But if you want your source code to be portable, that=E2=80=99s an assumpt=
ion you can=E2=80=99t necessarily make. (On the other hand, if you want thi=
ngs to be fast, you should optimize this out on platforms that don=E2=80=99=
t need to do it! That=E2=80=99s what <code>htons()</code> and its ilk do.)<=
/p>
<p><a href=3D"https://beej.us/guide/bgnet/examples/ieee754.c">Here=E2=80=99=
s some code that encodes floats and doubles into IEEE-754 format</a><a href=
=3D"https://beej.us/guide/bgnet/html/#fn36" class=3D"footnote-ref" id=3D"fn=
ref36" role=3D"doc-noteref"><sup>36</sup></a>. (Mostly=E2=80=94it doesn=E2=
=80=99t encode NaN or Infinity, but it could be modified to do that.)</p>
<div class=3D"sourceCode" id=3D"cb65"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb65-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb65-1"></a><span class=3D"pp">#define p=
ack754_32(f) (pack754((f), 32, 8))</span></span>
<span id=3D"cb65-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-2"></=
a><span class=3D"pp">#define pack754_64(f) (pack754((f), 64, 11))</span></s=
pan>
<span id=3D"cb65-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-3"></=
a><span class=3D"pp">#define unpack754_32(i) (unpack754((i), 32, 8))</span>=
</span>
<span id=3D"cb65-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-4"></=
a><span class=3D"pp">#define unpack754_64(i) (unpack754((i), 64, 11))</span=
></span>
<span id=3D"cb65-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-5"></=
a></span>
<span id=3D"cb65-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-6"></=
a><span class=3D"dt">uint64_t</span> pack754(<span class=3D"dt">long</span>=
 <span class=3D"dt">double</span> f, <span class=3D"dt">unsigned</span> bit=
s, <span class=3D"dt">unsigned</span> expbits)</span>
<span id=3D"cb65-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-7"></=
a>{</span>
<span id=3D"cb65-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-8"></=
a>    <span class=3D"dt">long</span> <span class=3D"dt">double</span> fnorm=
;</span>
<span id=3D"cb65-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-9"></=
a>    <span class=3D"dt">int</span> shift;</span>
<span id=3D"cb65-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-10">=
</a>    <span class=3D"dt">long</span> <span class=3D"dt">long</span> sign,=
 exp, significand;</span>
<span id=3D"cb65-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-11">=
</a>    <span class=3D"dt">unsigned</span> significandbits =3D bits - expbi=
ts - <span class=3D"dv">1</span>; <span class=3D"co">// -1 for sign bit</sp=
an></span>
<span id=3D"cb65-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-12">=
</a></span>
<span id=3D"cb65-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-13">=
</a>    <span class=3D"cf">if</span> (f =3D=3D <span class=3D"fl">0.0</span=
>) <span class=3D"cf">return</span> <span class=3D"dv">0</span>; <span clas=
s=3D"co">// get this special case out of the way</span></span>
<span id=3D"cb65-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-14">=
</a></span>
<span id=3D"cb65-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-15">=
</a>    <span class=3D"co">// check sign and begin normalization</span></sp=
an>
<span id=3D"cb65-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-16">=
</a>    <span class=3D"cf">if</span> (f &lt; <span class=3D"dv">0</span>) {=
 sign =3D <span class=3D"dv">1</span>; fnorm =3D -f; }</span>
<span id=3D"cb65-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-17">=
</a>    <span class=3D"cf">else</span> { sign =3D <span class=3D"dv">0</spa=
n>; fnorm =3D f; }</span>
<span id=3D"cb65-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-18">=
</a></span>
<span id=3D"cb65-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-19">=
</a>    <span class=3D"co">// get the normalized form of f and track the ex=
ponent</span></span>
<span id=3D"cb65-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-20">=
</a>    shift =3D <span class=3D"dv">0</span>;</span>
<span id=3D"cb65-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-21">=
</a>    <span class=3D"cf">while</span>(fnorm &gt;=3D <span class=3D"fl">2.=
0</span>) { fnorm /=3D <span class=3D"fl">2.0</span>; shift++; }</span>
<span id=3D"cb65-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-22">=
</a>    <span class=3D"cf">while</span>(fnorm &lt; <span class=3D"fl">1.0</=
span>) { fnorm *=3D <span class=3D"fl">2.0</span>; shift--; }</span>
<span id=3D"cb65-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-23">=
</a>    fnorm =3D fnorm - <span class=3D"fl">1.0</span>;</span>
<span id=3D"cb65-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-24">=
</a></span>
<span id=3D"cb65-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-25">=
</a>    <span class=3D"co">// calculate the binary form (non-float) of the =
significand data</span></span>
<span id=3D"cb65-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-26">=
</a>    significand =3D fnorm * ((<span class=3D"dv">1</span><span class=3D=
"bu">LL</span>&lt;&lt;significandbits) + <span class=3D"fl">0.5</span><span=
 class=3D"bu">f</span>);</span>
<span id=3D"cb65-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-27">=
</a></span>
<span id=3D"cb65-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-28">=
</a>    <span class=3D"co">// get the biased exponent</span></span>
<span id=3D"cb65-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-29">=
</a>    exp =3D shift + ((<span class=3D"dv">1</span>&lt;&lt;(expbits-<span=
 class=3D"dv">1</span>)) - <span class=3D"dv">1</span>); <span class=3D"co"=
>// shift + bias</span></span>
<span id=3D"cb65-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-30">=
</a></span>
<span id=3D"cb65-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-31">=
</a>    <span class=3D"co">// return the final answer</span></span>
<span id=3D"cb65-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-32">=
</a>    <span class=3D"cf">return</span> (sign&lt;&lt;(bits-<span class=3D"=
dv">1</span>)) | (exp&lt;&lt;(bits-expbits-<span class=3D"dv">1</span>)) | =
significand;</span>
<span id=3D"cb65-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-33">=
</a>}</span>
<span id=3D"cb65-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-34">=
</a></span>
<span id=3D"cb65-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-35">=
</a><span class=3D"dt">long</span> <span class=3D"dt">double</span> unpack7=
54(<span class=3D"dt">uint64_t</span> i, <span class=3D"dt">unsigned</span>=
 bits, <span class=3D"dt">unsigned</span> expbits)</span>
<span id=3D"cb65-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-36">=
</a>{</span>
<span id=3D"cb65-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-37">=
</a>    <span class=3D"dt">long</span> <span class=3D"dt">double</span> res=
ult;</span>
<span id=3D"cb65-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-38">=
</a>    <span class=3D"dt">long</span> <span class=3D"dt">long</span> shift=
;</span>
<span id=3D"cb65-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-39">=
</a>    <span class=3D"dt">unsigned</span> bias;</span>
<span id=3D"cb65-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-40">=
</a>    <span class=3D"dt">unsigned</span> significandbits =3D bits - expbi=
ts - <span class=3D"dv">1</span>; <span class=3D"co">// -1 for sign bit</sp=
an></span>
<span id=3D"cb65-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-41">=
</a></span>
<span id=3D"cb65-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-42">=
</a>    <span class=3D"cf">if</span> (i =3D=3D <span class=3D"dv">0</span>)=
 <span class=3D"cf">return</span> <span class=3D"fl">0.0</span>;</span>
<span id=3D"cb65-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-43">=
</a></span>
<span id=3D"cb65-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-44">=
</a>    <span class=3D"co">// pull the significand</span></span>
<span id=3D"cb65-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-45">=
</a>    result =3D (i&amp;((<span class=3D"dv">1</span><span class=3D"bu">L=
L</span>&lt;&lt;significandbits)-<span class=3D"dv">1</span>)); <span class=
=3D"co">// mask</span></span>
<span id=3D"cb65-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-46">=
</a>    result /=3D (<span class=3D"dv">1</span><span class=3D"bu">LL</span=
>&lt;&lt;significandbits); <span class=3D"co">// convert back to float</spa=
n></span>
<span id=3D"cb65-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-47">=
</a>    result +=3D <span class=3D"fl">1.0</span><span class=3D"bu">f</span=
>; <span class=3D"co">// add the one back on</span></span>
<span id=3D"cb65-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-48">=
</a></span>
<span id=3D"cb65-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-49">=
</a>    <span class=3D"co">// deal with the exponent</span></span>
<span id=3D"cb65-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-50">=
</a>    bias =3D (<span class=3D"dv">1</span>&lt;&lt;(expbits-<span class=
=3D"dv">1</span>)) - <span class=3D"dv">1</span>;</span>
<span id=3D"cb65-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-51">=
</a>    shift =3D ((i&gt;&gt;significandbits)&amp;((<span class=3D"dv">1</s=
pan><span class=3D"bu">LL</span>&lt;&lt;expbits)-<span class=3D"dv">1</span=
>)) - bias;</span>
<span id=3D"cb65-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-52">=
</a>    <span class=3D"cf">while</span>(shift &gt; <span class=3D"dv">0</sp=
an>) { result *=3D <span class=3D"fl">2.0</span>; shift--; }</span>
<span id=3D"cb65-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-53">=
</a>    <span class=3D"cf">while</span>(shift &lt; <span class=3D"dv">0</sp=
an>) { result /=3D <span class=3D"fl">2.0</span>; shift++; }</span>
<span id=3D"cb65-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-54">=
</a></span>
<span id=3D"cb65-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-55">=
</a>    <span class=3D"co">// sign it</span></span>
<span id=3D"cb65-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-56">=
</a>    result *=3D (i&gt;&gt;(bits-<span class=3D"dv">1</span>))&amp;<span=
 class=3D"dv">1</span>? -<span class=3D"fl">1.0</span>: <span class=3D"fl">=
1.0</span>;</span>
<span id=3D"cb65-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-57">=
</a></span>
<span id=3D"cb65-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-58">=
</a>    <span class=3D"cf">return</span> result;</span>
<span id=3D"cb65-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb65-59">=
</a>}</span></code></pre></div>
<p>I put some handy macros up there at the top for packing and unpacking 32=
-bit (probably a <code>float</code>) and 64-bit (probably a <code>double</c=
ode>) numbers, but the <code>pack754()</code> function could be called dire=
ctly and told to encode <code>bits</code>-worth of data (<code>expbits</cod=
e> of which are reserved for the normalized number=E2=80=99s exponent).</p>
<p>Here=E2=80=99s sample usage:</p>
<div class=3D"sourceCode" id=3D"cb66"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb66-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb66-1"></a></span>
<span id=3D"cb66-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-2"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb66-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-3"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdint.h&gt;</s=
pan><span class=3D"pp"> </span><span class=3D"co">// defines uintN_t types<=
/span></span>
<span id=3D"cb66-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-4"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;inttypes.h&gt;<=
/span><span class=3D"pp"> </span><span class=3D"co">// defines PRIx macros<=
/span></span>
<span id=3D"cb66-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-5"></=
a></span>
<span id=3D"cb66-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-6"></=
a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</span>
<span id=3D"cb66-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-7"></=
a>{</span>
<span id=3D"cb66-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-8"></=
a>    <span class=3D"dt">float</span> f =3D <span class=3D"fl">3.1415926</s=
pan>, f2;</span>
<span id=3D"cb66-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-9"></=
a>    <span class=3D"dt">double</span> d =3D <span class=3D"fl">3.141592653=
58979323</span>, d2;</span>
<span id=3D"cb66-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-10">=
</a>    <span class=3D"dt">uint32_t</span> fi;</span>
<span id=3D"cb66-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-11">=
</a>    <span class=3D"dt">uint64_t</span> di;</span>
<span id=3D"cb66-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-12">=
</a></span>
<span id=3D"cb66-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-13">=
</a>    fi =3D pack754_32(f);</span>
<span id=3D"cb66-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-14">=
</a>    f2 =3D unpack754_32(fi);</span>
<span id=3D"cb66-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-15">=
</a></span>
<span id=3D"cb66-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-16">=
</a>    di =3D pack754_64(d);</span>
<span id=3D"cb66-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-17">=
</a>    d2 =3D unpack754_64(di);</span>
<span id=3D"cb66-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-18">=
</a></span>
<span id=3D"cb66-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-19">=
</a>    printf(<span class=3D"st">"float before : %.7f</span><span class=3D=
"sc">\n</span><span class=3D"st">"</span>, f);</span>
<span id=3D"cb66-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-20">=
</a>    printf(<span class=3D"st">"float encoded: 0x%08"</span> PRIx32 <spa=
n class=3D"st">"</span><span class=3D"sc">\n</span><span class=3D"st">"</sp=
an>, fi);</span>
<span id=3D"cb66-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-21">=
</a>    printf(<span class=3D"st">"float after  : %.7f</span><span class=3D=
"sc">\n\n</span><span class=3D"st">"</span>, f2);</span>
<span id=3D"cb66-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-22">=
</a></span>
<span id=3D"cb66-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-23">=
</a>    printf(<span class=3D"st">"double before : %.20lf</span><span class=
=3D"sc">\n</span><span class=3D"st">"</span>, d);</span>
<span id=3D"cb66-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-24">=
</a>    printf(<span class=3D"st">"double encoded: 0x%016"</span> PRIx64 <s=
pan class=3D"st">"</span><span class=3D"sc">\n</span><span class=3D"st">"</=
span>, di);</span>
<span id=3D"cb66-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-25">=
</a>    printf(<span class=3D"st">"double after  : %.20lf</span><span class=
=3D"sc">\n</span><span class=3D"st">"</span>, d2);</span>
<span id=3D"cb66-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-26">=
</a></span>
<span id=3D"cb66-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-27">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb66-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb66-28">=
</a>}</span></code></pre></div>
<p>The above code produces this output:</p>
<pre><code>    float before : 3.1415925
    float encoded: 0x40490FDA
    float after  : 3.1415925
   =20
    double before : 3.14159265358979311600
    double encoded: 0x400921FB54442D18
    double after  : 3.14159265358979311600</code></pre>
<p>Another question you might have is how do you pack <code>struct</code>s?=
 Unfortunately for you, the compiler is free to put padding all over the pl=
ace in a <code>struct</code>, and that means you can=E2=80=99t portably sen=
d the whole thing over the wire in one chunk. (Aren=E2=80=99t you getting s=
ick of hearing =E2=80=9Ccan=E2=80=99t do this=E2=80=9D, =E2=80=9Ccan=E2=80=
=99t do that=E2=80=9D? Sorry! To quote a friend, =E2=80=9CWhenever anything=
 goes wrong, I always blame Microsoft.=E2=80=9D This one might not be Micro=
soft=E2=80=99s fault, admittedly, but my friend=E2=80=99s statement is comp=
letely true.)</p>
<p>Back to it: the best way to send the <code>struct</code> over the wire i=
s to pack each field independently and then unpack them into the <code>stru=
ct</code> when they arrive on the other side.</p>
<p>That=E2=80=99s a lot of work, is what you=E2=80=99re thinking. Yes, it i=
s. One thing you can do is write a helper function to help pack the data fo=
r you. It=E2=80=99ll be fun! Really!</p>
<p>In the book <a href=3D"https://beej.us/guide/url/tpop"><em>The Practice =
of Programming</em></a><a href=3D"https://beej.us/guide/bgnet/html/#fn37" c=
lass=3D"footnote-ref" id=3D"fnref37" role=3D"doc-noteref"><sup>37</sup></a>=
 by Kernighan and Pike, they implement <code>printf()</code>-like functions=
 called <code>pack()</code> and <code>unpack()</code> that do exactly this.=
 I=E2=80=99d link to them, but apparently those functions aren=E2=80=99t on=
line with the rest of the source from the book.</p>
<p>(The Practice of Programming is an excellent read. Zeus saves a kitten e=
very time I recommend it.)</p>
<p>At this point, I=E2=80=99m going to drop a pointer to a <a href=3D"https=
://github.com/protobuf-c/protobuf-c">Protocol Buffers implementation in C</=
a><a href=3D"https://beej.us/guide/bgnet/html/#fn38" class=3D"footnote-ref"=
 id=3D"fnref38" role=3D"doc-noteref"><sup>38</sup></a> which I=E2=80=99ve n=
ever used, but looks completely respectable. Python and Perl programmers wi=
ll want to check out their language=E2=80=99s <code>pack()</code> and <code=
>unpack()</code> functions for accomplishing the same thing. And Java has a=
 big-ol=E2=80=99 Serializable interface that can be used in a similar way.<=
/p>
<p>But if you want to write your own packing utility in C, K&amp;P=E2=80=99=
s trick is to use variable argument lists to make <code>printf()</code>-lik=
e functions to build the packets. <a href=3D"https://beej.us/guide/bgnet/ex=
amples/pack2.c">Here=E2=80=99s a version I cooked up</a><a href=3D"https://=
beej.us/guide/bgnet/html/#fn39" class=3D"footnote-ref" id=3D"fnref39" role=
=3D"doc-noteref"><sup>39</sup></a> on my own based on that which hopefully =
will be enough to give you an idea of how such a thing can work.</p>
<p>(This code references the <code>pack754()</code> functions, above. The <=
code>packi*()</code> functions operate like the familiar <code>htons()</cod=
e> family, except they pack into a <code>char</code> array instead of anoth=
er integer.)</p>
<div class=3D"sourceCode" id=3D"cb68"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb68-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb68-1"></a><span class=3D"pp">#include =
</span><span class=3D"im">&lt;stdio.h&gt;</span></span>
<span id=3D"cb68-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-2"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;ctype.h&gt;</sp=
an></span>
<span id=3D"cb68-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-3"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdarg.h&gt;</s=
pan></span>
<span id=3D"cb68-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-4"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;string.h&gt;</s=
pan></span>
<span id=3D"cb68-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-5"></=
a></span>
<span id=3D"cb68-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-6"></=
a><span class=3D"co">/*</span></span>
<span id=3D"cb68-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-7"></=
a><span class=3D"co">** packi16() -- store a 16-bit int into a char buffer =
(like htons())</span></span>
<span id=3D"cb68-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-8"></=
a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-9"></=
a><span class=3D"dt">void</span> packi16(<span class=3D"dt">unsigned</span>=
 <span class=3D"dt">char</span> *buf, <span class=3D"dt">unsigned</span> <s=
pan class=3D"dt">int</span> i)</span>
<span id=3D"cb68-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-10">=
</a>{</span>
<span id=3D"cb68-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-11">=
</a>    *buf++ =3D i&gt;&gt;<span class=3D"dv">8</span>; *buf++ =3D i;</spa=
n>
<span id=3D"cb68-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-12">=
</a>}</span>
<span id=3D"cb68-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-13">=
</a></span>
<span id=3D"cb68-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-14">=
</a><span class=3D"co">/*</span></span>
<span id=3D"cb68-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-15">=
</a><span class=3D"co">** packi32() -- store a 32-bit int into a char buffe=
r (like htonl())</span></span>
<span id=3D"cb68-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-16">=
</a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-17">=
</a><span class=3D"dt">void</span> packi32(<span class=3D"dt">unsigned</spa=
n> <span class=3D"dt">char</span> *buf, <span class=3D"dt">unsigned</span> =
<span class=3D"dt">long</span> <span class=3D"dt">int</span> i)</span>
<span id=3D"cb68-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-18">=
</a>{</span>
<span id=3D"cb68-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-19">=
</a>    *buf++ =3D i&gt;&gt;<span class=3D"dv">24</span>; *buf++ =3D i&gt;&=
gt;<span class=3D"dv">16</span>;</span>
<span id=3D"cb68-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-20">=
</a>    *buf++ =3D i&gt;&gt;<span class=3D"dv">8</span>;  *buf++ =3D i;</sp=
an>
<span id=3D"cb68-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-21">=
</a>}</span>
<span id=3D"cb68-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-22">=
</a></span>
<span id=3D"cb68-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-23">=
</a><span class=3D"co">/*</span></span>
<span id=3D"cb68-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-24">=
</a><span class=3D"co">** packi64() -- store a 64-bit int into a char buffe=
r (like htonl())</span></span>
<span id=3D"cb68-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-25">=
</a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-26">=
</a><span class=3D"dt">void</span> packi64(<span class=3D"dt">unsigned</spa=
n> <span class=3D"dt">char</span> *buf, <span class=3D"dt">unsigned</span> =
<span class=3D"dt">long</span> <span class=3D"dt">long</span> <span class=
=3D"dt">int</span> i)</span>
<span id=3D"cb68-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-27">=
</a>{</span>
<span id=3D"cb68-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-28">=
</a>    *buf++ =3D i&gt;&gt;<span class=3D"dv">56</span>; *buf++ =3D i&gt;&=
gt;<span class=3D"dv">48</span>;</span>
<span id=3D"cb68-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-29">=
</a>    *buf++ =3D i&gt;&gt;<span class=3D"dv">40</span>; *buf++ =3D i&gt;&=
gt;<span class=3D"dv">32</span>;</span>
<span id=3D"cb68-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-30">=
</a>    *buf++ =3D i&gt;&gt;<span class=3D"dv">24</span>; *buf++ =3D i&gt;&=
gt;<span class=3D"dv">16</span>;</span>
<span id=3D"cb68-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-31">=
</a>    *buf++ =3D i&gt;&gt;<span class=3D"dv">8</span>;  *buf++ =3D i;</sp=
an>
<span id=3D"cb68-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-32">=
</a>}</span>
<span id=3D"cb68-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-33">=
</a></span>
<span id=3D"cb68-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-34">=
</a><span class=3D"co">/*</span></span>
<span id=3D"cb68-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-35">=
</a><span class=3D"co">** unpacki16() -- unpack a 16-bit int from a char bu=
ffer (like ntohs())</span></span>
<span id=3D"cb68-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-36">=
</a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-37">=
</a><span class=3D"dt">int</span> unpacki16(<span class=3D"dt">unsigned</sp=
an> <span class=3D"dt">char</span> *buf)</span>
<span id=3D"cb68-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-38">=
</a>{</span>
<span id=3D"cb68-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-39">=
</a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">int</span> i2=
 =3D ((<span class=3D"dt">unsigned</span> <span class=3D"dt">int</span>)buf=
[<span class=3D"dv">0</span>]&lt;&lt;<span class=3D"dv">8</span>) | buf[<sp=
an class=3D"dv">1</span>];</span>
<span id=3D"cb68-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-40">=
</a>    <span class=3D"dt">int</span> i;</span>
<span id=3D"cb68-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-41">=
</a></span>
<span id=3D"cb68-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-42">=
</a>    <span class=3D"co">// change unsigned numbers to signed</span></spa=
n>
<span id=3D"cb68-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-43">=
</a>    <span class=3D"cf">if</span> (i2 &lt;=3D <span class=3D"bn">0x7fff<=
/span><span class=3D"bu">u</span>) { i =3D i2; }</span>
<span id=3D"cb68-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-44">=
</a>    <span class=3D"cf">else</span> { i =3D -<span class=3D"dv">1</span>=
 - (<span class=3D"dt">unsigned</span> <span class=3D"dt">int</span>)(<span=
 class=3D"bn">0xffff</span><span class=3D"bu">u</span> - i2); }</span>
<span id=3D"cb68-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-45">=
</a></span>
<span id=3D"cb68-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-46">=
</a>    <span class=3D"cf">return</span> i;</span>
<span id=3D"cb68-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-47">=
</a>}</span>
<span id=3D"cb68-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-48">=
</a></span>
<span id=3D"cb68-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-49">=
</a><span class=3D"co">/*</span></span>
<span id=3D"cb68-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-50">=
</a><span class=3D"co">** unpacku16() -- unpack a 16-bit unsigned from a ch=
ar buffer (like ntohs())</span></span>
<span id=3D"cb68-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-51">=
</a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-52">=
</a><span class=3D"dt">unsigned</span> <span class=3D"dt">int</span> unpack=
u16(<span class=3D"dt">unsigned</span> <span class=3D"dt">char</span> *buf)=
</span>
<span id=3D"cb68-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-53">=
</a>{</span>
<span id=3D"cb68-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-54">=
</a>    <span class=3D"cf">return</span> ((<span class=3D"dt">unsigned</spa=
n> <span class=3D"dt">int</span>)buf[<span class=3D"dv">0</span>]&lt;&lt;<s=
pan class=3D"dv">8</span>) | buf[<span class=3D"dv">1</span>];</span>
<span id=3D"cb68-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-55">=
</a>}</span>
<span id=3D"cb68-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-56">=
</a></span>
<span id=3D"cb68-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-57">=
</a><span class=3D"co">/*</span></span>
<span id=3D"cb68-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-58">=
</a><span class=3D"co">** unpacki32() -- unpack a 32-bit int from a char bu=
ffer (like ntohl())</span></span>
<span id=3D"cb68-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-59">=
</a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-60"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-60">=
</a><span class=3D"dt">long</span> <span class=3D"dt">int</span> unpacki32(=
<span class=3D"dt">unsigned</span> <span class=3D"dt">char</span> *buf)</sp=
an>
<span id=3D"cb68-61"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-61">=
</a>{</span>
<span id=3D"cb68-62"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-62">=
</a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">long</span> <=
span class=3D"dt">int</span> i2 =3D ((<span class=3D"dt">unsigned</span> <s=
pan class=3D"dt">long</span> <span class=3D"dt">int</span>)buf[<span class=
=3D"dv">0</span>]&lt;&lt;<span class=3D"dv">24</span>) |</span>
<span id=3D"cb68-63"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-63">=
</a>                           ((<span class=3D"dt">unsigned</span> <span c=
lass=3D"dt">long</span> <span class=3D"dt">int</span>)buf[<span class=3D"dv=
">1</span>]&lt;&lt;<span class=3D"dv">16</span>) |</span>
<span id=3D"cb68-64"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-64">=
</a>                           ((<span class=3D"dt">unsigned</span> <span c=
lass=3D"dt">long</span> <span class=3D"dt">int</span>)buf[<span class=3D"dv=
">2</span>]&lt;&lt;<span class=3D"dv">8</span>)  |</span>
<span id=3D"cb68-65"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-65">=
</a>                           buf[<span class=3D"dv">3</span>];</span>
<span id=3D"cb68-66"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-66">=
</a>    <span class=3D"dt">long</span> <span class=3D"dt">int</span> i;</sp=
an>
<span id=3D"cb68-67"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-67">=
</a></span>
<span id=3D"cb68-68"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-68">=
</a>    <span class=3D"co">// change unsigned numbers to signed</span></spa=
n>
<span id=3D"cb68-69"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-69">=
</a>    <span class=3D"cf">if</span> (i2 &lt;=3D <span class=3D"bn">0x7ffff=
fff</span><span class=3D"bu">u</span>) { i =3D i2; }</span>
<span id=3D"cb68-70"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-70">=
</a>    <span class=3D"cf">else</span> { i =3D -<span class=3D"dv">1</span>=
 - (<span class=3D"dt">long</span> <span class=3D"dt">int</span>)(<span cla=
ss=3D"bn">0xffffffff</span><span class=3D"bu">u</span> - i2); }</span>
<span id=3D"cb68-71"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-71">=
</a></span>
<span id=3D"cb68-72"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-72">=
</a>    <span class=3D"cf">return</span> i;</span>
<span id=3D"cb68-73"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-73">=
</a>}</span>
<span id=3D"cb68-74"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-74">=
</a></span>
<span id=3D"cb68-75"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-75">=
</a><span class=3D"co">/*</span></span>
<span id=3D"cb68-76"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-76">=
</a><span class=3D"co">** unpacku32() -- unpack a 32-bit unsigned from a ch=
ar buffer (like ntohl())</span></span>
<span id=3D"cb68-77"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-77">=
</a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-78"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-78">=
</a><span class=3D"dt">unsigned</span> <span class=3D"dt">long</span> <span=
 class=3D"dt">int</span> unpacku32(<span class=3D"dt">unsigned</span> <span=
 class=3D"dt">char</span> *buf)</span>
<span id=3D"cb68-79"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-79">=
</a>{</span>
<span id=3D"cb68-80"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-80">=
</a>    <span class=3D"cf">return</span> ((<span class=3D"dt">unsigned</spa=
n> <span class=3D"dt">long</span> <span class=3D"dt">int</span>)buf[<span c=
lass=3D"dv">0</span>]&lt;&lt;<span class=3D"dv">24</span>) |</span>
<span id=3D"cb68-81"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-81">=
</a>           ((<span class=3D"dt">unsigned</span> <span class=3D"dt">long=
</span> <span class=3D"dt">int</span>)buf[<span class=3D"dv">1</span>]&lt;&=
lt;<span class=3D"dv">16</span>) |</span>
<span id=3D"cb68-82"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-82">=
</a>           ((<span class=3D"dt">unsigned</span> <span class=3D"dt">long=
</span> <span class=3D"dt">int</span>)buf[<span class=3D"dv">2</span>]&lt;&=
lt;<span class=3D"dv">8</span>)  |</span>
<span id=3D"cb68-83"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-83">=
</a>           buf[<span class=3D"dv">3</span>];</span>
<span id=3D"cb68-84"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-84">=
</a>}</span>
<span id=3D"cb68-85"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-85">=
</a></span>
<span id=3D"cb68-86"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-86">=
</a><span class=3D"co">/*</span></span>
<span id=3D"cb68-87"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-87">=
</a><span class=3D"co">** unpacki64() -- unpack a 64-bit int from a char bu=
ffer (like ntohl())</span></span>
<span id=3D"cb68-88"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-88">=
</a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-89"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-89">=
</a><span class=3D"dt">long</span> <span class=3D"dt">long</span> <span cla=
ss=3D"dt">int</span> unpacki64(<span class=3D"dt">unsigned</span> <span cla=
ss=3D"dt">char</span> *buf)</span>
<span id=3D"cb68-90"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-90">=
</a>{</span>
<span id=3D"cb68-91"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-91">=
</a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">long</span> <=
span class=3D"dt">long</span> <span class=3D"dt">int</span> i2 =3D ((<span =
class=3D"dt">unsigned</span> <span class=3D"dt">long</span> <span class=3D"=
dt">long</span> <span class=3D"dt">int</span>)buf[<span class=3D"dv">0</spa=
n>]&lt;&lt;<span class=3D"dv">56</span>) |</span>
<span id=3D"cb68-92"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-92">=
</a>                                ((<span class=3D"dt">unsigned</span> <s=
pan class=3D"dt">long</span> <span class=3D"dt">long</span> <span class=3D"=
dt">int</span>)buf[<span class=3D"dv">1</span>]&lt;&lt;<span class=3D"dv">4=
8</span>) |</span>
<span id=3D"cb68-93"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-93">=
</a>                                ((<span class=3D"dt">unsigned</span> <s=
pan class=3D"dt">long</span> <span class=3D"dt">long</span> <span class=3D"=
dt">int</span>)buf[<span class=3D"dv">2</span>]&lt;&lt;<span class=3D"dv">4=
0</span>) |</span>
<span id=3D"cb68-94"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-94">=
</a>                                ((<span class=3D"dt">unsigned</span> <s=
pan class=3D"dt">long</span> <span class=3D"dt">long</span> <span class=3D"=
dt">int</span>)buf[<span class=3D"dv">3</span>]&lt;&lt;<span class=3D"dv">3=
2</span>) |</span>
<span id=3D"cb68-95"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-95">=
</a>                                ((<span class=3D"dt">unsigned</span> <s=
pan class=3D"dt">long</span> <span class=3D"dt">long</span> <span class=3D"=
dt">int</span>)buf[<span class=3D"dv">4</span>]&lt;&lt;<span class=3D"dv">2=
4</span>) |</span>
<span id=3D"cb68-96"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-96">=
</a>                                ((<span class=3D"dt">unsigned</span> <s=
pan class=3D"dt">long</span> <span class=3D"dt">long</span> <span class=3D"=
dt">int</span>)buf[<span class=3D"dv">5</span>]&lt;&lt;<span class=3D"dv">1=
6</span>) |</span>
<span id=3D"cb68-97"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-97">=
</a>                                ((<span class=3D"dt">unsigned</span> <s=
pan class=3D"dt">long</span> <span class=3D"dt">long</span> <span class=3D"=
dt">int</span>)buf[<span class=3D"dv">6</span>]&lt;&lt;<span class=3D"dv">8=
</span>)  |</span>
<span id=3D"cb68-98"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-98">=
</a>                                buf[<span class=3D"dv">7</span>];</span=
>
<span id=3D"cb68-99"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-99">=
</a>    <span class=3D"dt">long</span> <span class=3D"dt">long</span> <span=
 class=3D"dt">int</span> i;</span>
<span id=3D"cb68-100"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-100=
"></a></span>
<span id=3D"cb68-101"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-101=
"></a>    <span class=3D"co">// change unsigned numbers to signed</span></s=
pan>
<span id=3D"cb68-102"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-102=
"></a>    <span class=3D"cf">if</span> (i2 &lt;=3D <span class=3D"bn">0x7ff=
fffffffffffff</span><span class=3D"bu">u</span>) { i =3D i2; }</span>
<span id=3D"cb68-103"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-103=
"></a>    <span class=3D"cf">else</span> { i =3D -<span class=3D"dv">1</spa=
n> -(<span class=3D"dt">long</span> <span class=3D"dt">long</span> <span cl=
ass=3D"dt">int</span>)(<span class=3D"bn">0xffffffffffffffff</span><span cl=
ass=3D"bu">u</span> - i2); }</span>
<span id=3D"cb68-104"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-104=
"></a></span>
<span id=3D"cb68-105"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-105=
"></a>    <span class=3D"cf">return</span> i;</span>
<span id=3D"cb68-106"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-106=
"></a>}</span>
<span id=3D"cb68-107"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-107=
"></a></span>
<span id=3D"cb68-108"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-108=
"></a><span class=3D"co">/*</span></span>
<span id=3D"cb68-109"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-109=
"></a><span class=3D"co">** unpacku64() -- unpack a 64-bit unsigned from a =
char buffer (like ntohl())</span></span>
<span id=3D"cb68-110"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-110=
"></a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-111"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-111=
"></a><span class=3D"dt">unsigned</span> <span class=3D"dt">long</span> <sp=
an class=3D"dt">long</span> <span class=3D"dt">int</span> unpacku64(<span c=
lass=3D"dt">unsigned</span> <span class=3D"dt">char</span> *buf)</span>
<span id=3D"cb68-112"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-112=
"></a>{</span>
<span id=3D"cb68-113"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-113=
"></a>    <span class=3D"cf">return</span> ((<span class=3D"dt">unsigned</s=
pan> <span class=3D"dt">long</span> <span class=3D"dt">long</span> <span cl=
ass=3D"dt">int</span>)buf[<span class=3D"dv">0</span>]&lt;&lt;<span class=
=3D"dv">56</span>) |</span>
<span id=3D"cb68-114"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-114=
"></a>           ((<span class=3D"dt">unsigned</span> <span class=3D"dt">lo=
ng</span> <span class=3D"dt">long</span> <span class=3D"dt">int</span>)buf[=
<span class=3D"dv">1</span>]&lt;&lt;<span class=3D"dv">48</span>) |</span>
<span id=3D"cb68-115"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-115=
"></a>           ((<span class=3D"dt">unsigned</span> <span class=3D"dt">lo=
ng</span> <span class=3D"dt">long</span> <span class=3D"dt">int</span>)buf[=
<span class=3D"dv">2</span>]&lt;&lt;<span class=3D"dv">40</span>) |</span>
<span id=3D"cb68-116"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-116=
"></a>           ((<span class=3D"dt">unsigned</span> <span class=3D"dt">lo=
ng</span> <span class=3D"dt">long</span> <span class=3D"dt">int</span>)buf[=
<span class=3D"dv">3</span>]&lt;&lt;<span class=3D"dv">32</span>) |</span>
<span id=3D"cb68-117"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-117=
"></a>           ((<span class=3D"dt">unsigned</span> <span class=3D"dt">lo=
ng</span> <span class=3D"dt">long</span> <span class=3D"dt">int</span>)buf[=
<span class=3D"dv">4</span>]&lt;&lt;<span class=3D"dv">24</span>) |</span>
<span id=3D"cb68-118"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-118=
"></a>           ((<span class=3D"dt">unsigned</span> <span class=3D"dt">lo=
ng</span> <span class=3D"dt">long</span> <span class=3D"dt">int</span>)buf[=
<span class=3D"dv">5</span>]&lt;&lt;<span class=3D"dv">16</span>) |</span>
<span id=3D"cb68-119"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-119=
"></a>           ((<span class=3D"dt">unsigned</span> <span class=3D"dt">lo=
ng</span> <span class=3D"dt">long</span> <span class=3D"dt">int</span>)buf[=
<span class=3D"dv">6</span>]&lt;&lt;<span class=3D"dv">8</span>)  |</span>
<span id=3D"cb68-120"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-120=
"></a>           buf[<span class=3D"dv">7</span>];</span>
<span id=3D"cb68-121"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-121=
"></a>}</span>
<span id=3D"cb68-122"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-122=
"></a></span>
<span id=3D"cb68-123"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-123=
"></a><span class=3D"co">/*</span></span>
<span id=3D"cb68-124"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-124=
"></a><span class=3D"co">** pack() -- store data dictated by the format str=
ing in the buffer</span></span>
<span id=3D"cb68-125"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-125=
"></a><span class=3D"co">**</span></span>
<span id=3D"cb68-126"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-126=
"></a><span class=3D"co">**   bits |signed   unsigned   float   string</spa=
n></span>
<span id=3D"cb68-127"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-127=
"></a><span class=3D"co">**   -----+----------------------------------</spa=
n></span>
<span id=3D"cb68-128"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-128=
"></a><span class=3D"co">**      8 |   c        C         </span></span>
<span id=3D"cb68-129"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-129=
"></a><span class=3D"co">**     16 |   h        H         f</span></span>
<span id=3D"cb68-130"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-130=
"></a><span class=3D"co">**     32 |   l        L         d</span></span>
<span id=3D"cb68-131"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-131=
"></a><span class=3D"co">**     64 |   q        Q         g</span></span>
<span id=3D"cb68-132"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-132=
"></a><span class=3D"co">**      - |                               s</span>=
</span>
<span id=3D"cb68-133"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-133=
"></a><span class=3D"co">**</span></span>
<span id=3D"cb68-134"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-134=
"></a><span class=3D"co">**  (16-bit unsigned length is automatically prepe=
nded to strings)</span></span>
<span id=3D"cb68-135"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-135=
"></a><span class=3D"co">*/</span> </span>
<span id=3D"cb68-136"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-136=
"></a></span>
<span id=3D"cb68-137"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-137=
"></a><span class=3D"dt">unsigned</span> <span class=3D"dt">int</span> pack=
(<span class=3D"dt">unsigned</span> <span class=3D"dt">char</span> *buf, <s=
pan class=3D"dt">char</span> *format, ...)</span>
<span id=3D"cb68-138"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-138=
"></a>{</span>
<span id=3D"cb68-139"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-139=
"></a>    <span class=3D"dt">va_list</span> ap;</span>
<span id=3D"cb68-140"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-140=
"></a></span>
<span id=3D"cb68-141"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-141=
"></a>    <span class=3D"dt">signed</span> <span class=3D"dt">char</span> c=
;              <span class=3D"co">// 8-bit</span></span>
<span id=3D"cb68-142"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-142=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">char</span>=
 C;</span>
<span id=3D"cb68-143"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-143=
"></a></span>
<span id=3D"cb68-144"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-144=
"></a>    <span class=3D"dt">int</span> h;                      <span class=
=3D"co">// 16-bit</span></span>
<span id=3D"cb68-145"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-145=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">int</span> =
H;</span>
<span id=3D"cb68-146"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-146=
"></a></span>
<span id=3D"cb68-147"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-147=
"></a>    <span class=3D"dt">long</span> <span class=3D"dt">int</span> l;  =
               <span class=3D"co">// 32-bit</span></span>
<span id=3D"cb68-148"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-148=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">long</span>=
 <span class=3D"dt">int</span> L;</span>
<span id=3D"cb68-149"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-149=
"></a></span>
<span id=3D"cb68-150"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-150=
"></a>    <span class=3D"dt">long</span> <span class=3D"dt">long</span> <sp=
an class=3D"dt">int</span> q;            <span class=3D"co">// 64-bit</span=
></span>
<span id=3D"cb68-151"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-151=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">long</span>=
 <span class=3D"dt">long</span> <span class=3D"dt">int</span> Q;</span>
<span id=3D"cb68-152"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-152=
"></a></span>
<span id=3D"cb68-153"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-153=
"></a>    <span class=3D"dt">float</span> f;                    <span class=
=3D"co">// floats</span></span>
<span id=3D"cb68-154"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-154=
"></a>    <span class=3D"dt">double</span> d;</span>
<span id=3D"cb68-155"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-155=
"></a>    <span class=3D"dt">long</span> <span class=3D"dt">double</span> g=
;</span>
<span id=3D"cb68-156"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-156=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">long</span>=
 <span class=3D"dt">long</span> <span class=3D"dt">int</span> fhold;</span>
<span id=3D"cb68-157"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-157=
"></a></span>
<span id=3D"cb68-158"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-158=
"></a>    <span class=3D"dt">char</span> *s;                    <span class=
=3D"co">// strings</span></span>
<span id=3D"cb68-159"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-159=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">int</span> =
len;</span>
<span id=3D"cb68-160"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-160=
"></a></span>
<span id=3D"cb68-161"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-161=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">int</span> =
size =3D <span class=3D"dv">0</span>;</span>
<span id=3D"cb68-162"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-162=
"></a></span>
<span id=3D"cb68-163"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-163=
"></a>    va_start(ap, format);</span>
<span id=3D"cb68-164"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-164=
"></a></span>
<span id=3D"cb68-165"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-165=
"></a>    <span class=3D"cf">for</span>(; *format !=3D <span class=3D"ch">'=
\0'</span>; format++) {</span>
<span id=3D"cb68-166"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-166=
"></a>        <span class=3D"cf">switch</span>(*format) {</span>
<span id=3D"cb68-167"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-167=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'c'</span>:=
 <span class=3D"co">// 8-bit</span></span>
<span id=3D"cb68-168"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-168=
"></a>            size +=3D <span class=3D"dv">1</span>;</span>
<span id=3D"cb68-169"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-169=
"></a>            c =3D (<span class=3D"dt">signed</span> <span class=3D"dt=
">char</span>)va_arg(ap, <span class=3D"dt">int</span>); <span class=3D"co"=
>// promoted</span></span>
<span id=3D"cb68-170"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-170=
"></a>            *buf++ =3D c;</span>
<span id=3D"cb68-171"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-171=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-172"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-172=
"></a></span>
<span id=3D"cb68-173"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-173=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'C'</span>:=
 <span class=3D"co">// 8-bit unsigned</span></span>
<span id=3D"cb68-174"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-174=
"></a>            size +=3D <span class=3D"dv">1</span>;</span>
<span id=3D"cb68-175"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-175=
"></a>            C =3D (<span class=3D"dt">unsigned</span> <span class=3D"=
dt">char</span>)va_arg(ap, <span class=3D"dt">unsigned</span> <span class=
=3D"dt">int</span>); <span class=3D"co">// promoted</span></span>
<span id=3D"cb68-176"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-176=
"></a>            *buf++ =3D C;</span>
<span id=3D"cb68-177"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-177=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-178"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-178=
"></a></span>
<span id=3D"cb68-179"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-179=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'h'</span>:=
 <span class=3D"co">// 16-bit</span></span>
<span id=3D"cb68-180"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-180=
"></a>            size +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-181"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-181=
"></a>            h =3D va_arg(ap, <span class=3D"dt">int</span>);</span>
<span id=3D"cb68-182"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-182=
"></a>            packi16(buf, h);</span>
<span id=3D"cb68-183"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-183=
"></a>            buf +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-184"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-184=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-185"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-185=
"></a></span>
<span id=3D"cb68-186"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-186=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'H'</span>:=
 <span class=3D"co">// 16-bit unsigned</span></span>
<span id=3D"cb68-187"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-187=
"></a>            size +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-188"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-188=
"></a>            H =3D va_arg(ap, <span class=3D"dt">unsigned</span> <span=
 class=3D"dt">int</span>);</span>
<span id=3D"cb68-189"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-189=
"></a>            packi16(buf, H);</span>
<span id=3D"cb68-190"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-190=
"></a>            buf +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-191"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-191=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-192"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-192=
"></a></span>
<span id=3D"cb68-193"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-193=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'l'</span>:=
 <span class=3D"co">// 32-bit</span></span>
<span id=3D"cb68-194"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-194=
"></a>            size +=3D <span class=3D"dv">4</span>;</span>
<span id=3D"cb68-195"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-195=
"></a>            l =3D va_arg(ap, <span class=3D"dt">long</span> <span cla=
ss=3D"dt">int</span>);</span>
<span id=3D"cb68-196"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-196=
"></a>            packi32(buf, l);</span>
<span id=3D"cb68-197"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-197=
"></a>            buf +=3D <span class=3D"dv">4</span>;</span>
<span id=3D"cb68-198"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-198=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-199"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-199=
"></a></span>
<span id=3D"cb68-200"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-200=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'L'</span>:=
 <span class=3D"co">// 32-bit unsigned</span></span>
<span id=3D"cb68-201"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-201=
"></a>            size +=3D <span class=3D"dv">4</span>;</span>
<span id=3D"cb68-202"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-202=
"></a>            L =3D va_arg(ap, <span class=3D"dt">unsigned</span> <span=
 class=3D"dt">long</span> <span class=3D"dt">int</span>);</span>
<span id=3D"cb68-203"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-203=
"></a>            packi32(buf, L);</span>
<span id=3D"cb68-204"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-204=
"></a>            buf +=3D <span class=3D"dv">4</span>;</span>
<span id=3D"cb68-205"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-205=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-206"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-206=
"></a></span>
<span id=3D"cb68-207"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-207=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'q'</span>:=
 <span class=3D"co">// 64-bit</span></span>
<span id=3D"cb68-208"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-208=
"></a>            size +=3D <span class=3D"dv">8</span>;</span>
<span id=3D"cb68-209"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-209=
"></a>            q =3D va_arg(ap, <span class=3D"dt">long</span> <span cla=
ss=3D"dt">long</span> <span class=3D"dt">int</span>);</span>
<span id=3D"cb68-210"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-210=
"></a>            packi64(buf, q);</span>
<span id=3D"cb68-211"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-211=
"></a>            buf +=3D <span class=3D"dv">8</span>;</span>
<span id=3D"cb68-212"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-212=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-213"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-213=
"></a></span>
<span id=3D"cb68-214"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-214=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'Q'</span>:=
 <span class=3D"co">// 64-bit unsigned</span></span>
<span id=3D"cb68-215"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-215=
"></a>            size +=3D <span class=3D"dv">8</span>;</span>
<span id=3D"cb68-216"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-216=
"></a>            Q =3D va_arg(ap, <span class=3D"dt">unsigned</span> <span=
 class=3D"dt">long</span> <span class=3D"dt">long</span> <span class=3D"dt"=
>int</span>);</span>
<span id=3D"cb68-217"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-217=
"></a>            packi64(buf, Q);</span>
<span id=3D"cb68-218"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-218=
"></a>            buf +=3D <span class=3D"dv">8</span>;</span>
<span id=3D"cb68-219"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-219=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-220"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-220=
"></a></span>
<span id=3D"cb68-221"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-221=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'f'</span>:=
 <span class=3D"co">// float-16</span></span>
<span id=3D"cb68-222"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-222=
"></a>            size +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-223"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-223=
"></a>            f =3D (<span class=3D"dt">float</span>)va_arg(ap, <span c=
lass=3D"dt">double</span>); <span class=3D"co">// promoted</span></span>
<span id=3D"cb68-224"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-224=
"></a>            fhold =3D pack754_16(f); <span class=3D"co">// convert to=
 IEEE 754</span></span>
<span id=3D"cb68-225"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-225=
"></a>            packi16(buf, fhold);</span>
<span id=3D"cb68-226"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-226=
"></a>            buf +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-227"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-227=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-228"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-228=
"></a></span>
<span id=3D"cb68-229"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-229=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'d'</span>:=
 <span class=3D"co">// float-32</span></span>
<span id=3D"cb68-230"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-230=
"></a>            size +=3D <span class=3D"dv">4</span>;</span>
<span id=3D"cb68-231"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-231=
"></a>            d =3D va_arg(ap, <span class=3D"dt">double</span>);</span=
>
<span id=3D"cb68-232"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-232=
"></a>            fhold =3D pack754_32(d); <span class=3D"co">// convert to=
 IEEE 754</span></span>
<span id=3D"cb68-233"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-233=
"></a>            packi32(buf, fhold);</span>
<span id=3D"cb68-234"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-234=
"></a>            buf +=3D <span class=3D"dv">4</span>;</span>
<span id=3D"cb68-235"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-235=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-236"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-236=
"></a></span>
<span id=3D"cb68-237"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-237=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'g'</span>:=
 <span class=3D"co">// float-64</span></span>
<span id=3D"cb68-238"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-238=
"></a>            size +=3D <span class=3D"dv">8</span>;</span>
<span id=3D"cb68-239"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-239=
"></a>            g =3D va_arg(ap, <span class=3D"dt">long</span> <span cla=
ss=3D"dt">double</span>);</span>
<span id=3D"cb68-240"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-240=
"></a>            fhold =3D pack754_64(g); <span class=3D"co">// convert to=
 IEEE 754</span></span>
<span id=3D"cb68-241"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-241=
"></a>            packi64(buf, fhold);</span>
<span id=3D"cb68-242"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-242=
"></a>            buf +=3D <span class=3D"dv">8</span>;</span>
<span id=3D"cb68-243"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-243=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-244"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-244=
"></a></span>
<span id=3D"cb68-245"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-245=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'s'</span>:=
 <span class=3D"co">// string</span></span>
<span id=3D"cb68-246"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-246=
"></a>            s =3D va_arg(ap, <span class=3D"dt">char</span>*);</span>
<span id=3D"cb68-247"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-247=
"></a>            len =3D strlen(s);</span>
<span id=3D"cb68-248"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-248=
"></a>            size +=3D len + <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-249"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-249=
"></a>            packi16(buf, len);</span>
<span id=3D"cb68-250"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-250=
"></a>            buf +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-251"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-251=
"></a>            memcpy(buf, s, len);</span>
<span id=3D"cb68-252"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-252=
"></a>            buf +=3D len;</span>
<span id=3D"cb68-253"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-253=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-254"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-254=
"></a>        }</span>
<span id=3D"cb68-255"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-255=
"></a>    }</span>
<span id=3D"cb68-256"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-256=
"></a></span>
<span id=3D"cb68-257"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-257=
"></a>    va_end(ap);</span>
<span id=3D"cb68-258"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-258=
"></a></span>
<span id=3D"cb68-259"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-259=
"></a>    <span class=3D"cf">return</span> size;</span>
<span id=3D"cb68-260"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-260=
"></a>}</span>
<span id=3D"cb68-261"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-261=
"></a></span>
<span id=3D"cb68-262"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-262=
"></a><span class=3D"co">/*</span></span>
<span id=3D"cb68-263"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-263=
"></a><span class=3D"co">** unpack() -- unpack data dictated by the format =
string into the buffer</span></span>
<span id=3D"cb68-264"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-264=
"></a><span class=3D"co">**</span></span>
<span id=3D"cb68-265"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-265=
"></a><span class=3D"co">**   bits |signed   unsigned   float   string</spa=
n></span>
<span id=3D"cb68-266"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-266=
"></a><span class=3D"co">**   -----+----------------------------------</spa=
n></span>
<span id=3D"cb68-267"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-267=
"></a><span class=3D"co">**      8 |   c        C         </span></span>
<span id=3D"cb68-268"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-268=
"></a><span class=3D"co">**     16 |   h        H         f</span></span>
<span id=3D"cb68-269"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-269=
"></a><span class=3D"co">**     32 |   l        L         d</span></span>
<span id=3D"cb68-270"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-270=
"></a><span class=3D"co">**     64 |   q        Q         g</span></span>
<span id=3D"cb68-271"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-271=
"></a><span class=3D"co">**      - |                               s</span>=
</span>
<span id=3D"cb68-272"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-272=
"></a><span class=3D"co">**</span></span>
<span id=3D"cb68-273"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-273=
"></a><span class=3D"co">**  (string is extracted based on its stored lengt=
h, but 's' can be</span></span>
<span id=3D"cb68-274"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-274=
"></a><span class=3D"co">**  prepended with a max length)</span></span>
<span id=3D"cb68-275"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-275=
"></a><span class=3D"co">*/</span></span>
<span id=3D"cb68-276"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-276=
"></a><span class=3D"dt">void</span> unpack(<span class=3D"dt">unsigned</sp=
an> <span class=3D"dt">char</span> *buf, <span class=3D"dt">char</span> *fo=
rmat, ...)</span>
<span id=3D"cb68-277"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-277=
"></a>{</span>
<span id=3D"cb68-278"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-278=
"></a>    <span class=3D"dt">va_list</span> ap;</span>
<span id=3D"cb68-279"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-279=
"></a></span>
<span id=3D"cb68-280"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-280=
"></a>    <span class=3D"dt">signed</span> <span class=3D"dt">char</span> *=
c;              <span class=3D"co">// 8-bit</span></span>
<span id=3D"cb68-281"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-281=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">char</span>=
 *C;</span>
<span id=3D"cb68-282"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-282=
"></a></span>
<span id=3D"cb68-283"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-283=
"></a>    <span class=3D"dt">int</span> *h;                      <span clas=
s=3D"co">// 16-bit</span></span>
<span id=3D"cb68-284"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-284=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">int</span> =
*H;</span>
<span id=3D"cb68-285"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-285=
"></a></span>
<span id=3D"cb68-286"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-286=
"></a>    <span class=3D"dt">long</span> <span class=3D"dt">int</span> *l; =
                <span class=3D"co">// 32-bit</span></span>
<span id=3D"cb68-287"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-287=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">long</span>=
 <span class=3D"dt">int</span> *L;</span>
<span id=3D"cb68-288"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-288=
"></a></span>
<span id=3D"cb68-289"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-289=
"></a>    <span class=3D"dt">long</span> <span class=3D"dt">long</span> <sp=
an class=3D"dt">int</span> *q;            <span class=3D"co">// 64-bit</spa=
n></span>
<span id=3D"cb68-290"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-290=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">long</span>=
 <span class=3D"dt">long</span> <span class=3D"dt">int</span> *Q;</span>
<span id=3D"cb68-291"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-291=
"></a></span>
<span id=3D"cb68-292"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-292=
"></a>    <span class=3D"dt">float</span> *f;                    <span clas=
s=3D"co">// floats</span></span>
<span id=3D"cb68-293"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-293=
"></a>    <span class=3D"dt">double</span> *d;</span>
<span id=3D"cb68-294"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-294=
"></a>    <span class=3D"dt">long</span> <span class=3D"dt">double</span> *=
g;</span>
<span id=3D"cb68-295"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-295=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">long</span>=
 <span class=3D"dt">long</span> <span class=3D"dt">int</span> fhold;</span>
<span id=3D"cb68-296"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-296=
"></a></span>
<span id=3D"cb68-297"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-297=
"></a>    <span class=3D"dt">char</span> *s;</span>
<span id=3D"cb68-298"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-298=
"></a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">int</span> =
len, maxstrlen=3D<span class=3D"dv">0</span>, count;</span>
<span id=3D"cb68-299"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-299=
"></a></span>
<span id=3D"cb68-300"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-300=
"></a>    va_start(ap, format);</span>
<span id=3D"cb68-301"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-301=
"></a></span>
<span id=3D"cb68-302"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-302=
"></a>    <span class=3D"cf">for</span>(; *format !=3D <span class=3D"ch">'=
\0'</span>; format++) {</span>
<span id=3D"cb68-303"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-303=
"></a>        <span class=3D"cf">switch</span>(*format) {</span>
<span id=3D"cb68-304"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-304=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'c'</span>:=
 <span class=3D"co">// 8-bit</span></span>
<span id=3D"cb68-305"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-305=
"></a>            c =3D va_arg(ap, <span class=3D"dt">signed</span> <span c=
lass=3D"dt">char</span>*);</span>
<span id=3D"cb68-306"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-306=
"></a>            <span class=3D"cf">if</span> (*buf &lt;=3D <span class=3D=
"bn">0x7f</span>) { *c =3D *buf;} <span class=3D"co">// re-sign</span></spa=
n>
<span id=3D"cb68-307"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-307=
"></a>            <span class=3D"cf">else</span> { *c =3D -<span class=3D"d=
v">1</span> - (<span class=3D"dt">unsigned</span> <span class=3D"dt">char</=
span>)(<span class=3D"bn">0xff</span><span class=3D"bu">u</span> - *buf); }=
</span>
<span id=3D"cb68-308"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-308=
"></a>            buf++;</span>
<span id=3D"cb68-309"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-309=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-310"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-310=
"></a></span>
<span id=3D"cb68-311"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-311=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'C'</span>:=
 <span class=3D"co">// 8-bit unsigned</span></span>
<span id=3D"cb68-312"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-312=
"></a>            C =3D va_arg(ap, <span class=3D"dt">unsigned</span> <span=
 class=3D"dt">char</span>*);</span>
<span id=3D"cb68-313"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-313=
"></a>            *C =3D *buf++;</span>
<span id=3D"cb68-314"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-314=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-315"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-315=
"></a></span>
<span id=3D"cb68-316"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-316=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'h'</span>:=
 <span class=3D"co">// 16-bit</span></span>
<span id=3D"cb68-317"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-317=
"></a>            h =3D va_arg(ap, <span class=3D"dt">int</span>*);</span>
<span id=3D"cb68-318"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-318=
"></a>            *h =3D unpacki16(buf);</span>
<span id=3D"cb68-319"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-319=
"></a>            buf +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-320"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-320=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-321"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-321=
"></a></span>
<span id=3D"cb68-322"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-322=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'H'</span>:=
 <span class=3D"co">// 16-bit unsigned</span></span>
<span id=3D"cb68-323"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-323=
"></a>            H =3D va_arg(ap, <span class=3D"dt">unsigned</span> <span=
 class=3D"dt">int</span>*);</span>
<span id=3D"cb68-324"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-324=
"></a>            *H =3D unpacku16(buf);</span>
<span id=3D"cb68-325"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-325=
"></a>            buf +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-326"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-326=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-327"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-327=
"></a></span>
<span id=3D"cb68-328"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-328=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'l'</span>:=
 <span class=3D"co">// 32-bit</span></span>
<span id=3D"cb68-329"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-329=
"></a>            l =3D va_arg(ap, <span class=3D"dt">long</span> <span cla=
ss=3D"dt">int</span>*);</span>
<span id=3D"cb68-330"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-330=
"></a>            *l =3D unpacki32(buf);</span>
<span id=3D"cb68-331"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-331=
"></a>            buf +=3D <span class=3D"dv">4</span>;</span>
<span id=3D"cb68-332"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-332=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-333"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-333=
"></a></span>
<span id=3D"cb68-334"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-334=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'L'</span>:=
 <span class=3D"co">// 32-bit unsigned</span></span>
<span id=3D"cb68-335"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-335=
"></a>            L =3D va_arg(ap, <span class=3D"dt">unsigned</span> <span=
 class=3D"dt">long</span> <span class=3D"dt">int</span>*);</span>
<span id=3D"cb68-336"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-336=
"></a>            *L =3D unpacku32(buf);</span>
<span id=3D"cb68-337"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-337=
"></a>            buf +=3D <span class=3D"dv">4</span>;</span>
<span id=3D"cb68-338"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-338=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-339"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-339=
"></a></span>
<span id=3D"cb68-340"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-340=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'q'</span>:=
 <span class=3D"co">// 64-bit</span></span>
<span id=3D"cb68-341"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-341=
"></a>            q =3D va_arg(ap, <span class=3D"dt">long</span> <span cla=
ss=3D"dt">long</span> <span class=3D"dt">int</span>*);</span>
<span id=3D"cb68-342"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-342=
"></a>            *q =3D unpacki64(buf);</span>
<span id=3D"cb68-343"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-343=
"></a>            buf +=3D <span class=3D"dv">8</span>;</span>
<span id=3D"cb68-344"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-344=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-345"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-345=
"></a></span>
<span id=3D"cb68-346"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-346=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'Q'</span>:=
 <span class=3D"co">// 64-bit unsigned</span></span>
<span id=3D"cb68-347"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-347=
"></a>            Q =3D va_arg(ap, <span class=3D"dt">unsigned</span> <span=
 class=3D"dt">long</span> <span class=3D"dt">long</span> <span class=3D"dt"=
>int</span>*);</span>
<span id=3D"cb68-348"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-348=
"></a>            *Q =3D unpacku64(buf);</span>
<span id=3D"cb68-349"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-349=
"></a>            buf +=3D <span class=3D"dv">8</span>;</span>
<span id=3D"cb68-350"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-350=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-351"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-351=
"></a></span>
<span id=3D"cb68-352"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-352=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'f'</span>:=
 <span class=3D"co">// float</span></span>
<span id=3D"cb68-353"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-353=
"></a>            f =3D va_arg(ap, <span class=3D"dt">float</span>*);</span=
>
<span id=3D"cb68-354"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-354=
"></a>            fhold =3D unpacku16(buf);</span>
<span id=3D"cb68-355"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-355=
"></a>            *f =3D unpack754_16(fhold);</span>
<span id=3D"cb68-356"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-356=
"></a>            buf +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-357"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-357=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-358"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-358=
"></a></span>
<span id=3D"cb68-359"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-359=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'d'</span>:=
 <span class=3D"co">// float-32</span></span>
<span id=3D"cb68-360"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-360=
"></a>            d =3D va_arg(ap, <span class=3D"dt">double</span>*);</spa=
n>
<span id=3D"cb68-361"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-361=
"></a>            fhold =3D unpacku32(buf);</span>
<span id=3D"cb68-362"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-362=
"></a>            *d =3D unpack754_32(fhold);</span>
<span id=3D"cb68-363"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-363=
"></a>            buf +=3D <span class=3D"dv">4</span>;</span>
<span id=3D"cb68-364"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-364=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-365"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-365=
"></a></span>
<span id=3D"cb68-366"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-366=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'g'</span>:=
 <span class=3D"co">// float-64</span></span>
<span id=3D"cb68-367"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-367=
"></a>            g =3D va_arg(ap, <span class=3D"dt">long</span> <span cla=
ss=3D"dt">double</span>*);</span>
<span id=3D"cb68-368"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-368=
"></a>            fhold =3D unpacku64(buf);</span>
<span id=3D"cb68-369"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-369=
"></a>            *g =3D unpack754_64(fhold);</span>
<span id=3D"cb68-370"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-370=
"></a>            buf +=3D <span class=3D"dv">8</span>;</span>
<span id=3D"cb68-371"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-371=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-372"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-372=
"></a></span>
<span id=3D"cb68-373"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-373=
"></a>        <span class=3D"cf">case</span> <span class=3D"ch">'s'</span>:=
 <span class=3D"co">// string</span></span>
<span id=3D"cb68-374"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-374=
"></a>            s =3D va_arg(ap, <span class=3D"dt">char</span>*);</span>
<span id=3D"cb68-375"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-375=
"></a>            len =3D unpacku16(buf);</span>
<span id=3D"cb68-376"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-376=
"></a>            buf +=3D <span class=3D"dv">2</span>;</span>
<span id=3D"cb68-377"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-377=
"></a>            <span class=3D"cf">if</span> (maxstrlen &gt; <span class=
=3D"dv">0</span> &amp;&amp; len &gt;=3D maxstrlen) count =3D maxstrlen - <s=
pan class=3D"dv">1</span>;</span>
<span id=3D"cb68-378"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-378=
"></a>            <span class=3D"cf">else</span> count =3D len;</span>
<span id=3D"cb68-379"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-379=
"></a>            memcpy(s, buf, count);</span>
<span id=3D"cb68-380"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-380=
"></a>            s[count] =3D <span class=3D"ch">'\0'</span>;</span>
<span id=3D"cb68-381"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-381=
"></a>            buf +=3D len;</span>
<span id=3D"cb68-382"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-382=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb68-383"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-383=
"></a></span>
<span id=3D"cb68-384"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-384=
"></a>        <span class=3D"cf">default</span>:</span>
<span id=3D"cb68-385"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-385=
"></a>            <span class=3D"cf">if</span> (isdigit(*format)) { <span c=
lass=3D"co">// track max str len</span></span>
<span id=3D"cb68-386"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-386=
"></a>                maxstrlen =3D maxstrlen * <span class=3D"dv">10</span=
> + (*format-<span class=3D"ch">'0'</span>);</span>
<span id=3D"cb68-387"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-387=
"></a>            }</span>
<span id=3D"cb68-388"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-388=
"></a>        }</span>
<span id=3D"cb68-389"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-389=
"></a></span>
<span id=3D"cb68-390"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-390=
"></a>        <span class=3D"cf">if</span> (!isdigit(*format)) maxstrlen =
=3D <span class=3D"dv">0</span>;</span>
<span id=3D"cb68-391"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-391=
"></a>    }</span>
<span id=3D"cb68-392"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-392=
"></a></span>
<span id=3D"cb68-393"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-393=
"></a>    va_end(ap);</span>
<span id=3D"cb68-394"><a href=3D"https://beej.us/guide/bgnet/html/#cb68-394=
"></a>}</span></code></pre></div>
<p>And <a href=3D"https://beej.us/guide/bgnet/examples/pack2.c">here is a d=
emonstration program</a><a href=3D"https://beej.us/guide/bgnet/html/#fn40" =
class=3D"footnote-ref" id=3D"fnref40" role=3D"doc-noteref"><sup>40</sup></a=
> of the above code that packs some data into <code>buf</code> and then unp=
acks it into variables. Note that when calling <code>unpack()</code> with a=
 string argument (format specifier =E2=80=9C<code>s</code>=E2=80=9D), it=E2=
=80=99s wise to put a maximum length count in front of it to prevent a buff=
er overrun, e.g.&nbsp;=E2=80=9C<code>96s</code>=E2=80=9D. Be wary when unpa=
cking data you get over the network=E2=80=94a malicious user might send bad=
ly-constructed packets in an effort to attack your system!</p>
<div class=3D"sourceCode" id=3D"cb69"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb69-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb69-1"></a><span class=3D"pp">#include =
</span><span class=3D"im">&lt;stdio.h&gt;</span></span>
<span id=3D"cb69-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-2"></=
a></span>
<span id=3D"cb69-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-3"></=
a><span class=3D"co">// various bits for floating point types--</span></spa=
n>
<span id=3D"cb69-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-4"></=
a><span class=3D"co">// varies for different architectures</span></span>
<span id=3D"cb69-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-5"></=
a><span class=3D"kw">typedef</span> <span class=3D"dt">float</span> float32=
_t;</span>
<span id=3D"cb69-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-6"></=
a><span class=3D"kw">typedef</span> <span class=3D"dt">double</span> float6=
4_t;</span>
<span id=3D"cb69-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-7"></=
a></span>
<span id=3D"cb69-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-8"></=
a><span class=3D"dt">int</span> main(<span class=3D"dt">void</span>)</span>
<span id=3D"cb69-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-9"></=
a>{</span>
<span id=3D"cb69-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-10">=
</a>    <span class=3D"dt">unsigned</span> <span class=3D"dt">char</span> b=
uf[<span class=3D"dv">1024</span>];</span>
<span id=3D"cb69-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-11">=
</a>    <span class=3D"dt">int8_t</span> magic;</span>
<span id=3D"cb69-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-12">=
</a>    <span class=3D"dt">int16_t</span> monkeycount;</span>
<span id=3D"cb69-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-13">=
</a>    <span class=3D"dt">int32_t</span> altitude;</span>
<span id=3D"cb69-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-14">=
</a>    float32_t absurdityfactor;</span>
<span id=3D"cb69-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-15">=
</a>    <span class=3D"dt">char</span> *s =3D <span class=3D"st">"Great unm=
itigated Zot! You've found the Runestaff!"</span>;</span>
<span id=3D"cb69-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-16">=
</a>    <span class=3D"dt">char</span> s2[<span class=3D"dv">96</span>];</s=
pan>
<span id=3D"cb69-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-17">=
</a>    <span class=3D"dt">int16_t</span> packetsize, ps2;</span>
<span id=3D"cb69-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-18">=
</a></span>
<span id=3D"cb69-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-19">=
</a>    packetsize =3D pack(buf, <span class=3D"st">"chhlsf"</span>, (<span=
 class=3D"dt">int8_t</span>)<span class=3D"ch">'B'</span>, (<span class=3D"=
dt">int16_t</span>)<span class=3D"dv">0</span>, (<span class=3D"dt">int16_t=
</span>)<span class=3D"dv">37</span>, </span>
<span id=3D"cb69-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-20">=
</a>            (<span class=3D"dt">int32_t</span>)-<span class=3D"dv">5</s=
pan>, s, (float32_t)-<span class=3D"fl">3490.6677</span>);</span>
<span id=3D"cb69-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-21">=
</a>    packi16(buf+<span class=3D"dv">1</span>, packetsize); <span class=
=3D"co">// store packet size in packet for kicks</span></span>
<span id=3D"cb69-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-22">=
</a></span>
<span id=3D"cb69-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-23">=
</a>    printf(<span class=3D"st">"packet is %"</span> PRId32 <span class=
=3D"st">" bytes</span><span class=3D"sc">\n</span><span class=3D"st">"</spa=
n>, packetsize);</span>
<span id=3D"cb69-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-24">=
</a></span>
<span id=3D"cb69-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-25">=
</a>    unpack(buf, <span class=3D"st">"chhl96sf"</span>, &amp;magic, &amp;=
ps2, &amp;monkeycount, &amp;altitude, s2,</span>
<span id=3D"cb69-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-26">=
</a>        &amp;absurdityfactor);</span>
<span id=3D"cb69-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-27">=
</a></span>
<span id=3D"cb69-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-28">=
</a>    printf(<span class=3D"st">"'%c' %"</span> PRId32<span class=3D"st">=
" %"</span> PRId16 <span class=3D"st">" %"</span> PRId32</span>
<span id=3D"cb69-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-29">=
</a>            <span class=3D"st">" </span><span class=3D"sc">\"</span><sp=
an class=3D"st">%s</span><span class=3D"sc">\"</span><span class=3D"st"> %f=
</span><span class=3D"sc">\n</span><span class=3D"st">"</span>, magic, ps2,=
 monkeycount,</span>
<span id=3D"cb69-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-30">=
</a>            altitude, s2, absurdityfactor);</span>
<span id=3D"cb69-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-31">=
</a></span>
<span id=3D"cb69-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-32">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb69-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb69-33">=
</a>}</span></code></pre></div>
<p>Whether you roll your own code or use someone else=E2=80=99s, it=E2=80=
=99s a good idea to have a general set of data packing routines for the sak=
e of keeping bugs in check, rather than packing each bit by hand each time.=
</p>
<p>When packing the data, what=E2=80=99s a good format to use? Excellent qu=
estion. Fortunately,  <a href=3D"https://tools.ietf.org/html/rfc4506">RFC 4=
506</a><a href=3D"https://beej.us/guide/bgnet/html/#fn41" class=3D"footnote=
-ref" id=3D"fnref41" role=3D"doc-noteref"><sup>41</sup></a>, the External D=
ata Representation Standard, already defines binary formats for a bunch of =
different types, like floating point types, integer types, arrays, raw data=
, etc. I suggest conforming to that if you=E2=80=99re going to roll the dat=
a yourself. But you=E2=80=99re not obligated to. The Packet Police are not =
right outside your door. At least, I don=E2=80=99t <em>think</em> they are.=
</p>
<p>In any case, encoding the data somehow or another before you send it is =
the right way of doing things!</p>
<h2 data-number=3D"7.6" id=3D"sonofdataencap"><span class=3D"header-section=
-number">7.6</span> Son of Data Encapsulation</h2>
<p>What does it really mean to encapsulate data, anyway? In the simplest ca=
se, it means you=E2=80=99ll stick a header on there with either some identi=
fying information or a packet length, or both.</p>
<p>What should your header look like? Well, it=E2=80=99s just some binary d=
ata that represents whatever you feel is necessary to complete your project=
.</p>
<p>Wow. That=E2=80=99s vague.</p>
<p>Okay. For instance, let=E2=80=99s say you have a multi-user chat program=
 that uses <code>SOCK_STREAM</code>s. When a user types (=E2=80=9Csays=E2=
=80=9D) something, two pieces of information need to be transmitted to the =
server: what was said and who said it.</p>
<p>So far so good? =E2=80=9CWhat=E2=80=99s the problem?=E2=80=9D you=E2=80=
=99re asking.</p>
<p>The problem is that the messages can be of varying lengths. One person n=
amed =E2=80=9Ctom=E2=80=9D might say, =E2=80=9CHi=E2=80=9D, and another per=
son named =E2=80=9CBenjamin=E2=80=9D might say, =E2=80=9CHey guys what is u=
p?=E2=80=9D</p>
<p>So you <code>send()</code> all this stuff to the clients as it comes in.=
 Your outgoing data stream looks like this:</p>
<pre><code>    t o m H i B e n j a m i n H e y g u y s w h a t i s u p ?</c=
ode></pre>
<p>And so on. How does the client know when one message starts and another =
stops? You could, if you wanted, make all messages the same length and just=
 call the  <code>sendall()</code> we implemented, <a href=3D"https://beej.u=
s/guide/bgnet/html/#sendall">above</a>. But that wastes bandwidth! We don=
=E2=80=99t want to <code>send()</code> 1024 bytes just so =E2=80=9Ctom=E2=
=80=9D can say =E2=80=9CHi=E2=80=9D.</p>
<p>So we <em>encapsulate</em> the data in a tiny header and packet structur=
e. Both the client and server know how to pack and unpack (sometimes referr=
ed to as =E2=80=9Cmarshal=E2=80=9D and =E2=80=9Cunmarshal=E2=80=9D) this da=
ta. Don=E2=80=99t look now, but we=E2=80=99re starting to define a <em>prot=
ocol</em> that describes how a client and server communicate!</p>
<p>In this case, let=E2=80=99s assume the user name is a fixed length of 8 =
characters, padded with <code>'\0'</code>. And then let=E2=80=99s assume th=
e data is variable length, up to a maximum of 128 characters. Let=E2=80=99s=
 have a look a sample packet structure that we might use in this situation:=
</p>
<ol type=3D"1">
<li><p><code>len</code> (1 byte, unsigned)=E2=80=94The total length of the =
packet, counting the 8-byte user name and chat data.</p></li>
<li><p><code>name</code> (8 bytes)=E2=80=94The user=E2=80=99s name, NUL-pad=
ded if necessary.</p></li>
<li><p><code>chatdata</code> (<em>n</em>-bytes)=E2=80=94The data itself, no=
 more than 128 bytes. The length of the packet should be calculated as the =
length of this data plus 8 (the length of the name field, above).</p></li>
</ol>
<p>Why did I choose the 8-byte and 128-byte limits for the fields? I pulled=
 them out of the air, assuming they=E2=80=99d be long enough. Maybe, though=
, 8 bytes is too restrictive for your needs, and you can have a 30-byte nam=
e field, or whatever. The choice is up to you.</p>
<p>Using the above packet definition, the first packet would consist of the=
 following information (in hex and ASCII):</p>
<pre><code>       0A     74 6F 6D 00 00 00 00 00      48 69
    (length)  T  o  m    (padding)         H  i</code></pre>
<p>And the second is similar:</p>
<pre><code>       18     42 65 6E 6A 61 6D 69 6E      48 65 79 20 67 75 79 =
73 20 77 ...
    (length)  B  e  n  j  a  m  i  n       H  e  y     g  u  y  s     w  ..=
.</code></pre>
<p>(The length is stored in Network Byte Order, of course. In this case, it=
=E2=80=99s only one byte so it doesn=E2=80=99t matter, but generally speaki=
ng you=E2=80=99ll want all your binary integers to be stored in Network Byt=
e Order in your packets.)</p>
<p>When you=E2=80=99re sending this data, you should be safe and use a comm=
and similar to <a href=3D"https://beej.us/guide/bgnet/html/#sendall"><code>=
sendall()</code></a>, above, so you know all the data is sent, even if it t=
akes multiple calls to <code>send()</code> to get it all out.</p>
<p>Likewise, when you=E2=80=99re receiving this data, you need to do a bit =
of extra work. To be safe, you should assume that you might receive a parti=
al packet (like maybe we receive =E2=80=9C<code>18 42 65 6E 6A</code>=E2=80=
=9D from Benjamin, above, but that=E2=80=99s all we get in this call to <co=
de>recv()</code>). We need to call <code>recv()</code> over and over again =
until the packet is completely received.</p>
<p>But how? Well, we know the number of bytes we need to receive in total f=
or the packet to be complete, since that number is tacked on the front of t=
he packet. We also know the maximum packet size is 1+8+128, or 137 bytes (b=
ecause that=E2=80=99s how we defined the packet).</p>
<p>There are actually a couple things you can do here. Since you know every=
 packet starts off with a length, you can call <code>recv()</code> just to =
get the packet length. Then once you have that, you can call it again speci=
fying exactly the remaining length of the packet (possibly repeatedly to ge=
t all the data) until you have the complete packet. The advantage of this m=
ethod is that you only need a buffer large enough for one packet, while the=
 disadvantage is that you need to call <code>recv()</code> at least twice t=
o get all the data.</p>
<p>Another option is just to call <code>recv()</code> and say the amount yo=
u=E2=80=99re willing to receive is the maximum number of bytes in a packet.=
 Then whatever you get, stick it onto the back of a buffer, and finally che=
ck to see if the packet is complete. Of course, you might get some of the n=
ext packet, so you=E2=80=99ll need to have room for that.</p>
<p>What you can do is declare an array big enough for two packets. This is =
your work array where you will reconstruct packets as they arrive.</p>
<p>Every time you <code>recv()</code> data, you=E2=80=99ll append it into t=
he work buffer and check to see if the packet is complete. That is, the num=
ber of bytes in the buffer is greater than or equal to the length specified=
 in the header (+1, because the length in the header doesn=E2=80=99t includ=
e the byte for the length itself). If the number of bytes in the buffer is =
less than 1, the packet is not complete, obviously. You have to make a spec=
ial case for this, though, since the first byte is garbage and you can=E2=
=80=99t rely on it for the correct packet length.</p>
<p>Once the packet is complete, you can do with it what you will. Use it, a=
nd remove it from your work buffer.</p>
<p>Whew! Are you juggling that in your head yet? Well, here=E2=80=99s the s=
econd of the one-two punch: you might have read past the end of one packet =
and onto the next in a single <code>recv()</code> call. That is, you have a=
 work buffer with one complete packet, and an incomplete part of the next p=
acket! Bloody heck. (But this is why you made your work buffer large enough=
 to hold <em>two</em> packets=E2=80=94in case this happened!)</p>
<p>Since you know the length of the first packet from the header, and you=
=E2=80=99ve been keeping track of the number of bytes in the work buffer, y=
ou can subtract and calculate how many of the bytes in the work buffer belo=
ng to the second (incomplete) packet. When you=E2=80=99ve handled the first=
 one, you can clear it out of the work buffer and move the partial second p=
acket down the to front of the buffer so it=E2=80=99s all ready to go for t=
he next <code>recv()</code>.</p>
<p>(Some of you readers will note that actually moving the partial second p=
acket to the beginning of the work buffer takes time, and the program can b=
e coded to not require this by using a circular buffer. Unfortunately for t=
he rest of you, a discussion on circular buffers is beyond the scope of thi=
s article. If you=E2=80=99re still curious, grab a data structures book and=
 go from there.)</p>
<p>I never said it was easy. Ok, I did say it was easy. And it is; you just=
 need practice and pretty soon it=E2=80=99ll come to you naturally. By  Exc=
alibur I swear it!</p>
<h2 data-number=3D"7.7" id=3D"broadcast-packetshello-world"><span class=3D"=
header-section-number">7.7</span> Broadcast Packets=E2=80=94Hello, World!</=
h2>
<p>So far, this guide has talked about sending data from one host to one ot=
her host. But it is possible, I insist, that you can, with the proper autho=
rity, send data to multiple hosts <em>at the same time</em>!</p>
<p>With  UDP (only UDP, not TCP) and standard IPv4, this is done through a =
mechanism called  <em>broadcasting</em>. With IPv6, broadcasting isn=E2=80=
=99t supported, and you have to resort to the often superior technique of <=
em>multicasting</em>, which, sadly I won=E2=80=99t be discussing at this ti=
me. But enough of the starry-eyed future=E2=80=94we=E2=80=99re stuck in the=
 32-bit present.</p>
<p>But wait! You can=E2=80=99t just run off and start broadcasting willy-ni=
lly; You have to  set the socket option  <code>SO_BROADCAST</code> before y=
ou can send a broadcast packet out on the network. It=E2=80=99s like a one =
of those little plastic covers they put over the missile launch switch! Tha=
t=E2=80=99s just how much power you hold in your hands!</p>
<p>But seriously, though, there is a danger to using broadcast packets, and=
 that is: every system that receives a broadcast packet must undo all the o=
nion-skin layers of data encapsulation until it finds out what port the dat=
a is destined to. And then it hands the data over or discards it. In either=
 case, it=E2=80=99s a lot of work for each machine that receives the broadc=
ast packet, and since it is all of them on the local network, that could be=
 a lot of machines doing a lot of unnecessary work. When the game Doom firs=
t came out, this was a complaint about its network code.</p>
<p>Now, there is more than one way to skin a cat=E2=80=A6 wait a minute. Is=
 there really more than one way to skin a cat? What kind of expression is t=
hat? Uh, and likewise, there is more than one way to send a broadcast packe=
t. So, to get to the meat and potatoes of the whole thing: how do you speci=
fy the destination address for a broadcast message? There are two common wa=
ys:</p>
<ol type=3D"1">
<li><p>Send the data to a specific subnet=E2=80=99s broadcast address. This=
 is the subnet=E2=80=99s network number with all one-bits set for the host =
portion of the address. For instance, at home my network is <code>192.168.1=
.0</code>, my netmask is <code>255.255.255.0</code>, so the last byte of th=
e address is my host number (because the first three bytes, according to th=
e netmask, are the network number). So my broadcast address is <code>192.16=
8.1.255</code>. Under Unix, the <code>ifconfig</code> command will actually=
 give you all this data. (If you=E2=80=99re curious, the bitwise logic to g=
et your broadcast address is <code>network_number</code> OR (NOT <code>netm=
ask</code>).) You can send this type of broadcast packet to remote networks=
 as well as your local network, but you run the risk of the packet being dr=
opped by the destination=E2=80=99s router. (If they didn=E2=80=99t drop it,=
 then some random smurf could start flooding their LAN with broadcast traff=
ic.)</p></li>
<li><p>Send the data to the =E2=80=9Cglobal=E2=80=9D broadcast address. Thi=
s is  <code>255.255.255.255</code>, aka  <code>INADDR_BROADCAST</code>. Man=
y machines will automatically bitwise AND this with your network number to =
convert it to a network broadcast address, but some won=E2=80=99t. It varie=
s. Routers do not forward this type of broadcast packet off your local netw=
ork, ironically enough.</p></li>
</ol>
<p>So what happens if you try to send data on the broadcast address without=
 first setting the <code>SO_BROADCAST</code> socket option? Well, let=E2=80=
=99s fire up good old <a href=3D"https://beej.us/guide/bgnet/html/#datagram=
"><code>talker</code> and <code>listener</code></a> and see what happens.</=
p>
<pre><code>    $ talker 192.168.1.2 foo
    sent 3 bytes to 192.168.1.2
    $ talker 192.168.1.255 foo
    sendto: Permission denied
    $ talker 255.255.255.255 foo
    sendto: Permission denied</code></pre>
<p>Yes, it=E2=80=99s not happy at all=E2=80=A6because we didn=E2=80=99t set=
 the <code>SO_BROADCAST</code> socket option. Do that, and now you can <cod=
e>sendto()</code> anywhere you want!</p>
<p>In fact, that=E2=80=99s the <em>only difference</em> between a UDP appli=
cation that can broadcast and one that can=E2=80=99t. So let=E2=80=99s take=
 the old <code>talker</code> application and add one section that sets the =
<code>SO_BROADCAST</code> socket option. We=E2=80=99ll call this program <a=
 href=3D"https://beej.us/guide/bgnet/examples/broadcaster.c"><code>broadcas=
ter.c</code></a><a href=3D"https://beej.us/guide/bgnet/html/#fn42" class=3D=
"footnote-ref" id=3D"fnref42" role=3D"doc-noteref"><sup>42</sup></a>:</p>
<div class=3D"sourceCode" id=3D"cb74"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb74-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb74-1"></a><span class=3D"co">/*</span>=
</span>
<span id=3D"cb74-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-2"></=
a><span class=3D"co">** broadcaster.c -- a datagram "client" like talker.c,=
 except</span></span>
<span id=3D"cb74-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-3"></=
a><span class=3D"co">**                  this one can broadcast</span></spa=
n>
<span id=3D"cb74-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-4"></=
a><span class=3D"co">*/</span></span>
<span id=3D"cb74-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-5"></=
a></span>
<span id=3D"cb74-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb74-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdlib.h&gt;</s=
pan></span>
<span id=3D"cb74-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</s=
pan></span>
<span id=3D"cb74-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-9"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;errno.h&gt;</sp=
an></span>
<span id=3D"cb74-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-10">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;string.h&gt;<=
/span></span>
<span id=3D"cb74-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-11">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&g=
t;</span></span>
<span id=3D"cb74-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-12">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&=
gt;</span></span>
<span id=3D"cb74-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-13">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&=
gt;</span></span>
<span id=3D"cb74-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-14">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&g=
t;</span></span>
<span id=3D"cb74-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-15">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</=
span></span>
<span id=3D"cb74-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-16">=
</a></span>
<span id=3D"cb74-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-17">=
</a><span class=3D"pp">#define SERVERPORT 4950 </span><span class=3D"co">//=
 the port users will be connecting to</span></span>
<span id=3D"cb74-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-18">=
</a></span>
<span id=3D"cb74-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-19">=
</a><span class=3D"dt">int</span> main(<span class=3D"dt">int</span> argc, =
<span class=3D"dt">char</span> *argv[])</span>
<span id=3D"cb74-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-20">=
</a>{</span>
<span id=3D"cb74-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-21">=
</a>    <span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb74-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-22">=
</a>    <span class=3D"kw">struct</span> sockaddr_in their_addr; <span clas=
s=3D"co">// connector's address information</span></span>
<span id=3D"cb74-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-23">=
</a>    <span class=3D"kw">struct</span> hostent *he;</span>
<span id=3D"cb74-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-24">=
</a>    <span class=3D"dt">int</span> numbytes;</span>
<span id=3D"cb74-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-25">=
</a>    <span class=3D"dt">int</span> broadcast =3D <span class=3D"dv">1</s=
pan>;</span>
<span id=3D"cb74-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-26">=
</a>    <span class=3D"co">//char broadcast =3D '1'; // if that doesn't wor=
k, try this</span></span>
<span id=3D"cb74-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-27">=
</a></span>
<span id=3D"cb74-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-28">=
</a>    <span class=3D"cf">if</span> (argc !=3D <span class=3D"dv">3</span>=
) {</span>
<span id=3D"cb74-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-29">=
</a>        fprintf(stderr,<span class=3D"st">"usage: broadcaster hostname =
message</span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</sp=
an>
<span id=3D"cb74-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-30">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb74-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-31">=
</a>    }</span>
<span id=3D"cb74-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-32">=
</a></span>
<span id=3D"cb74-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-33">=
</a>    <span class=3D"cf">if</span> ((he=3Dgethostbyname(argv[<span class=
=3D"dv">1</span>])) =3D=3D NULL) {  <span class=3D"co">// get the host info=
</span></span>
<span id=3D"cb74-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-34">=
</a>        perror(<span class=3D"st">"gethostbyname"</span>);</span>
<span id=3D"cb74-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-35">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb74-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-36">=
</a>    }</span>
<span id=3D"cb74-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-37">=
</a></span>
<span id=3D"cb74-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-38">=
</a>    <span class=3D"cf">if</span> ((sockfd =3D socket(AF_INET, SOCK_DGRA=
M, <span class=3D"dv">0</span>)) =3D=3D -<span class=3D"dv">1</span>) {</sp=
an>
<span id=3D"cb74-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-39">=
</a>        perror(<span class=3D"st">"socket"</span>);</span>
<span id=3D"cb74-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-40">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb74-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-41">=
</a>    }</span>
<span id=3D"cb74-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-42">=
</a></span>
<span id=3D"cb74-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-43">=
</a>    <span class=3D"co">// this call is what allows broadcast packets to=
 be sent:</span></span>
<span id=3D"cb74-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-44">=
</a>    <span class=3D"cf">if</span> (setsockopt(sockfd, SOL_SOCKET, SO_BRO=
ADCAST, &amp;broadcast,</span>
<span id=3D"cb74-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-45">=
</a>        <span class=3D"kw">sizeof</span> broadcast) =3D=3D -<span class=
=3D"dv">1</span>) {</span>
<span id=3D"cb74-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-46">=
</a>        perror(<span class=3D"st">"setsockopt (SO_BROADCAST)"</span>);<=
/span>
<span id=3D"cb74-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-47">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb74-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-48">=
</a>    }</span>
<span id=3D"cb74-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-49">=
</a></span>
<span id=3D"cb74-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-50">=
</a>    their_addr.sin_family =3D AF_INET;     <span class=3D"co">// host b=
yte order</span></span>
<span id=3D"cb74-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-51">=
</a>    their_addr.sin_port =3D htons(SERVERPORT); <span class=3D"co">// sh=
ort, network byte order</span></span>
<span id=3D"cb74-52"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-52">=
</a>    their_addr.sin_addr =3D *((<span class=3D"kw">struct</span> in_addr=
 *)he-&gt;h_addr);</span>
<span id=3D"cb74-53"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-53">=
</a>    memset(their_addr.sin_zero, <span class=3D"ch">'\0'</span>, <span c=
lass=3D"kw">sizeof</span> their_addr.sin_zero);</span>
<span id=3D"cb74-54"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-54">=
</a></span>
<span id=3D"cb74-55"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-55">=
</a>    <span class=3D"cf">if</span> ((numbytes=3Dsendto(sockfd, argv[<span=
 class=3D"dv">2</span>], strlen(argv[<span class=3D"dv">2</span>]), <span c=
lass=3D"dv">0</span>,</span>
<span id=3D"cb74-56"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-56">=
</a>             (<span class=3D"kw">struct</span> sockaddr *)&amp;their_ad=
dr, <span class=3D"kw">sizeof</span> their_addr)) =3D=3D -<span class=3D"dv=
">1</span>) {</span>
<span id=3D"cb74-57"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-57">=
</a>        perror(<span class=3D"st">"sendto"</span>);</span>
<span id=3D"cb74-58"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-58">=
</a>        exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb74-59"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-59">=
</a>    }</span>
<span id=3D"cb74-60"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-60">=
</a></span>
<span id=3D"cb74-61"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-61">=
</a>    printf(<span class=3D"st">"sent %d bytes to %s</span><span class=3D=
"sc">\n</span><span class=3D"st">"</span>, numbytes,</span>
<span id=3D"cb74-62"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-62">=
</a>        inet_ntoa(their_addr.sin_addr));</span>
<span id=3D"cb74-63"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-63">=
</a></span>
<span id=3D"cb74-64"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-64">=
</a>    close(sockfd);</span>
<span id=3D"cb74-65"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-65">=
</a></span>
<span id=3D"cb74-66"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-66">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb74-67"><a href=3D"https://beej.us/guide/bgnet/html/#cb74-67">=
</a>}</span></code></pre></div>
<p>What=E2=80=99s different between this and a =E2=80=9Cnormal=E2=80=9D UDP=
 client/server situation? Nothing! (With the exception of the client being =
allowed to send broadcast packets in this case.) As such, go ahead and run =
the old UDP <a href=3D"https://beej.us/guide/bgnet/html/#datagram"><code>li=
stener</code></a> program in one window, and <code>broadcaster</code> in an=
other. You should be now be able to do all those sends that failed, above.<=
/p>
<pre><code>    $ broadcaster 192.168.1.2 foo
    sent 3 bytes to 192.168.1.2
    $ broadcaster 192.168.1.255 foo
    sent 3 bytes to 192.168.1.255
    $ broadcaster 255.255.255.255 foo
    sent 3 bytes to 255.255.255.255</code></pre>
<p>And you should see <code>listener</code> responding that it got the pack=
ets. (If <code>listener</code> doesn=E2=80=99t respond, it could be because=
 it=E2=80=99s bound to an IPv6 address. Try changing the <code>AF_UNSPEC</c=
ode> in <code>listener.c</code> to <code>AF_INET</code> to force IPv4.)</p>
<p>Well, that=E2=80=99s kind of exciting. But now fire up <code>listener</c=
ode> on another machine next to you on the same network so that you have tw=
o copies going, one on each machine, and run <code>broadcaster</code> again=
 with your broadcast address=E2=80=A6 Hey! Both <code>listener</code>s get =
the packet even though you only called <code>sendto()</code> once! Cool!</p=
>
<p>If the <code>listener</code> gets data you send directly to it, but not =
data on the broadcast address, it could be that you have a  firewall on you=
r local machine that is blocking the packets. (Yes,  Pat and  Bapper, thank=
 you for realizing before I did that this is why my sample code wasn=E2=80=
=99t working. I told you I=E2=80=99d mention you in the guide, and here you=
 are. So <em>nyah</em>.)</p>
<p>Again, be careful with broadcast packets. Since every machine on the LAN=
 will be forced to deal with the packet whether it <code>recvfrom()</code>s=
 it or not, it can present quite a load to the entire computing network. Th=
ey are definitely to be used sparingly and appropriately.</p>
<h1 data-number=3D"8" id=3D"common-questions"><span class=3D"header-section=
-number">8</span> Common Questions</h1>
<p><strong>Where can I get those header files?</strong></p>
<p> If you don=E2=80=99t have them on your system already, you probably don=
=E2=80=99t need them. Check the manual for your particular platform. If you=
=E2=80=99re building for  Windows, you only need to <code>#include &lt;wins=
ock.h&gt;</code>.</p>
<p><strong>What do I do when <code>bind()</code> reports  =E2=80=9CAddress =
already in use=E2=80=9D?</strong></p>
<p>You have to use  <code>setsockopt()</code> with the  <code>SO_REUSEADDR<=
/code> option on the listening socket. Check out the  <a href=3D"https://be=
ej.us/guide/bgnet/html/#bind">section on <code>bind()</code></a> and the  <=
a href=3D"https://beej.us/guide/bgnet/html/#select">section on <code>select=
()</code></a> for an example.</p>
<p><strong>How do I get a list of open sockets on the system?</strong></p>
<p>Use the  <code>netstat</code>. Check the <code>man</code> page for full =
details, but you should get some good output just typing:</p>
<pre><code>    $ netstat</code></pre>
<p>The only trick is determining which socket is associated with which prog=
ram. <code>:-)</code></p>
<p><strong>How can I view the routing table?</strong></p>
<p>Run the  <code>route</code> command (in <code>/sbin</code> on most Linux=
es) or the command  <code>netstat -r</code>.</p>
<p><strong>How can I run the client and server programs if I only have one =
computer? Don=E2=80=99t I need a network to write network programs?</strong=
></p>
<p>Fortunately for you, virtually all machines implement a  loopback networ=
k =E2=80=9Cdevice=E2=80=9D that sits in the kernel and pretends to be a net=
work card. (This is the interface listed as =E2=80=9C<code>lo</code>=E2=80=
=9D in the routing table.)</p>
<p>Pretend you=E2=80=99re logged into a machine named  =E2=80=9C<code>goat<=
/code>=E2=80=9D. Run the client in one window and the server in another. Or=
 start the server in the background (=E2=80=9C<code>server &amp;</code>=E2=
=80=9D) and run the client in the same window. The upshot of the loopback d=
evice is that you can either <code>client goat</code> or  <code>client loca=
lhost</code> (since =E2=80=9C<code>localhost</code>=E2=80=9D is likely defi=
ned in your <code>/etc/hosts</code> file) and you=E2=80=99ll have the clien=
t talking to the server without a network!</p>
<p>In short, no changes are necessary to any of the code to make it run on =
a single non-networked machine! Huzzah!</p>
<p><strong>How can I tell if the remote side has closed connection?</strong=
></p>
<p>You can tell because <code>recv()</code> will return <code>0</code>.</p>
<p><strong>How do I implement a  =E2=80=9Cping=E2=80=9D utility? What is  I=
CMP? Where can I find out more about  raw sockets and <code>SOCK_RAW</code>=
?</strong></p>
<p>All your raw sockets questions will be answered in <a href=3D"https://be=
ej.us/guide/bgnet/html/#books">W. Richard Stevens=E2=80=99 UNIX Network Pro=
gramming books</a>. Also, look in the <code>ping/</code> subdirectory in St=
evens=E2=80=99 UNIX Network Programming source code, <a href=3D"http://www.=
unpbook.com/src.html">available online</a><a href=3D"https://beej.us/guide/=
bgnet/html/#fn43" class=3D"footnote-ref" id=3D"fnref43" role=3D"doc-noteref=
"><sup>43</sup></a>.</p>
<p><strong>How do I change or shorten the timeout on a call to <code>connec=
t()</code>?</strong></p>
<p>Instead of giving you exactly the same answer that W. Richard Stevens wo=
uld give you, I=E2=80=99ll just refer you to <a href=3D"http://www.unpbook.=
com/src.html"><code>lib/connect_nonb.c</code> in the UNIX Network Programmi=
ng source code</a><a href=3D"https://beej.us/guide/bgnet/html/#fn44" class=
=3D"footnote-ref" id=3D"fnref44" role=3D"doc-noteref"><sup>44</sup></a>.</p=
>
<p>The gist of it is that you make a socket descriptor with <code>socket()<=
/code>, <a href=3D"https://beej.us/guide/bgnet/html/#blocking">set it to no=
n-blocking</a>, call <code>connect()</code>, and if all goes well <code>con=
nect()</code> will return <code>-1</code> immediately and <code>errno</code=
> will be set to <code>EINPROGRESS</code>. Then you call <a href=3D"https:/=
/beej.us/guide/bgnet/html/#select"><code>select()</code></a> with whatever =
timeout you want, passing the socket descriptor in both the read and write =
sets. If it doesn=E2=80=99t timeout, it means the <code>connect()</code> ca=
ll completed. At this point, you=E2=80=99ll have to use <code>getsockopt()<=
/code> with the <code>SO_ERROR</code> option to get the return value from t=
he <code>connect()</code> call, which should be zero if there was no error.=
</p>
<p>Finally, you=E2=80=99ll probably want to set the socket back to be block=
ing again before you start transferring data over it.</p>
<p>Notice that this has the added benefit of allowing your program to do so=
mething else while it=E2=80=99s connecting, too. You could, for example, se=
t the timeout to something low, like 500 ms, and update an indicator onscre=
en each timeout, then call <code>select()</code> again. When you=E2=80=99ve=
 called <code>select()</code> and timed-out, say, 20 times, you=E2=80=99ll =
know it=E2=80=99s time to give up on the connection.</p>
<p>Like I said, check out Stevens=E2=80=99 source for a perfectly excellent=
 example.</p>
<p><strong>How do I build for Windows?</strong></p>
<p>First, delete Windows and install Linux or BSD. <code>};-)</code>. No, a=
ctually, just see the <a href=3D"https://beej.us/guide/bgnet/html/#windows"=
>section on building for Windows</a> in the introduction.</p>
<p><strong>How do I build for Solaris/SunOS? I keep getting linker errors w=
hen I try to compile!</strong></p>
<p>The linker errors happen because Sun boxes don=E2=80=99t automatically c=
ompile in the socket libraries. See the <a href=3D"https://beej.us/guide/bg=
net/html/#solaris">section on building for Solaris/SunOS</a> in the introdu=
ction for an example of how to do this.</p>
<p><strong>Why does <code>select()</code> keep falling out on a signal?</st=
rong></p>
<p>Signals tend to cause blocked system calls to return <code>-1</code> wit=
h <code>errno</code> set to <code>EINTR</code>. When you set up a signal ha=
ndler with  <code>sigaction()</code>, you can set the flag  <code>SA_RESTAR=
T</code>, which is supposed to restart the system call after it was interru=
pted.</p>
<p>Naturally, this doesn=E2=80=99t always work.</p>
<p>My favorite solution to this involves a  <code>goto</code> statement. Yo=
u know this irritates your professors to no end, so go for it!</p>
<div class=3D"sourceCode" id=3D"cb77"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb77-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb77-1"></a>select_restart:</span>
<span id=3D"cb77-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb77-2"></=
a><span class=3D"cf">if</span> ((err =3D select(fdmax+<span class=3D"dv">1<=
/span>, &amp;readfds, NULL, NULL, NULL)) =3D=3D -<span class=3D"dv">1</span=
>) {</span>
<span id=3D"cb77-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb77-3"></=
a>    <span class=3D"cf">if</span> (errno =3D=3D EINTR) {</span>
<span id=3D"cb77-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb77-4"></=
a>        <span class=3D"co">// some signal just interrupted us, so restart=
</span></span>
<span id=3D"cb77-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb77-5"></=
a>        <span class=3D"cf">goto</span> select_restart;</span>
<span id=3D"cb77-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb77-6"></=
a>    }</span>
<span id=3D"cb77-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb77-7"></=
a>    <span class=3D"co">// handle the real error here:</span></span>
<span id=3D"cb77-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb77-8"></=
a>    perror(<span class=3D"st">"select"</span>);</span>
<span id=3D"cb77-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb77-9"></=
a>} </span></code></pre></div>
<p>Sure, you don=E2=80=99t <em>need</em> to use <code>goto</code> in this c=
ase; you can use other structures to control it. But I think the <code>goto=
</code> statement is actually cleaner.</p>
<p><strong>How can I implement a timeout on a call to <code>recv()</code>?<=
/strong></p>
<p> Use  <a href=3D"https://beej.us/guide/bgnet/html/#select"><code>select(=
)</code></a>! It allows you to specify a timeout parameter for socket descr=
iptors that you=E2=80=99re looking to read from. Or, you could wrap the ent=
ire functionality in a single function, like this:</p>
<div class=3D"sourceCode" id=3D"cb78"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb78-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb78-1"></a><span class=3D"pp">#include =
</span><span class=3D"im">&lt;unistd.h&gt;</span></span>
<span id=3D"cb78-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-2"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/time.h&gt;<=
/span></span>
<span id=3D"cb78-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-3"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;=
</span></span>
<span id=3D"cb78-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-4"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt=
;</span></span>
<span id=3D"cb78-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-5"></=
a></span>
<span id=3D"cb78-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-6"></=
a><span class=3D"dt">int</span> recvtimeout(<span class=3D"dt">int</span> s=
, <span class=3D"dt">char</span> *buf, <span class=3D"dt">int</span> len, <=
span class=3D"dt">int</span> timeout)</span>
<span id=3D"cb78-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-7"></=
a>{</span>
<span id=3D"cb78-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-8"></=
a>    fd_set fds;</span>
<span id=3D"cb78-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-9"></=
a>    <span class=3D"dt">int</span> n;</span>
<span id=3D"cb78-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-10">=
</a>    <span class=3D"kw">struct</span> timeval tv;</span>
<span id=3D"cb78-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-11">=
</a></span>
<span id=3D"cb78-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-12">=
</a>    <span class=3D"co">// set up the file descriptor set</span></span>
<span id=3D"cb78-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-13">=
</a>    FD_ZERO(&amp;fds);</span>
<span id=3D"cb78-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-14">=
</a>    FD_SET(s, &amp;fds);</span>
<span id=3D"cb78-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-15">=
</a></span>
<span id=3D"cb78-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-16">=
</a>    <span class=3D"co">// set up the struct timeval for the timeout</sp=
an></span>
<span id=3D"cb78-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-17">=
</a>    tv.tv_sec =3D timeout;</span>
<span id=3D"cb78-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-18">=
</a>    tv.tv_usec =3D <span class=3D"dv">0</span>;</span>
<span id=3D"cb78-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-19">=
</a></span>
<span id=3D"cb78-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-20">=
</a>    <span class=3D"co">// wait until timeout or data received</span></s=
pan>
<span id=3D"cb78-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-21">=
</a>    n =3D select(s+<span class=3D"dv">1</span>, &amp;fds, NULL, NULL, &=
amp;tv);</span>
<span id=3D"cb78-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-22">=
</a>    <span class=3D"cf">if</span> (n =3D=3D <span class=3D"dv">0</span>)=
 <span class=3D"cf">return</span> -<span class=3D"dv">2</span>; <span class=
=3D"co">// timeout!</span></span>
<span id=3D"cb78-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-23">=
</a>    <span class=3D"cf">if</span> (n =3D=3D -<span class=3D"dv">1</span>=
) <span class=3D"cf">return</span> -<span class=3D"dv">1</span>; <span clas=
s=3D"co">// error</span></span>
<span id=3D"cb78-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-24">=
</a></span>
<span id=3D"cb78-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-25">=
</a>    <span class=3D"co">// data must be here, so do a normal recv()</spa=
n></span>
<span id=3D"cb78-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-26">=
</a>    <span class=3D"cf">return</span> recv(s, buf, len, <span class=3D"d=
v">0</span>);</span>
<span id=3D"cb78-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-27">=
</a>}</span>
<span id=3D"cb78-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-28">=
</a>.</span>
<span id=3D"cb78-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-29">=
</a>.</span>
<span id=3D"cb78-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-30">=
</a>.</span>
<span id=3D"cb78-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-31">=
</a><span class=3D"co">// Sample call to recvtimeout():</span></span>
<span id=3D"cb78-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-32">=
</a>n =3D recvtimeout(s, buf, <span class=3D"kw">sizeof</span> buf, <span c=
lass=3D"dv">10</span>); <span class=3D"co">// 10 second timeout</span></spa=
n>
<span id=3D"cb78-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-33">=
</a></span>
<span id=3D"cb78-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-34">=
</a><span class=3D"cf">if</span> (n =3D=3D -<span class=3D"dv">1</span>) {<=
/span>
<span id=3D"cb78-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-35">=
</a>    <span class=3D"co">// error occurred</span></span>
<span id=3D"cb78-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-36">=
</a>    perror(<span class=3D"st">"recvtimeout"</span>);</span>
<span id=3D"cb78-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-37">=
</a>}</span>
<span id=3D"cb78-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-38">=
</a><span class=3D"cf">else</span> <span class=3D"cf">if</span> (n =3D=3D -=
<span class=3D"dv">2</span>) {</span>
<span id=3D"cb78-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-39">=
</a>    <span class=3D"co">// timeout occurred</span></span>
<span id=3D"cb78-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-40">=
</a>} <span class=3D"cf">else</span> {</span>
<span id=3D"cb78-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-41">=
</a>    <span class=3D"co">// got some data in buf</span></span>
<span id=3D"cb78-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-42">=
</a>}</span>
<span id=3D"cb78-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-43">=
</a>.</span>
<span id=3D"cb78-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-44">=
</a>.</span>
<span id=3D"cb78-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb78-45">=
</a>. </span></code></pre></div>
<p>Notice that  <code>recvtimeout()</code> returns <code>-2</code> in case =
of a timeout. Why not return <code>0</code>? Well, if you recall, a return =
value of <code>0</code> on a call to <code>recv()</code> means that the rem=
ote side closed the connection. So that return value is already spoken for,=
 and <code>-1</code> means =E2=80=9Cerror=E2=80=9D, so I chose <code>-2</co=
de> as my timeout indicator.</p>
<p><strong>How do I  encrypt or compress the data before sending it through=
 the socket?</strong></p>
<p>One easy way to do encryption is to use  SSL (secure sockets layer), but=
 that=E2=80=99s beyond the scope of this guide.  (Check out the <a href=3D"=
https://www.openssl.org/">OpenSSL project</a><a href=3D"https://beej.us/gui=
de/bgnet/html/#fn45" class=3D"footnote-ref" id=3D"fnref45" role=3D"doc-note=
ref"><sup>45</sup></a> for more info.)</p>
<p>But assuming you want to plug in or implement your own  compressor or en=
cryption system, it=E2=80=99s just a matter of thinking of your data as run=
ning through a sequence of steps between both ends. Each step changes the d=
ata in some way.</p>
<ol type=3D"1">
<li>server reads data from file (or wherever)</li>
<li>server encrypts/compresses data (you add this part)</li>
<li>server <code>send()</code>s encrypted data</li>
</ol>
<p>Now the other way around:</p>
<ol type=3D"1">
<li>client <code>recv()</code>s encrypted data</li>
<li>client decrypts/decompresses data (you add this part)</li>
<li>client writes data to file (or wherever)</li>
</ol>
<p>If you=E2=80=99re going to compress and encrypt, just remember to compre=
ss first. <code>:-)</code></p>
<p>Just as long as the client properly undoes what the server does, the dat=
a will be fine in the end no matter how many intermediate steps you add.</p=
>
<p>So all you need to do to use my code is to find the place between where =
the data is read and the data is sent (using <code>send()</code>) over the =
network, and stick some code in there that does the encryption.</p>
<p><strong>What is this =E2=80=9C<code>PF_INET</code>=E2=80=9D I keep seein=
g? Is it related to <code>AF_INET</code>?</strong></p>
<p> </p>
<p>Yes, yes it is. See <a href=3D"https://beej.us/guide/bgnet/html/#socket"=
>the section on <code>socket()</code></a> for details.</p>
<p><strong>How can I write a server that accepts shell commands from a clie=
nt and executes them?</strong></p>
<p>For simplicity, lets say the client <code>connect()</code>s, <code>send(=
)</code>s, and <code>close()</code>s the connection (that is, there are no =
subsequent system calls without the client connecting again).</p>
<p>The process the client follows is this:</p>
<ol type=3D"1">
<li><code>connect()</code> to server</li>
<li><code>send("/sbin/ls &gt; /tmp/client.out")</code></li>
<li><code>close()</code> the connection</li>
</ol>
<p>Meanwhile, the server is handling the data and executing it:</p>
<ol type=3D"1">
<li><code>accept()</code> the connection from the client</li>
<li><code>recv(str)</code> the command string</li>
<li><code>close()</code> the connection</li>
<li><code>system(str)</code> to run the command</li>
</ol>
<p> <em>Beware!</em> Having the server execute what the client says is like=
 giving remote shell access and people can do things to your account when t=
hey connect to the server. For instance, in the above example, what if the =
client sends =E2=80=9C<code>rm -rf ~</code>=E2=80=9D? It deletes everything=
 in your account, that=E2=80=99s what!</p>
<p>So you get wise, and you prevent the client from using any except for a =
couple utilities that you know are safe, like the <code>foobar</code> utili=
ty:</p>
<div class=3D"sourceCode" id=3D"cb79"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb79-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb79-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"cf">if</span> (!strncmp(str, <span class=3D"st">"foobar"</span>, <span =
class=3D"dv">6</span>)) {</span>
<span id=3D"cb79-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb79-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        sprintf(sysstr, <span class=
=3D"st">"%s &gt; /tmp/server.out"</span>, str);</span>
<span id=3D"cb79-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb79-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>        system(sysstr);</span>
<span id=3D"cb79-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb79-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    } </span></code></pre></div>
<p>But you=E2=80=99re still unsafe, unfortunately: what if the client enter=
s =E2=80=9C<code>foobar; rm -rf ~</code>=E2=80=9D? The safest thing to do i=
s to write a little routine that puts an escape (=E2=80=9C<code>\</code>=E2=
=80=9D) character in front of all non-alphanumeric characters (including sp=
aces, if appropriate) in the arguments for the command.</p>
<p>As you can see, security is a pretty big issue when the server starts ex=
ecuting things the client sends.</p>
<p><strong>I=E2=80=99m sending a slew of data, but when I <code>recv()</cod=
e>, it only receives 536 bytes or 1460 bytes at a time. But if I run it on =
my local machine, it receives all the data at the same time. What=E2=80=99s=
 going on?</strong></p>
<p>You=E2=80=99re hitting the  MTU=E2=80=94the maximum size the physical me=
dium can handle. On the local machine, you=E2=80=99re using the loopback de=
vice which can handle 8K or more no problem. But on Ethernet, which can onl=
y handle 1500 bytes with a header, you hit that limit. Over a modem, with 5=
76 MTU (again, with header), you hit the even lower limit.</p>
<p>You have to make sure all the data is being sent, first of all. (See the=
 <a href=3D"https://beej.us/guide/bgnet/html/#sendall"><code>sendall()</cod=
e></a> function implementation for details.) Once you=E2=80=99re sure of th=
at, then you need to call <code>recv()</code> in a loop until all your data=
 is read.</p>
<p>Read the section <a href=3D"https://beej.us/guide/bgnet/html/#sonofdatae=
ncap">Son of Data Encapsulation</a> for details on receiving complete packe=
ts of data using multiple calls to <code>recv()</code>.</p>
<p><strong>I=E2=80=99m on a Windows box and I don=E2=80=99t have the <code>=
fork()</code> system call or any kind of <code>struct sigaction</code>. Wha=
t to do?</strong></p>
<p> If they=E2=80=99re anywhere, they=E2=80=99ll be in POSIX libraries that=
 may have shipped with your compiler. Since I don=E2=80=99t have a Windows =
box, I really can=E2=80=99t tell you the answer, but I seem to remember tha=
t Microsoft has a POSIX compatibility layer and that=E2=80=99s where <code>=
fork()</code> would be. (And maybe even <code>sigaction</code>.)</p>
<p>Search the help that came with VC++ for =E2=80=9Cfork=E2=80=9D or =E2=80=
=9CPOSIX=E2=80=9D and see if it gives you any clues.</p>
<p>If that doesn=E2=80=99t work at all, ditch the <code>fork()</code>/<code=
>sigaction</code> stuff and replace it with the Win32 equivalent:  <code>Cr=
eateProcess()</code>. I don=E2=80=99t know how to use <code>CreateProcess()=
</code>=E2=80=94it takes a bazillion arguments, but it should be covered in=
 the docs that came with VC++.</p>
<p><strong> I=E2=80=99m behind a firewall=E2=80=94how do I let people outsi=
de the firewall know my IP address so they can connect to my machine?</stro=
ng></p>
<p>Unfortunately, the purpose of a firewall is to prevent people outside th=
e firewall from connecting to machines inside the firewall, so allowing the=
m to do so is basically considered a breach of security.</p>
<p>This isn=E2=80=99t to say that all is lost. For one thing, you can still=
 often <code>connect()</code> through the firewall if it=E2=80=99s doing so=
me kind of masquerading or NAT or something like that. Just design your pro=
grams so that you=E2=80=99re always the one initiating the connection, and =
you=E2=80=99ll be fine.</p>
<p> If that=E2=80=99s not satisfactory, you can ask your sysadmins to poke =
a hole in the firewall so that people can connect to you. The firewall can =
forward to you either through it=E2=80=99s NAT software, or through a proxy=
 or something like that.</p>
<p>Be aware that a hole in the firewall is nothing to be taken lightly. You=
 have to make sure you don=E2=80=99t give bad people access to the internal=
 network; if you=E2=80=99re a beginner, it=E2=80=99s a lot harder to make s=
oftware secure than you might imagine.</p>
<p>Don=E2=80=99t make your sysadmin mad at me. <code>;-)</code></p>
<p><strong>  How do I write a packet sniffer? How do I put my Ethernet inte=
rface into promiscuous mode?</strong></p>
<p>For those not in the know, when a network card is in =E2=80=9Cpromiscuou=
s mode=E2=80=9D, it will forward ALL packets to the operating system, not j=
ust those that were addressed to this particular machine. (We=E2=80=99re ta=
lking Ethernet-layer addresses here, not IP addresses=E2=80=93but since eth=
ernet is lower-layer than IP, all IP addresses are effectively forwarded as=
 well. See the section <a href=3D"https://beej.us/guide/bgnet/html/#lowleve=
l">Low Level Nonsense and Network Theory</a> for more info.)</p>
<p>This is the basis for how a packet sniffer works. It puts the interface =
into promiscuous mode, then the OS gets every single packet that goes by on=
 the wire. You=E2=80=99ll have a socket of some type that you can read this=
 data from.</p>
<p>Unfortunately, the answer to the question varies depending on the platfo=
rm, but if you Google for, for instance, =E2=80=9Cwindows promiscuous  ioct=
l=E2=80=9D you=E2=80=99ll probably get somewhere. For Linux, there=E2=80=99=
s what looks like a <a href=3D"https://stackoverflow.com/questions/21323023=
/">useful Stack Overflow thread</a><a href=3D"https://beej.us/guide/bgnet/h=
tml/#fn46" class=3D"footnote-ref" id=3D"fnref46" role=3D"doc-noteref"><sup>=
46</sup></a>, as well.</p>
<p><strong>How can I set a custom  timeout value for a TCP or UDP socket?</=
strong></p>
<p>It depends on your system. You might search the net for  <code>SO_RCVTIM=
EO</code> and  <code>SO_SNDTIMEO</code> (for use with  <code>setsockopt()</=
code>) to see if your system supports such functionality.</p>
<p>The Linux man page suggests using <code>alarm()</code> or <code>setitime=
r()</code> as a substitute.</p>
<p><strong>How can I tell which ports are available to use? Is there a list=
 of =E2=80=9Cofficial=E2=80=9D port numbers?</strong></p>
<p>Usually this isn=E2=80=99t an issue. If you=E2=80=99re writing, say, a w=
eb server, then it=E2=80=99s a good idea to use the well-known port 80 for =
your software. If you=E2=80=99re writing just your own specialized server, =
then choose a port at random (but greater than 1023) and give it a try.</p>
<p>If the port is already in use, you=E2=80=99ll get an =E2=80=9CAddress al=
ready in use=E2=80=9D error when you try to <code>bind()</code>. Choose ano=
ther port. (It=E2=80=99s a good idea to allow the user of your software to =
specify an alternate port either with a config file or a command line switc=
h.)</p>
<p>There is a <a href=3D"https://www.iana.org/assignments/port-numbers">lis=
t of official port numbers</a><a href=3D"https://beej.us/guide/bgnet/html/#=
fn47" class=3D"footnote-ref" id=3D"fnref47" role=3D"doc-noteref"><sup>47</s=
up></a> maintained by the Internet Assigned Numbers Authority (IANA). Just =
because something (over 1023) is in that list doesn=E2=80=99t mean you can=
=E2=80=99t use the port. For instance, Id Software=E2=80=99s DOOM uses the =
same port as =E2=80=9Cmdqs=E2=80=9D, whatever that is. All that matters is =
that no one else <em>on the same machine</em> is using that port when you w=
ant to use it.</p>
<h1 data-number=3D"9" id=3D"man-pages"><span class=3D"header-section-number=
">9</span> Man Pages</h1>
<p> In the Unix world, there are a lot of manuals. They have little section=
s that describe individual functions that you have at your disposal.</p>
<p>Of course, <code>manual</code> would be too much of a thing to type. I m=
ean, no one in the Unix world, including myself, likes to type that much. I=
ndeed I could go on and on at great length about how much I prefer to be te=
rse but instead I shall be brief and not bore you with long-winded diatribe=
s about how utterly amazingly brief I prefer to be in virtually all circums=
tances in their entirety.</p>
<p><em>[Applause]</em></p>
<p>Thank you. What I am getting at is that these pages are called =E2=80=9C=
man pages=E2=80=9D in the Unix world, and I have included my own personal t=
runcated variant here for your reading enjoyment. The thing is, many of the=
se functions are way more general purpose than I=E2=80=99m letting on, but =
I=E2=80=99m only going to present the parts that are relevant for Internet =
Sockets Programming.</p>
<p>But wait! That=E2=80=99s not all that=E2=80=99s wrong with my man pages:=
</p>
<ul>
<li>They are incomplete and only show the basics from the guide.</li>
<li>There are many more man pages than this in the real world.</li>
<li>They are different than the ones on your system.</li>
<li>The header files might be different for certain functions on your syste=
m.</li>
<li>The function parameters might be different for certain functions on you=
r system.</li>
</ul>
<p>If you want the real information, check your local Unix man pages by typ=
ing <code>man whatever</code>, where =E2=80=9Cwhatever=E2=80=9D is somethin=
g that you=E2=80=99re incredibly interested in, such as =E2=80=9C<code>acce=
pt</code>=E2=80=9D. (I=E2=80=99m sure Microsoft Visual Studio has something=
 similar in their help section. But =E2=80=9Cman=E2=80=9D is better because=
 it is one byte more concise than =E2=80=9Chelp=E2=80=9D. Unix wins again!)=
</p>
<p>So, if these are so flawed, why even include them at all in the Guide? W=
ell, there are a few reasons, but the best are that (a) these versions are =
geared specifically toward network programming and are easier to digest tha=
n the real ones, and (b) these versions contain examples!</p>
<p>Oh! And speaking of the examples, I don=E2=80=99t tend to put in all the=
 error checking because it really increases the length of the code. But you=
 should absolutely do error checking pretty much any time you make any of t=
he system calls unless you=E2=80=99re totally 100% sure it=E2=80=99s not go=
ing to fail, and you should probably do it even then!</p>
<h2 data-number=3D"9.1" id=3D"acceptman"><span class=3D"header-section-numb=
er">9.1</span> <code>accept()</code></h2>
<p>Accept an incoming connection on a listening socket</p>
<h4 data-number=3D"9.1.0.1" id=3D"synopsis"><span class=3D"header-section-n=
umber">9.1.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb80"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb80-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb80-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></span=
>
<span id=3D"cb80-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb80-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb80-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb80-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb80-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb80-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> ac=
cept(<span class=3D"dt">int</span> s, <span class=3D"kw">struct</span> sock=
addr *addr, socklen_t *addrlen);</span></code></pre></div>
<h4 data-number=3D"9.1.0.2" id=3D"description"><span class=3D"header-sectio=
n-number">9.1.0.2</span> Description</h4>
<p> Once you=E2=80=99ve gone through the trouble of getting a  <code>SOCK_S=
TREAM</code> socket and setting it up for incoming connections with <code>l=
isten()</code>, then you call <code>accept()</code> to actually get yoursel=
f a new socket descriptor to use for subsequent communication with the newl=
y connected client.</p>
<p>The old socket that you are using for listening is still there, and will=
 be used for further <code>accept()</code> calls as they come in.</p>
<table>
<colgroup>
<col style=3D"width: 14%">
<col style=3D"width: 85%">
</colgroup>
<thead>
<tr class=3D"header">
<th>Parameter</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>s</code></td>
<td>The <code>listen()</code>ing socket descriptor.</td>
</tr>
<tr class=3D"even">
<td><code>addr</code></td>
<td>This is filled in with the address of the site that=E2=80=99s connectin=
g to you.</td>
</tr>
<tr class=3D"odd">
<td><code>addrlen</code></td>
<td>This is filled in with the <code>sizeof()</code> the structure returned=
 in the <code>addr</code> parameter. You can safely ignore it if you assume=
 you=E2=80=99re getting a  <code>struct sockaddr_in</code> back, which you =
know you are, because that=E2=80=99s the type you passed in for <code>addr<=
/code>.</td>
</tr>
</tbody>
</table>
<p><code>accept()</code> will normally block, and you can use <code>select(=
)</code> to peek on the listening socket descriptor ahead of time to see if=
 it=E2=80=99s =E2=80=9Cready to read=E2=80=9D. If so, then there=E2=80=99s =
a new connection waiting to be <code>accept()</code>ed! Yay! Alternatively,=
 you could set the  <code>O_NONBLOCK</code> flag on the listening socket us=
ing  <code>fcntl()</code>, and then it will never block, choosing instead t=
o return <code>-1</code> with <code>errno</code> set to  <code>EWOULDBLOCK<=
/code>.</p>
<p>The socket descriptor returned by <code>accept()</code> is a bona fide s=
ocket descriptor, open and connected to the remote host. You have to <code>=
close()</code> it when you=E2=80=99re done with it.</p>
<h4 data-number=3D"9.1.0.3" id=3D"return-value"><span class=3D"header-secti=
on-number">9.1.0.3</span> Return Value</h4>
<p><code>accept()</code> returns the newly connected socket descriptor, or =
<code>-1</code> on error, with <code>errno</code> set appropriately.</p>
<h4 data-number=3D"9.1.0.4" id=3D"example"><span class=3D"header-section-nu=
mber">9.1.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb81"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb81-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb81-1"></a><span class=3D"kw">struct</s=
pan> sockaddr_storage their_addr;</span>
<span id=3D"cb81-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-2"></=
a>socklen_t addr_size;</span>
<span id=3D"cb81-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-3"></=
a><span class=3D"kw">struct</span> addrinfo hints, *res;</span>
<span id=3D"cb81-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-4"></=
a><span class=3D"dt">int</span> sockfd, new_fd;</span>
<span id=3D"cb81-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-5"></=
a></span>
<span id=3D"cb81-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-6"></=
a><span class=3D"co">// first, load up address structs with getaddrinfo():<=
/span></span>
<span id=3D"cb81-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-7"></=
a></span>
<span id=3D"cb81-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-8"></=
a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">sizeof=
</span> hints);</span>
<span id=3D"cb81-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-9"></=
a>hints.ai_family =3D AF_UNSPEC;  <span class=3D"co">// use IPv4 or IPv6, w=
hichever</span></span>
<span id=3D"cb81-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-10">=
</a>hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb81-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-11">=
</a>hints.ai_flags =3D AI_PASSIVE;     <span class=3D"co">// fill in my IP =
for me</span></span>
<span id=3D"cb81-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-12">=
</a></span>
<span id=3D"cb81-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-13">=
</a>getaddrinfo(NULL, MYPORT, &amp;hints, &amp;res);</span>
<span id=3D"cb81-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-14">=
</a></span>
<span id=3D"cb81-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-15">=
</a><span class=3D"co">// make a socket, bind it, and listen on it:</span><=
/span>
<span id=3D"cb81-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-16">=
</a></span>
<span id=3D"cb81-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-17">=
</a>sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_pr=
otocol);</span>
<span id=3D"cb81-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-18">=
</a>bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span>
<span id=3D"cb81-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-19">=
</a>listen(sockfd, BACKLOG);</span>
<span id=3D"cb81-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-20">=
</a></span>
<span id=3D"cb81-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-21">=
</a><span class=3D"co">// now accept an incoming connection:</span></span>
<span id=3D"cb81-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-22">=
</a></span>
<span id=3D"cb81-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-23">=
</a>addr_size =3D <span class=3D"kw">sizeof</span> their_addr;</span>
<span id=3D"cb81-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-24">=
</a>new_fd =3D accept(sockfd, (<span class=3D"kw">struct</span> sockaddr *)=
&amp;their_addr, &amp;addr_size);</span>
<span id=3D"cb81-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-25">=
</a></span>
<span id=3D"cb81-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb81-26">=
</a><span class=3D"co">// ready to communicate on socket descriptor new_fd!=
</span></span></code></pre></div>
<h4 data-number=3D"9.1.0.5" id=3D"see-also"><span class=3D"header-section-n=
umber">9.1.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#socketman"><code>socket()</=
code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#getaddrinfoman"><co=
de>getaddrinfo()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#l=
istenman"><code>listen()</code></a>, <a href=3D"https://beej.us/guide/bgnet=
/html/#sockaddr_inman"><code>struct sockaddr_in</code></a></p>
<h2 data-number=3D"9.2" id=3D"bindman"><span class=3D"header-section-number=
">9.2</span> <code>bind()</code></h2>
<p>Associate a socket with an IP address and port number</p>
<h4 data-number=3D"9.2.0.1" id=3D"synopsis-1"><span class=3D"header-section=
-number">9.2.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb82"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb82-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb82-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></span=
>
<span id=3D"cb82-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb82-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb82-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb82-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb82-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb82-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> bi=
nd(<span class=3D"dt">int</span> sockfd, <span class=3D"kw">struct</span> s=
ockaddr *my_addr, socklen_t addrlen);</span></code></pre></div>
<h4 data-number=3D"9.2.0.2" id=3D"description-1"><span class=3D"header-sect=
ion-number">9.2.0.2</span> Description</h4>
<p> When a remote machine wants to connect to your server program, it needs=
 two pieces of information: the  IP address and the  port number. The <code=
>bind()</code> call allows you to do just that.</p>
<p>First, you call <code>getaddrinfo()</code> to load up a <code>struct soc=
kaddr</code> with the destination address and port information. Then you ca=
ll <code>socket()</code> to get a socket descriptor, and then you pass the =
socket and address into <code>bind()</code>, and the IP address and port ar=
e magically (using actual magic) bound to the socket!</p>
<p>If you don=E2=80=99t know your IP address, or you know you only have one=
 IP address on the machine, or you don=E2=80=99t care which of the machine=
=E2=80=99s IP addresses is used, you can simply pass the <code>AI_PASSIVE</=
code> flag in the <code>hints</code> parameter to <code>getaddrinfo()</code=
>. What this does is fill in the IP address part of the <code>struct sockad=
dr</code> with a special value that tells <code>bind()</code> that it shoul=
d automatically fill in this host=E2=80=99s IP address.</p>
<p>What what? What special value is loaded into the <code>struct sockaddr</=
code>=E2=80=99s IP address to cause it to auto-fill the address with the cu=
rrent host? I=E2=80=99ll tell you, but keep in mind this is only if you=E2=
=80=99re filling out the <code>struct sockaddr</code> by hand; if not, use =
the results from <code>getaddrinfo()</code>, as per above. In IPv4, the <co=
de>sin_addr.s_addr</code> field of the <code>struct sockaddr_in</code> stru=
cture is set to <code>INADDR_ANY</code>. In IPv6, the <code>sin6_addr</code=
> field of the <code>struct sockaddr_in6</code> structure is assigned into =
from the global variable <code>in6addr_any</code>. Or, if you=E2=80=99re de=
claring a new <code>struct in6_addr</code>, you can initialize it to <code>=
IN6ADDR_ANY_INIT</code>.</p>
<p>Lastly, the <code>addrlen</code> parameter should be set to <code>sizeof=
 my_addr</code>.</p>
<h4 data-number=3D"9.2.0.3" id=3D"return-value-1"><span class=3D"header-sec=
tion-number">9.2.0.3</span> Return Value</h4>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly).</p>
<h4 data-number=3D"9.2.0.4" id=3D"example-1"><span class=3D"header-section-=
number">9.2.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb83"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb83-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb83-1"></a><span class=3D"co">// modern=
 way of doing things with getaddrinfo()</span></span>
<span id=3D"cb83-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-2"></=
a></span>
<span id=3D"cb83-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-3"></=
a><span class=3D"kw">struct</span> addrinfo hints, *res;</span>
<span id=3D"cb83-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-4"></=
a><span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb83-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-5"></=
a></span>
<span id=3D"cb83-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-6"></=
a><span class=3D"co">// first, load up address structs with getaddrinfo():<=
/span></span>
<span id=3D"cb83-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-7"></=
a></span>
<span id=3D"cb83-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-8"></=
a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">sizeof=
</span> hints);</span>
<span id=3D"cb83-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-9"></=
a>hints.ai_family =3D AF_UNSPEC;  <span class=3D"co">// use IPv4 or IPv6, w=
hichever</span></span>
<span id=3D"cb83-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-10">=
</a>hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb83-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-11">=
</a>hints.ai_flags =3D AI_PASSIVE;     <span class=3D"co">// fill in my IP =
for me</span></span>
<span id=3D"cb83-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-12">=
</a></span>
<span id=3D"cb83-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-13">=
</a>getaddrinfo(NULL, <span class=3D"st">"3490"</span>, &amp;hints, &amp;re=
s);</span>
<span id=3D"cb83-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-14">=
</a></span>
<span id=3D"cb83-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-15">=
</a><span class=3D"co">// make a socket:</span></span>
<span id=3D"cb83-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-16">=
</a><span class=3D"co">// (you should actually walk the "res" linked list a=
nd error-check!)</span></span>
<span id=3D"cb83-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-17">=
</a></span>
<span id=3D"cb83-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-18">=
</a>sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_pr=
otocol);</span>
<span id=3D"cb83-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-19">=
</a></span>
<span id=3D"cb83-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-20">=
</a><span class=3D"co">// bind it to the port we passed in to getaddrinfo()=
:</span></span>
<span id=3D"cb83-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-21">=
</a></span>
<span id=3D"cb83-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb83-22">=
</a>bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span></code></pre><=
/div>
<div class=3D"sourceCode" id=3D"cb84"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb84-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb84-1"></a><span class=3D"co">// exampl=
e of packing a struct by hand, IPv4</span></span>
<span id=3D"cb84-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-2"></=
a></span>
<span id=3D"cb84-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-3"></=
a><span class=3D"kw">struct</span> sockaddr_in myaddr;</span>
<span id=3D"cb84-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-4"></=
a><span class=3D"dt">int</span> s;</span>
<span id=3D"cb84-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-5"></=
a></span>
<span id=3D"cb84-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-6"></=
a>myaddr.sin_family =3D AF_INET;</span>
<span id=3D"cb84-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-7"></=
a>myaddr.sin_port =3D htons(<span class=3D"dv">3490</span>);</span>
<span id=3D"cb84-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-8"></=
a></span>
<span id=3D"cb84-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-9"></=
a><span class=3D"co">// you can specify an IP address:</span></span>
<span id=3D"cb84-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-10">=
</a>inet_pton(AF_INET, <span class=3D"st">"63.161.169.137"</span>, &amp;(my=
addr.sin_addr));</span>
<span id=3D"cb84-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-11">=
</a></span>
<span id=3D"cb84-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-12">=
</a><span class=3D"co">// or you can let it automatically select one:</span=
></span>
<span id=3D"cb84-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-13">=
</a>myaddr.sin_addr.s_addr =3D INADDR_ANY;</span>
<span id=3D"cb84-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-14">=
</a></span>
<span id=3D"cb84-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-15">=
</a>s =3D socket(PF_INET, SOCK_STREAM, <span class=3D"dv">0</span>);</span>
<span id=3D"cb84-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb84-16">=
</a>bind(s, (<span class=3D"kw">struct</span> sockaddr*)&amp;myaddr, <span =
class=3D"kw">sizeof</span> myaddr);</span></code></pre></div>
<h4 data-number=3D"9.2.0.5" id=3D"see-also-1"><span class=3D"header-section=
-number">9.2.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#getaddrinfoman"><code>getad=
drinfo()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#socketman=
"><code>socket()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#s=
ockaddr_inman"><code>struct sockaddr_in</code></a>, <a href=3D"https://beej=
.us/guide/bgnet/html/#sockaddr_inman"><code>struct in_addr</code></a></p>
<h2 data-number=3D"9.3" id=3D"connectman"><span class=3D"header-section-num=
ber">9.3</span> <code>connect()</code></h2>
<p>Connect a socket to a server</p>
<h4 data-number=3D"9.3.0.1" id=3D"synopsis-2"><span class=3D"header-section=
-number">9.3.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb85"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb85-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb85-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></span=
>
<span id=3D"cb85-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb85-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb85-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb85-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb85-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb85-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> co=
nnect(<span class=3D"dt">int</span> sockfd, <span class=3D"dt">const</span>=
 <span class=3D"kw">struct</span> sockaddr *serv_addr,</span>
<span id=3D"cb85-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb85-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>                socklen_t addrlen);<=
/span></code></pre></div>
<h4 data-number=3D"9.3.0.2" id=3D"description-2"><span class=3D"header-sect=
ion-number">9.3.0.2</span> Description</h4>
<p> Once you=E2=80=99ve built a socket descriptor with the <code>socket()</=
code> call, you can <code>connect()</code> that socket to a remote server u=
sing the well-named <code>connect()</code> system call. All you need to do =
is pass it the socket descriptor and the address of the server you=E2=80=99=
re interested in getting to know better. (Oh, and the length of the address=
, which is commonly passed to functions like this.)</p>
<p>Usually this information comes along as the result of a call to <code>ge=
taddrinfo()</code>, but you can fill out your own <code>struct sockaddr</co=
de> if you want to.</p>
<p>If you haven=E2=80=99t yet called <code>bind()</code> on the socket desc=
riptor, it is automatically bound to your IP address and a random local por=
t. This is usually just fine with you if you=E2=80=99re not a server, since=
 you really don=E2=80=99t care what your local port is; you only care what =
the remote port is so you can put it in the <code>serv_addr</code> paramete=
r. You <em>can</em> call <code>bind()</code> if you really want your client=
 socket to be on a specific IP address and port, but this is pretty rare.</=
p>
<p>Once the socket is <code>connect()</code>ed, you=E2=80=99re free to <cod=
e>send()</code> and <code>recv()</code> data on it to your heart=E2=80=99s =
content.</p>
<p> Special note: if you <code>connect()</code> a <code>SOCK_DGRAM</code> U=
DP socket to a remote host, you can use <code>send()</code> and <code>recv(=
)</code> as well as <code>sendto()</code> and <code>recvfrom()</code>. If y=
ou want.</p>
<h4 data-number=3D"9.3.0.3" id=3D"return-value-2"><span class=3D"header-sec=
tion-number">9.3.0.3</span> Return Value</h4>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly).</p>
<h4 data-number=3D"9.3.0.4" id=3D"example-2"><span class=3D"header-section-=
number">9.3.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb86"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb86-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb86-1"></a><span class=3D"co">// connec=
t to www.example.com port 80 (http)</span></span>
<span id=3D"cb86-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-2"></=
a></span>
<span id=3D"cb86-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-3"></=
a><span class=3D"kw">struct</span> addrinfo hints, *res;</span>
<span id=3D"cb86-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-4"></=
a><span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb86-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-5"></=
a></span>
<span id=3D"cb86-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-6"></=
a><span class=3D"co">// first, load up address structs with getaddrinfo():<=
/span></span>
<span id=3D"cb86-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-7"></=
a></span>
<span id=3D"cb86-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-8"></=
a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">sizeof=
</span> hints);</span>
<span id=3D"cb86-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-9"></=
a>hints.ai_family =3D AF_UNSPEC;  <span class=3D"co">// use IPv4 or IPv6, w=
hichever</span></span>
<span id=3D"cb86-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-10">=
</a>hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb86-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-11">=
</a></span>
<span id=3D"cb86-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-12">=
</a><span class=3D"co">// we could put "80" instead on "http" on the next l=
ine:</span></span>
<span id=3D"cb86-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-13">=
</a>getaddrinfo(<span class=3D"st">"www.example.com"</span>, <span class=3D=
"st">"http"</span>, &amp;hints, &amp;res);</span>
<span id=3D"cb86-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-14">=
</a></span>
<span id=3D"cb86-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-15">=
</a><span class=3D"co">// make a socket:</span></span>
<span id=3D"cb86-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-16">=
</a></span>
<span id=3D"cb86-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-17">=
</a>sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_pr=
otocol);</span>
<span id=3D"cb86-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-18">=
</a></span>
<span id=3D"cb86-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-19">=
</a><span class=3D"co">// connect it to the address and port we passed in t=
o getaddrinfo():</span></span>
<span id=3D"cb86-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-20">=
</a></span>
<span id=3D"cb86-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb86-21">=
</a>connect(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span></code></pr=
e></div>
<h4 data-number=3D"9.3.0.5" id=3D"see-also-2"><span class=3D"header-section=
-number">9.3.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#socketman"><code>socket()</=
code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#bindman"><code>bind=
()</code></a></p>
<h2 data-number=3D"9.4" id=3D"closeman"><span class=3D"header-section-numbe=
r">9.4</span> <code>close()</code></h2>
<p>Close a socket descriptor</p>
<h4 data-number=3D"9.4.0.1" id=3D"synopsis-3"><span class=3D"header-section=
-number">9.4.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb87"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb87-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb87-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;unistd.h&gt;</span></span>
<span id=3D"cb87-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb87-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb87-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb87-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> cl=
ose(<span class=3D"dt">int</span> s);</span></code></pre></div>
<h4 data-number=3D"9.4.0.2" id=3D"description-3"><span class=3D"header-sect=
ion-number">9.4.0.2</span> Description</h4>
<p> After you=E2=80=99ve finished using the socket for whatever demented sc=
heme you have concocted and you don=E2=80=99t want to <code>send()</code> o=
r <code>recv()</code> or, indeed, do <em>anything else</em> at all with the=
 socket, you can <code>close()</code> it, and it=E2=80=99ll be freed up, ne=
ver to be used again.</p>
<p>The remote side can tell if this happens one of two ways. One: if the re=
mote side calls <code>recv()</code>, it will return <code>0</code>. Two: if=
 the remote side calls <code>send()</code>, it=E2=80=99ll receive a signal =
 <code>SIGPIPE</code> and send() will return <code>-1</code> and <code>errn=
o</code> will be set to  <code>EPIPE</code>.</p>
<p> <strong>Windows users</strong>: the function you need to use is called =
 <code>closesocket()</code>, not <code>close()</code>. If you try to use <c=
ode>close()</code> on a socket descriptor, it=E2=80=99s possible Windows wi=
ll get angry=E2=80=A6 And you wouldn=E2=80=99t like it when it=E2=80=99s an=
gry.</p>
<h4 data-number=3D"9.4.0.3" id=3D"return-value-3"><span class=3D"header-sec=
tion-number">9.4.0.3</span> Return Value</h4>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly).</p>
<h4 data-number=3D"9.4.0.4" id=3D"example-3"><span class=3D"header-section-=
number">9.4.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb88"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb88-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb88-1"></a>s =3D socket(PF_INET, SOCK_D=
GRAM, <span class=3D"dv">0</span>);</span>
<span id=3D"cb88-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb88-2"></=
a>.</span>
<span id=3D"cb88-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb88-3"></=
a>.</span>
<span id=3D"cb88-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb88-4"></=
a>.</span>
<span id=3D"cb88-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb88-5"></=
a><span class=3D"co">// a whole lotta stuff...*BRRRONNNN!*</span></span>
<span id=3D"cb88-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb88-6"></=
a>.</span>
<span id=3D"cb88-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb88-7"></=
a>.</span>
<span id=3D"cb88-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb88-8"></=
a>.</span>
<span id=3D"cb88-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb88-9"></=
a>close(s);  <span class=3D"co">// not much to it, really.</span></span></c=
ode></pre></div>
<h4 data-number=3D"9.4.0.5" id=3D"see-also-3"><span class=3D"header-section=
-number">9.4.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#socketman"><code>socket()</=
code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#shutdownman"><code>=
shutdown()</code></a></p>
<h2 data-number=3D"9.5" id=3D"getaddrinfoman"><span class=3D"header-section=
-number">9.5</span> <code>getaddrinfo()</code>, <code>freeaddrinfo()</code>=
, <code>gai_strerror()</code></h2>
<p>Get information about a host name and/or service and load up a <code>str=
uct sockaddr</code> with the result.</p>
<h4 data-number=3D"9.5.0.1" id=3D"synopsis-4"><span class=3D"header-section=
-number">9.5.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb89"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb89-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb89-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></span=
>
<span id=3D"cb89-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb89-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;netdb.h&gt;</span></span>
<span id=3D"cb89-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb89-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> ge=
taddrinfo(<span class=3D"dt">const</span> <span class=3D"dt">char</span> *n=
odename, <span class=3D"dt">const</span> <span class=3D"dt">char</span> *se=
rvname,</span>
<span id=3D"cb89-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-6" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>                    <span class=3D"d=
t">const</span> <span class=3D"kw">struct</span> addrinfo *hints, <span cla=
ss=3D"kw">struct</span> addrinfo **res);</span>
<span id=3D"cb89-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-7" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb89-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-8" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">void</span> f=
reeaddrinfo(<span class=3D"kw">struct</span> addrinfo *ai);</span>
<span id=3D"cb89-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-9" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb89-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-10" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">const</span=
> <span class=3D"dt">char</span> *gai_strerror(<span class=3D"dt">int</span=
> ecode);</span>
<span id=3D"cb89-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-11" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb89-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-12" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</spa=
n> addrinfo {</span>
<span id=3D"cb89-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-13" =
aria-hidden=3D"true" tabindex=3D"-1"></a>      <span class=3D"dt">int</span=
>     ai_flags;          <span class=3D"co">// AI_PASSIVE, AI_CANONNAME, ..=
.</span></span>
<span id=3D"cb89-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-14" =
aria-hidden=3D"true" tabindex=3D"-1"></a>      <span class=3D"dt">int</span=
>     ai_family;         <span class=3D"co">// AF_xxx</span></span>
<span id=3D"cb89-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-15" =
aria-hidden=3D"true" tabindex=3D"-1"></a>      <span class=3D"dt">int</span=
>     ai_socktype;       <span class=3D"co">// SOCK_xxx</span></span>
<span id=3D"cb89-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-16" =
aria-hidden=3D"true" tabindex=3D"-1"></a>      <span class=3D"dt">int</span=
>     ai_protocol;       <span class=3D"co">// 0 (auto) or IPPROTO_TCP, IPP=
ROTO_UDP </span></span>
<span id=3D"cb89-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-17" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb89-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-18" =
aria-hidden=3D"true" tabindex=3D"-1"></a>      socklen_t  ai_addrlen;     <=
span class=3D"co">// length of ai_addr</span></span>
<span id=3D"cb89-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-19" =
aria-hidden=3D"true" tabindex=3D"-1"></a>      <span class=3D"dt">char</spa=
n>   *ai_canonname;      <span class=3D"co">// canonical name for nodename<=
/span></span>
<span id=3D"cb89-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-20" =
aria-hidden=3D"true" tabindex=3D"-1"></a>      <span class=3D"kw">struct</s=
pan> sockaddr  *ai_addr; <span class=3D"co">// binary address</span></span>
<span id=3D"cb89-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-21" =
aria-hidden=3D"true" tabindex=3D"-1"></a>      <span class=3D"kw">struct</s=
pan> addrinfo  *ai_next; <span class=3D"co">// next structure in linked lis=
t</span></span>
<span id=3D"cb89-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb89-22" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    };</span></code></pre></div>
<h4 data-number=3D"9.5.0.2" id=3D"description-4"><span class=3D"header-sect=
ion-number">9.5.0.2</span> Description</h4>
<p><code>getaddrinfo()</code> is an excellent function that will return inf=
ormation on a particular host name (such as its IP address) and load up a <=
code>struct sockaddr</code> for you, taking care of the gritty details (lik=
e if it=E2=80=99s IPv4 or IPv6). It replaces the old functions <code>gethos=
tbyname()</code> and <code>getservbyname()</code>.The description, below, c=
ontains a lot of information that might be a little daunting, but actual us=
age is pretty simple. It might be worth it to check out the examples first.=
</p>
<p>The host name that you=E2=80=99re interested in goes in the <code>nodena=
me</code> parameter. The address can be either a host name, like =E2=80=9Cw=
ww.example.com=E2=80=9D, or an IPv4 or IPv6 address (passed as a string). T=
his parameter can also be <code>NULL</code> if you=E2=80=99re using the <co=
de>AI_PASSIVE</code> flag (see below).</p>
<p>The <code>servname</code> parameter is basically the port number. It can=
 be a port number (passed as a string, like =E2=80=9C80=E2=80=9D), or it ca=
n be a service name, like =E2=80=9Chttp=E2=80=9D or =E2=80=9Ctftp=E2=80=9D =
or =E2=80=9Csmtp=E2=80=9D or =E2=80=9Cpop=E2=80=9D, etc. Well-known service=
 names can be found in the <a href=3D"https://www.iana.org/assignments/port=
-numbers">IANA Port List</a><a href=3D"https://beej.us/guide/bgnet/html/#fn=
48" class=3D"footnote-ref" id=3D"fnref48" role=3D"doc-noteref"><sup>48</sup=
></a> or in your <code>/etc/services</code> file.</p>
<p>Lastly, for input parameters, we have <code>hints</code>. This is really=
 where you get to define what the <code>getaddrinfo()</code> function is go=
ing to do. Zero the whole structure before use with <code>memset()</code>. =
Let=E2=80=99s take a look at the fields you need to set up before use.</p>
<p>The <code>ai_flags</code> can be set to a variety of things, but here ar=
e a couple important ones. (Multiple flags can be specified by bitwise-ORin=
g them together with the <code>|</code> operator). Check your man page for =
the complete list of flags.</p>
<p><code>AI_CANONNAME</code> causes the <code>ai_canonname</code> of the re=
sult to the filled out with the host=E2=80=99s canonical (real) name. <code=
>AI_PASSIVE</code> causes the result=E2=80=99s IP address to be filled out =
with <code>INADDR_ANY</code> (IPv4) or <code>in6addr_any</code> (IPv6); thi=
s causes a subsequent call to <code>bind()</code> to auto-fill the IP addre=
ss of the <code>struct sockaddr</code> with the address of the current host=
. That=E2=80=99s excellent for setting up a server when you don=E2=80=99t w=
ant to hardcode the address.</p>
<p>If you do use the <code>AI_PASSIVE</code>, flag, then you can pass <code=
>NULL</code> in the <code>nodename</code> (since <code>bind()</code> will f=
ill it in for you later).</p>
<p>Continuing on with the input paramters, you=E2=80=99ll likely want to se=
t <code>ai_family</code> to <code>AF_UNSPEC</code> which tells <code>getadd=
rinfo()</code> to look for both IPv4 and IPv6 addresses. You can also restr=
ict yourself to one or the other with <code>AF_INET</code> or <code>AF_INET=
6</code>.</p>
<p>Next, the <code>socktype</code> field should be set to <code>SOCK_STREAM=
</code> or <code>SOCK_DGRAM</code>, depending on which type of socket you w=
ant.</p>
<p>Finally, just leave <code>ai_protocol</code> at <code>0</code> to automa=
tically choose your protocol type.</p>
<p>Now, after you get all that stuff in there, you can <em>finally</em> mak=
e the call to <code>getaddrinfo()</code>!</p>
<p>Of course, this is where the fun begins. The <code>res</code> will now p=
oint to a linked list of <code>struct addrinfo</code>s, and you can go thro=
ugh this list to get all the addresses that match what you passed in with t=
he hints.</p>
<p>Now, it=E2=80=99s possible to get some addresses that don=E2=80=99t work=
 for one reason or another, so what the Linux man page does is loops throug=
h the list doing a call to <code>socket()</code> and <code>connect()</code>=
 (or <code>bind()</code> if you=E2=80=99re setting up a server with the <co=
de>AI_PASSIVE</code> flag) until it succeeds.</p>
<p>Finally, when you=E2=80=99re done with the linked list, you need to call=
 <code>freeaddrinfo()</code> to free up the memory (or it will be leaked, a=
nd Some People will get upset).</p>
<h4 data-number=3D"9.5.0.3" id=3D"return-value-4"><span class=3D"header-sec=
tion-number">9.5.0.3</span> Return Value</h4>
<p>Returns zero on success, or nonzero on error. If it returns nonzero, you=
 can use the function <code>gai_strerror()</code> to get a printable versio=
n of the error code in the return value.</p>
<h4 data-number=3D"9.5.0.4" id=3D"example-4"><span class=3D"header-section-=
number">9.5.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb90"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb90-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb90-1"></a><span class=3D"co">// code f=
or a client connecting to a server</span></span>
<span id=3D"cb90-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-2"></=
a><span class=3D"co">// namely a stream socket to www.example.com on port 8=
0 (http)</span></span>
<span id=3D"cb90-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-3"></=
a><span class=3D"co">// either IPv4 or IPv6</span></span>
<span id=3D"cb90-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-4"></=
a></span>
<span id=3D"cb90-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-5"></=
a><span class=3D"dt">int</span> sockfd;  </span>
<span id=3D"cb90-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-6"></=
a><span class=3D"kw">struct</span> addrinfo hints, *servinfo, *p;</span>
<span id=3D"cb90-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-7"></=
a><span class=3D"dt">int</span> rv;</span>
<span id=3D"cb90-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-8"></=
a></span>
<span id=3D"cb90-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-9"></=
a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">sizeof=
</span> hints);</span>
<span id=3D"cb90-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-10">=
</a>hints.ai_family =3D AF_UNSPEC; <span class=3D"co">// use AF_INET6 to fo=
rce IPv6</span></span>
<span id=3D"cb90-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-11">=
</a>hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb90-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-12">=
</a></span>
<span id=3D"cb90-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-13">=
</a><span class=3D"cf">if</span> ((rv =3D getaddrinfo(<span class=3D"st">"w=
ww.example.com"</span>, <span class=3D"st">"http"</span>, &amp;hints, &amp;=
servinfo)) !=3D <span class=3D"dv">0</span>) {</span>
<span id=3D"cb90-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-14">=
</a>    fprintf(stderr, <span class=3D"st">"getaddrinfo: %s</span><span cla=
ss=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(rv));</span>
<span id=3D"cb90-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-15">=
</a>    exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb90-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-16">=
</a>}</span>
<span id=3D"cb90-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-17">=
</a></span>
<span id=3D"cb90-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-18">=
</a><span class=3D"co">// loop through all the results and connect to the f=
irst we can</span></span>
<span id=3D"cb90-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-19">=
</a><span class=3D"cf">for</span>(p =3D servinfo; p !=3D NULL; p =3D p-&gt;=
ai_next) {</span>
<span id=3D"cb90-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-20">=
</a>    <span class=3D"cf">if</span> ((sockfd =3D socket(p-&gt;ai_family, p=
-&gt;ai_socktype,</span>
<span id=3D"cb90-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-21">=
</a>            p-&gt;ai_protocol)) =3D=3D -<span class=3D"dv">1</span>) {<=
/span>
<span id=3D"cb90-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-22">=
</a>        perror(<span class=3D"st">"socket"</span>);</span>
<span id=3D"cb90-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-23">=
</a>        <span class=3D"cf">continue</span>;</span>
<span id=3D"cb90-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-24">=
</a>    }</span>
<span id=3D"cb90-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-25">=
</a></span>
<span id=3D"cb90-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-26">=
</a>    <span class=3D"cf">if</span> (connect(sockfd, p-&gt;ai_addr, p-&gt;=
ai_addrlen) =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb90-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-27">=
</a>        perror(<span class=3D"st">"connect"</span>);</span>
<span id=3D"cb90-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-28">=
</a>        close(sockfd);</span>
<span id=3D"cb90-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-29">=
</a>        <span class=3D"cf">continue</span>;</span>
<span id=3D"cb90-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-30">=
</a>    }</span>
<span id=3D"cb90-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-31">=
</a></span>
<span id=3D"cb90-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-32">=
</a>    <span class=3D"cf">break</span>; <span class=3D"co">// if we get he=
re, we must have connected successfully</span></span>
<span id=3D"cb90-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-33">=
</a>}</span>
<span id=3D"cb90-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-34">=
</a></span>
<span id=3D"cb90-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-35">=
</a><span class=3D"cf">if</span> (p =3D=3D NULL) {</span>
<span id=3D"cb90-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-36">=
</a>    <span class=3D"co">// looped off the end of the list with no connec=
tion</span></span>
<span id=3D"cb90-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-37">=
</a>    fprintf(stderr, <span class=3D"st">"failed to connect</span><span c=
lass=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb90-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-38">=
</a>    exit(<span class=3D"dv">2</span>);</span>
<span id=3D"cb90-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-39">=
</a>}</span>
<span id=3D"cb90-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-40">=
</a></span>
<span id=3D"cb90-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb90-41">=
</a>freeaddrinfo(servinfo); <span class=3D"co">// all done with this struct=
ure</span></span></code></pre></div>
<div class=3D"sourceCode" id=3D"cb91"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb91-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb91-1"></a><span class=3D"co">// code f=
or a server waiting for connections</span></span>
<span id=3D"cb91-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-2"></=
a><span class=3D"co">// namely a stream socket on port 3490, on this host's=
 IP</span></span>
<span id=3D"cb91-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-3"></=
a><span class=3D"co">// either IPv4 or IPv6.</span></span>
<span id=3D"cb91-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-4"></=
a></span>
<span id=3D"cb91-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-5"></=
a><span class=3D"dt">int</span> sockfd;  </span>
<span id=3D"cb91-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-6"></=
a><span class=3D"kw">struct</span> addrinfo hints, *servinfo, *p;</span>
<span id=3D"cb91-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-7"></=
a><span class=3D"dt">int</span> rv;</span>
<span id=3D"cb91-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-8"></=
a></span>
<span id=3D"cb91-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-9"></=
a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">sizeof=
</span> hints);</span>
<span id=3D"cb91-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-10">=
</a>hints.ai_family =3D AF_UNSPEC; <span class=3D"co">// use AF_INET6 to fo=
rce IPv6</span></span>
<span id=3D"cb91-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-11">=
</a>hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb91-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-12">=
</a>hints.ai_flags =3D AI_PASSIVE; <span class=3D"co">// use my IP address<=
/span></span>
<span id=3D"cb91-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-13">=
</a></span>
<span id=3D"cb91-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-14">=
</a><span class=3D"cf">if</span> ((rv =3D getaddrinfo(NULL, <span class=3D"=
st">"3490"</span>, &amp;hints, &amp;servinfo)) !=3D <span class=3D"dv">0</s=
pan>) {</span>
<span id=3D"cb91-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-15">=
</a>    fprintf(stderr, <span class=3D"st">"getaddrinfo: %s</span><span cla=
ss=3D"sc">\n</span><span class=3D"st">"</span>, gai_strerror(rv));</span>
<span id=3D"cb91-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-16">=
</a>    exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb91-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-17">=
</a>}</span>
<span id=3D"cb91-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-18">=
</a></span>
<span id=3D"cb91-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-19">=
</a><span class=3D"co">// loop through all the results and bind to the firs=
t we can</span></span>
<span id=3D"cb91-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-20">=
</a><span class=3D"cf">for</span>(p =3D servinfo; p !=3D NULL; p =3D p-&gt;=
ai_next) {</span>
<span id=3D"cb91-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-21">=
</a>    <span class=3D"cf">if</span> ((sockfd =3D socket(p-&gt;ai_family, p=
-&gt;ai_socktype,</span>
<span id=3D"cb91-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-22">=
</a>            p-&gt;ai_protocol)) =3D=3D -<span class=3D"dv">1</span>) {<=
/span>
<span id=3D"cb91-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-23">=
</a>        perror(<span class=3D"st">"socket"</span>);</span>
<span id=3D"cb91-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-24">=
</a>        <span class=3D"cf">continue</span>;</span>
<span id=3D"cb91-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-25">=
</a>    }</span>
<span id=3D"cb91-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-26">=
</a></span>
<span id=3D"cb91-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-27">=
</a>    <span class=3D"cf">if</span> (bind(sockfd, p-&gt;ai_addr, p-&gt;ai_=
addrlen) =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb91-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-28">=
</a>        close(sockfd);</span>
<span id=3D"cb91-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-29">=
</a>        perror(<span class=3D"st">"bind"</span>);</span>
<span id=3D"cb91-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-30">=
</a>        <span class=3D"cf">continue</span>;</span>
<span id=3D"cb91-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-31">=
</a>    }</span>
<span id=3D"cb91-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-32">=
</a></span>
<span id=3D"cb91-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-33">=
</a>    <span class=3D"cf">break</span>; <span class=3D"co">// if we get he=
re, we must have connected successfully</span></span>
<span id=3D"cb91-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-34">=
</a>}</span>
<span id=3D"cb91-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-35">=
</a></span>
<span id=3D"cb91-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-36">=
</a><span class=3D"cf">if</span> (p =3D=3D NULL) {</span>
<span id=3D"cb91-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-37">=
</a>    <span class=3D"co">// looped off the end of the list with no succes=
sful bind</span></span>
<span id=3D"cb91-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-38">=
</a>    fprintf(stderr, <span class=3D"st">"failed to bind socket</span><sp=
an class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb91-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-39">=
</a>    exit(<span class=3D"dv">2</span>);</span>
<span id=3D"cb91-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-40">=
</a>}</span>
<span id=3D"cb91-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-41">=
</a></span>
<span id=3D"cb91-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb91-42">=
</a>freeaddrinfo(servinfo); <span class=3D"co">// all done with this struct=
ure</span></span></code></pre></div>
<h4 data-number=3D"9.5.0.5" id=3D"see-also-4"><span class=3D"header-section=
-number">9.5.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#gethostbynameman"><code>get=
hostbyname()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#getna=
meinfoman"><code>getnameinfo()</code></a></p>
<h2 data-number=3D"9.6" id=3D"gethostnameman"><span class=3D"header-section=
-number">9.6</span> <code>gethostname()</code></h2>
<p>Returns the name of the system</p>
<h4 data-number=3D"9.6.0.1" id=3D"synopsis-5"><span class=3D"header-section=
-number">9.6.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb92"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb92-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb92-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/unistd.h&gt;</span></spa=
n>
<span id=3D"cb92-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb92-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb92-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb92-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> ge=
thostname(<span class=3D"dt">char</span> *name, <span class=3D"dt">size_t</=
span> len);</span></code></pre></div>
<h4 data-number=3D"9.6.0.2" id=3D"description-5"><span class=3D"header-sect=
ion-number">9.6.0.2</span> Description</h4>
<p> Your system has a name. They all do. This is a slightly more Unixy thin=
g than the rest of the networky stuff we=E2=80=99ve been talking about, but=
 it still has its uses.</p>
<p>For instance, you can get your host name, and then call  <code>gethostby=
name()</code> to find out your  IP address.</p>
<p>The parameter <code>name</code> should point to a buffer that will hold =
the host name, and <code>len</code> is the size of that buffer in bytes. <c=
ode>gethostname()</code> won=E2=80=99t overwrite the end of the buffer (it =
might return an error, or it might just stop writing), and it will <code>NU=
L</code>-terminate the string if there=E2=80=99s room for it in the buffer.=
</p>
<h4 data-number=3D"9.6.0.3" id=3D"return-value-5"><span class=3D"header-sec=
tion-number">9.6.0.3</span> Return Value</h4>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly).</p>
<h4 data-number=3D"9.6.0.4" id=3D"example-5"><span class=3D"header-section-=
number">9.6.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb93"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb93-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb93-1"></a><span class=3D"dt">char</spa=
n> hostname[<span class=3D"dv">128</span>];</span>
<span id=3D"cb93-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb93-2"></=
a></span>
<span id=3D"cb93-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb93-3"></=
a>gethostname(hostname, <span class=3D"kw">sizeof</span> hostname);</span>
<span id=3D"cb93-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb93-4"></=
a>printf(<span class=3D"st">"My hostname: %s</span><span class=3D"sc">\n</s=
pan><span class=3D"st">"</span>, hostname);</span></code></pre></div>
<h4 data-number=3D"9.6.0.5" id=3D"see-also-5"><span class=3D"header-section=
-number">9.6.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#gethostbynameman"><code>get=
hostbyname()</code></a></p>
<h2 data-number=3D"9.7" id=3D"gethostbynameman"><span class=3D"header-secti=
on-number">9.7</span> <code>gethostbyname()</code>, <code>gethostbyaddr()</=
code></h2>
<p>Get an IP address for a hostname, or vice-versa</p>
<h4 data-number=3D"9.7.0.1" id=3D"synopsis-6"><span class=3D"header-section=
-number">9.7.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb94"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb94-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb94-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt;</span></spa=
n>
<span id=3D"cb94-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb94-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;netdb.h&gt;</span></span>
<span id=3D"cb94-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb94-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb94-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb94-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</span>=
 hostent *gethostbyname(<span class=3D"dt">const</span> <span class=3D"dt">=
char</span> *name); <span class=3D"co">// </span><span class=3D"al">DEPRECA=
TED</span><span class=3D"co">!</span></span>
<span id=3D"cb94-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb94-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</span>=
 hostent *gethostbyaddr(<span class=3D"dt">const</span> <span class=3D"dt">=
char</span> *addr, <span class=3D"dt">int</span> len, <span class=3D"dt">in=
t</span> type);</span></code></pre></div>
<h4 data-number=3D"9.7.0.2" id=3D"description-6"><span class=3D"header-sect=
ion-number">9.7.0.2</span> Description</h4>
<p>  <em>PLEASE NOTE: these two functions are superseded by <code>getaddrin=
fo()</code> and <code>getnameinfo()</code>!</em> In particular, <code>getho=
stbyname()</code> doesn=E2=80=99t work well with IPv6.</p>
<p>These functions map back and forth between host names and IP addresses. =
For instance, if you have =E2=80=9Cwww.example.com=E2=80=9D, you can use <c=
ode>gethostbyname()</code> to get its IP address and store it in a <code>st=
ruct in_addr</code>.</p>
<p>Conversely, if you have a <code>struct in_addr</code> or a <code>struct =
in6_addr</code>, you can use <code>gethostbyaddr()</code> to get the hostna=
me back. <code>gethostbyaddr()</code> <em>is</em> IPv6 compatible, but you =
should use the newer shinier <code>getnameinfo()</code> instead.</p>
<p>(If you have a string containing an IP address in dots-and-numbers forma=
t that you want to look up the hostname of, you=E2=80=99d be better off usi=
ng <code>getaddrinfo()</code> with the <code>AI_CANONNAME</code> flag.)</p>
<p><code>gethostbyname()</code> takes a string like =E2=80=9Cwww.yahoo.com=
=E2=80=9D, and returns a <code>struct hostent</code> which contains tons of=
 information, including the  IP address. (Other information is the official=
 host name, a list of aliases, the address type, the length of the addresse=
s, and the list of addresses=E2=80=94it=E2=80=99s a general-purpose structu=
re that=E2=80=99s pretty easy to use for our specific purposes once you see=
 how.)</p>
<p><code>gethostbyaddr()</code> takes a <code>struct in_addr</code> or <cod=
e>struct in6_addr</code> and brings you up a corresponding host name (if th=
ere is one), so it=E2=80=99s sort of the reverse of <code>gethostbyname()</=
code>. As for parameters, even though <code>addr</code> is a <code>char*</c=
ode>, you actually want to pass in a pointer to a <code>struct in_addr</cod=
e>. <code>len</code> should be <code>sizeof(struct in_addr)</code>, and <co=
de>type</code> should be <code>AF_INET</code>.</p>
<p>So what is this  <code>struct hostent</code> that gets returned? It has =
a number of fields that contain information about the host in question.</p>
<table>
<colgroup>
<col style=3D"width: 30%">
<col style=3D"width: 69%">
</colgroup>
<thead>
<tr class=3D"header">
<th>Field</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>char *h_name</code></td>
<td>The real canonical host name.</td>
</tr>
<tr class=3D"even">
<td><code>char **h_aliases</code></td>
<td>A list of aliases that can be accessed with arrays=E2=80=94the last ele=
ment is <code>NULL</code></td>
</tr>
<tr class=3D"odd">
<td><code>int h_addrtype</code></td>
<td>The result=E2=80=99s address type, which really should be <code>AF_INET=
</code> for our purposes.</td>
</tr>
<tr class=3D"even">
<td><code>int length</code></td>
<td>The length of the addresses in bytes, which is 4 for IP (version 4) add=
resses.</td>
</tr>
<tr class=3D"odd">
<td><code>char **h_addr_list</code></td>
<td>A list of IP addresses for this host. Although this is a <code>char**</=
code>, it=E2=80=99s really an array of <code>struct in_addr*</code>s in dis=
guise. The last array element is <code>NULL</code>.</td>
</tr>
<tr class=3D"even">
<td><code>h_addr</code></td>
<td>A commonly defined alias for <code>h_addr_list[0]</code>. If you just w=
ant any old IP address for this host (yeah, they can have more than one) ju=
st use this field.</td>
</tr>
</tbody>
</table>
<h4 data-number=3D"9.7.0.3" id=3D"return-value-6"><span class=3D"header-sec=
tion-number">9.7.0.3</span> Return Value</h4>
<p>Returns a pointer to a resultant <code>struct hostent</code> on success,=
 or <code>NULL</code> on error.</p>
<p>Instead of the normal <code>perror()</code> and all that stuff you=E2=80=
=99d normally use for error reporting, these functions have parallel result=
s in the variable <code>h_errno</code>, which can be printed using the func=
tions  <code>herror()</code> or  <code>hstrerror()</code>. These work just =
like the classic <code>errno</code>, <code>perror()</code>, and <code>strer=
ror()</code> functions you=E2=80=99re used to.</p>
<h4 data-number=3D"9.7.0.4" id=3D"example-6"><span class=3D"header-section-=
number">9.7.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb95"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb95-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb95-1"></a><span class=3D"co">// THIS I=
S A </span><span class=3D"al">DEPRECATED</span><span class=3D"co"> METHOD O=
F GETTING HOST NAMES</span></span>
<span id=3D"cb95-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-2"></=
a><span class=3D"co">// use getaddrinfo() instead!</span></span>
<span id=3D"cb95-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-3"></=
a></span>
<span id=3D"cb95-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-4"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</sp=
an></span>
<span id=3D"cb95-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-5"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;errno.h&gt;</sp=
an></span>
<span id=3D"cb95-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-6"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;netdb.h&gt;</sp=
an></span>
<span id=3D"cb95-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-7"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;=
</span></span>
<span id=3D"cb95-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-8"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt=
;</span></span>
<span id=3D"cb95-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-9"></=
a><span class=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&gt=
;</span></span>
<span id=3D"cb95-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-10">=
</a><span class=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&g=
t;</span></span>
<span id=3D"cb95-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-11">=
</a></span>
<span id=3D"cb95-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-12">=
</a><span class=3D"dt">int</span> main(<span class=3D"dt">int</span> argc, =
<span class=3D"dt">char</span> *argv[])</span>
<span id=3D"cb95-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-13">=
</a>{</span>
<span id=3D"cb95-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-14">=
</a>    <span class=3D"dt">int</span> i;</span>
<span id=3D"cb95-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-15">=
</a>    <span class=3D"kw">struct</span> hostent *he;</span>
<span id=3D"cb95-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-16">=
</a>    <span class=3D"kw">struct</span> in_addr **addr_list;</span>
<span id=3D"cb95-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-17">=
</a></span>
<span id=3D"cb95-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-18">=
</a>    <span class=3D"cf">if</span> (argc !=3D <span class=3D"dv">2</span>=
) {</span>
<span id=3D"cb95-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-19">=
</a>        fprintf(stderr,<span class=3D"st">"usage: ghbn hostname</span><=
span class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb95-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-20">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">1</span>;</=
span>
<span id=3D"cb95-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-21">=
</a>    }</span>
<span id=3D"cb95-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-22">=
</a></span>
<span id=3D"cb95-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-23">=
</a>    <span class=3D"cf">if</span> ((he =3D gethostbyname(argv[<span clas=
s=3D"dv">1</span>])) =3D=3D NULL) {  <span class=3D"co">// get the host inf=
o</span></span>
<span id=3D"cb95-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-24">=
</a>        herror(<span class=3D"st">"gethostbyname"</span>);</span>
<span id=3D"cb95-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-25">=
</a>        <span class=3D"cf">return</span> <span class=3D"dv">2</span>;</=
span>
<span id=3D"cb95-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-26">=
</a>    }</span>
<span id=3D"cb95-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-27">=
</a></span>
<span id=3D"cb95-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-28">=
</a>    <span class=3D"co">// print information about this host:</span></sp=
an>
<span id=3D"cb95-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-29">=
</a>    printf(<span class=3D"st">"Official name is: %s</span><span class=
=3D"sc">\n</span><span class=3D"st">"</span>, he-&gt;h_name);</span>
<span id=3D"cb95-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-30">=
</a>    printf(<span class=3D"st">"    IP addresses: "</span>);</span>
<span id=3D"cb95-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-31">=
</a>    addr_list =3D (<span class=3D"kw">struct</span> in_addr **)he-&gt;h=
_addr_list;</span>
<span id=3D"cb95-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-32">=
</a>    <span class=3D"cf">for</span>(i =3D <span class=3D"dv">0</span>; ad=
dr_list[i] !=3D NULL; i++) {</span>
<span id=3D"cb95-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-33">=
</a>        printf(<span class=3D"st">"%s "</span>, inet_ntoa(*addr_list[i]=
));</span>
<span id=3D"cb95-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-34">=
</a>    }</span>
<span id=3D"cb95-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-35">=
</a>    printf(<span class=3D"st">"</span><span class=3D"sc">\n</span><span=
 class=3D"st">"</span>);</span>
<span id=3D"cb95-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-36">=
</a></span>
<span id=3D"cb95-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-37">=
</a>    <span class=3D"cf">return</span> <span class=3D"dv">0</span>;</span=
>
<span id=3D"cb95-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb95-38">=
</a>}</span></code></pre></div>
<div class=3D"sourceCode" id=3D"cb96"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb96-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb96-1"></a><span class=3D"co">// THIS H=
AS BEEN SUPERCEDED</span></span>
<span id=3D"cb96-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-2"></=
a><span class=3D"co">// use getnameinfo() instead!</span></span>
<span id=3D"cb96-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-3"></=
a></span>
<span id=3D"cb96-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-4"></=
a><span class=3D"kw">struct</span> hostent *he;</span>
<span id=3D"cb96-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-5"></=
a><span class=3D"kw">struct</span> in_addr ipv4addr;</span>
<span id=3D"cb96-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-6"></=
a><span class=3D"kw">struct</span> in6_addr ipv6addr;</span>
<span id=3D"cb96-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-7"></=
a></span>
<span id=3D"cb96-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-8"></=
a>inet_pton(AF_INET, <span class=3D"st">"192.0.2.34"</span>, &amp;ipv4addr)=
;</span>
<span id=3D"cb96-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-9"></=
a>he =3D gethostbyaddr(&amp;ipv4addr, <span class=3D"kw">sizeof</span> ipv4=
addr, AF_INET);</span>
<span id=3D"cb96-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-10">=
</a>printf(<span class=3D"st">"Host name: %s</span><span class=3D"sc">\n</s=
pan><span class=3D"st">"</span>, he-&gt;h_name);</span>
<span id=3D"cb96-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-11">=
</a></span>
<span id=3D"cb96-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-12">=
</a>inet_pton(AF_INET6, <span class=3D"st">"2001:db8:63b3:1::beef"</span>, =
&amp;ipv6addr);</span>
<span id=3D"cb96-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-13">=
</a>he =3D gethostbyaddr(&amp;ipv6addr, <span class=3D"kw">sizeof</span> ip=
v6addr, AF_INET6);</span>
<span id=3D"cb96-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb96-14">=
</a>printf(<span class=3D"st">"Host name: %s</span><span class=3D"sc">\n</s=
pan><span class=3D"st">"</span>, he-&gt;h_name);</span></code></pre></div>
<h4 data-number=3D"9.7.0.5" id=3D"see-also-6"><span class=3D"header-section=
-number">9.7.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#getaddrinfoman"><code>getad=
drinfo()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#getnamein=
foman"><code>getnameinfo()</code></a>, <a href=3D"https://beej.us/guide/bgn=
et/html/#gethostnameman"><code>gethostname()</code></a>, <a href=3D"https:/=
/beej.us/guide/bgnet/html/#errnoman"><code>errno</code></a>, <a href=3D"htt=
ps://beej.us/guide/bgnet/html/#perrorman"><code>perror()</code></a>, <a hre=
f=3D"https://beej.us/guide/bgnet/html/#perrorman"><code>strerror()</code></=
a>, <a href=3D"https://beej.us/guide/bgnet/html/#sockaddr_inman"><code>stru=
ct in_addr</code></a></p>
<h2 data-number=3D"9.8" id=3D"getnameinfoman"><span class=3D"header-section=
-number">9.8</span> <code>getnameinfo()</code></h2>
<p>Look up the host name and service name information for a given <code>str=
uct sockaddr</code>.</p>
<h4 data-number=3D"9.8.0.1" id=3D"synopsis-7"><span class=3D"header-section=
-number">9.8.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb97"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb97-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb97-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt;</span></spa=
n>
<span id=3D"cb97-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb97-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </sp=
an><span class=3D"im">&lt;netdb.h&gt;</span></span>
<span id=3D"cb97-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb97-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb97-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb97-4" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> ge=
tnameinfo(<span class=3D"dt">const</span> <span class=3D"kw">struct</span> =
sockaddr *sa, socklen_t salen,</span>
<span id=3D"cb97-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb97-5" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>                    <span class=3D"d=
t">char</span> *host, <span class=3D"dt">size_t</span> hostlen,</span>
<span id=3D"cb97-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb97-6" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>                    <span class=3D"d=
t">char</span> *serv, <span class=3D"dt">size_t</span> servlen, <span class=
=3D"dt">int</span> flags);</span></code></pre></div>
<h4 data-number=3D"9.8.0.2" id=3D"description-7"><span class=3D"header-sect=
ion-number">9.8.0.2</span> Description</h4>
<p>This function is the opposite of <code>getaddrinfo()</code>, that is, th=
is function takes an already loaded <code>struct sockaddr</code> and does a=
 name and service name lookup on it. It replaces the old <code>gethostbyadd=
r()</code> and <code>getservbyport()</code> functions.</p>
<p>You have to pass in a pointer to a <code>struct sockaddr</code> (which i=
n actuality is probably a <code>struct sockaddr_in</code> or <code>struct s=
ockaddr_in6</code> that you=E2=80=99ve cast) in the <code>sa</code> paramet=
er, and the length of that <code>struct</code> in the <code>salen</code>.</=
p>
<p>The resultant host name and service name will be written to the area poi=
nted to by the <code>host</code> and <code>serv</code> parameters. Of cours=
e, you have to specify the max lengths of these buffers in <code>hostlen</c=
ode> and <code>servlen</code>.</p>
<p>Finally, there are several flags you can pass, but here a a couple good =
ones. <code>NI_NOFQDN</code> will cause the <code>host</code> to only conta=
in the host name, not the whole domain name. <code>NI_NAMEREQD</code> will =
cause the function to fail if the name cannot be found with a DNS lookup (i=
f you don=E2=80=99t specify this flag and the name can=E2=80=99t be found, =
<code>getnameinfo()</code> will put a string version of the IP address in <=
code>host</code> instead).</p>
<p>As always, check your local man pages for the full scoop.</p>
<h4 data-number=3D"9.8.0.3" id=3D"return-value-7"><span class=3D"header-sec=
tion-number">9.8.0.3</span> Return Value</h4>
<p>Returns zero on success, or non-zero on error. If the return value is no=
n-zero, it can be passed to <code>gai_strerror()</code> to get a human-read=
able string. See <code>getaddrinfo</code> for more information.</p>
<h4 data-number=3D"9.8.0.4" id=3D"example-7"><span class=3D"header-section-=
number">9.8.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb98"><pre class=3D"sourceCode numberSource=
 c numberLines"><code class=3D"sourceCode c"><span id=3D"cb98-1"><a href=3D=
"https://beej.us/guide/bgnet/html/#cb98-1"></a><span class=3D"kw">struct</s=
pan> sockaddr_in6 sa; <span class=3D"co">// could be IPv4 if you want</span=
></span>
<span id=3D"cb98-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb98-2"></=
a><span class=3D"dt">char</span> host[<span class=3D"dv">1024</span>];</spa=
n>
<span id=3D"cb98-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb98-3"></=
a><span class=3D"dt">char</span> service[<span class=3D"dv">20</span>];</sp=
an>
<span id=3D"cb98-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb98-4"></=
a></span>
<span id=3D"cb98-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb98-5"></=
a><span class=3D"co">// pretend sa is full of good information about the ho=
st and port...</span></span>
<span id=3D"cb98-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb98-6"></=
a></span>
<span id=3D"cb98-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb98-7"></=
a>getnameinfo(&amp;sa, <span class=3D"kw">sizeof</span> sa, host, <span cla=
ss=3D"kw">sizeof</span> host, service, <span class=3D"kw">sizeof</span> ser=
vice, <span class=3D"dv">0</span>);</span>
<span id=3D"cb98-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb98-8"></=
a></span>
<span id=3D"cb98-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb98-9"></=
a>printf(<span class=3D"st">"   host: %s</span><span class=3D"sc">\n</span>=
<span class=3D"st">"</span>, host);    <span class=3D"co">// e.g. "www.exam=
ple.com"</span></span>
<span id=3D"cb98-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb98-10">=
</a>printf(<span class=3D"st">"service: %s</span><span class=3D"sc">\n</spa=
n><span class=3D"st">"</span>, service); <span class=3D"co">// e.g. "http"<=
/span></span></code></pre></div>
<h4 data-number=3D"9.8.0.5" id=3D"see-also-7"><span class=3D"header-section=
-number">9.8.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#getaddrinfoman"><code>getad=
drinfo()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#gethostby=
nameman"><code>gethostbyaddr()</code></a></p>
<h2 data-number=3D"9.9" id=3D"getpeernameman"><span class=3D"header-section=
-number">9.9</span> <code>getpeername()</code></h2>
<p>Return address info about the remote side of the connection</p>
<h4 data-number=3D"9.9.0.1" id=3D"synopsis-8"><span class=3D"header-section=
-number">9.9.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb99"><pre class=3D"sourceCode c"><code cla=
ss=3D"sourceCode c"><span id=3D"cb99-1"><a href=3D"https://beej.us/guide/bg=
net/html/#cb99-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=
=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt;</span></spa=
n>
<span id=3D"cb99-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb99-2" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb99-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb99-3" ar=
ia-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> ge=
tpeername(<span class=3D"dt">int</span> s, <span class=3D"kw">struct</span>=
 sockaddr *addr, socklen_t *len);</span></code></pre></div>
<h4 data-number=3D"9.9.0.2" id=3D"description-8"><span class=3D"header-sect=
ion-number">9.9.0.2</span> Description</h4>
<p> Once you have either <code>accept()</code>ed a remote connection, or <c=
ode>connect()</code>ed to a server, you now have what is known as a <em>pee=
r</em>. Your peer is simply the computer you=E2=80=99re connected to, ident=
ified by an  IP address and a  port. So=E2=80=A6</p>
<p><code>getpeername()</code> simply returns a <code>struct sockaddr_in</co=
de> filled with information about the machine you=E2=80=99re connected to.<=
/p>
<p>Why is it called a =E2=80=9Cname=E2=80=9D? Well, there are a lot of diff=
erent kinds of sockets, not just Internet Sockets like we=E2=80=99re using =
in this guide, and so =E2=80=9Cname=E2=80=9D was a nice generic term that c=
overed all cases. In our case, though, the peer=E2=80=99s =E2=80=9Cname=E2=
=80=9D is it=E2=80=99s IP address and port.</p>
<p>Although the function returns the size of the resultant address in <code=
>len</code>, you must preload <code>len</code> with the size of <code>addr<=
/code>.</p>
<h4 data-number=3D"9.9.0.3" id=3D"return-value-8"><span class=3D"header-sec=
tion-number">9.9.0.3</span> Return Value</h4>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly).</p>
<h4 data-number=3D"9.9.0.4" id=3D"example-8"><span class=3D"header-section-=
number">9.9.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb100"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb100-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb100-1"></a><span class=3D"co">// as=
sume s is a connected socket</span></span>
<span id=3D"cb100-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-2">=
</a></span>
<span id=3D"cb100-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-3">=
</a>socklen_t len;</span>
<span id=3D"cb100-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-4">=
</a><span class=3D"kw">struct</span> sockaddr_storage addr;</span>
<span id=3D"cb100-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-5">=
</a><span class=3D"dt">char</span> ipstr[INET6_ADDRSTRLEN];</span>
<span id=3D"cb100-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-6">=
</a><span class=3D"dt">int</span> port;</span>
<span id=3D"cb100-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-7">=
</a></span>
<span id=3D"cb100-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-8">=
</a>len =3D <span class=3D"kw">sizeof</span> addr;</span>
<span id=3D"cb100-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-9">=
</a>getpeername(s, (<span class=3D"kw">struct</span> sockaddr*)&amp;addr, &=
amp;len);</span>
<span id=3D"cb100-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-10=
"></a></span>
<span id=3D"cb100-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-11=
"></a><span class=3D"co">// deal with both IPv4 and IPv6:</span></span>
<span id=3D"cb100-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-12=
"></a><span class=3D"cf">if</span> (addr.ss_family =3D=3D AF_INET) {</span>
<span id=3D"cb100-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-13=
"></a>    <span class=3D"kw">struct</span> sockaddr_in *s =3D (<span class=
=3D"kw">struct</span> sockaddr_in *)&amp;addr;</span>
<span id=3D"cb100-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-14=
"></a>    port =3D ntohs(s-&gt;sin_port);</span>
<span id=3D"cb100-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-15=
"></a>    inet_ntop(AF_INET, &amp;s-&gt;sin_addr, ipstr, <span class=3D"kw"=
>sizeof</span> ipstr);</span>
<span id=3D"cb100-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-16=
"></a>} <span class=3D"cf">else</span> { <span class=3D"co">// AF_INET6</sp=
an></span>
<span id=3D"cb100-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-17=
"></a>    <span class=3D"kw">struct</span> sockaddr_in6 *s =3D (<span class=
=3D"kw">struct</span> sockaddr_in6 *)&amp;addr;</span>
<span id=3D"cb100-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-18=
"></a>    port =3D ntohs(s-&gt;sin6_port);</span>
<span id=3D"cb100-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-19=
"></a>    inet_ntop(AF_INET6, &amp;s-&gt;sin6_addr, ipstr, <span class=3D"k=
w">sizeof</span> ipstr);</span>
<span id=3D"cb100-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-20=
"></a>}</span>
<span id=3D"cb100-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-21=
"></a></span>
<span id=3D"cb100-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-22=
"></a>printf(<span class=3D"st">"Peer IP address: %s</span><span class=3D"s=
c">\n</span><span class=3D"st">"</span>, ipstr);</span>
<span id=3D"cb100-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb100-23=
"></a>printf(<span class=3D"st">"Peer port      : %d</span><span class=3D"s=
c">\n</span><span class=3D"st">"</span>, port);</span></code></pre></div>
<h4 data-number=3D"9.9.0.5" id=3D"see-also-8"><span class=3D"header-section=
-number">9.9.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#gethostnameman"><code>getho=
stname()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#gethostby=
nameman"><code>gethostbyname()</code></a>, <a href=3D"https://beej.us/guide=
/bgnet/html/#gethostbynameman"><code>gethostbyaddr()</code></a></p>
<h2 data-number=3D"9.10" id=3D"errnoman"><span class=3D"header-section-numb=
er">9.10</span> <code>errno</code></h2>
<p>Holds the error code for the last system call</p>
<h4 data-number=3D"9.10.0.1" id=3D"synopsis-9"><span class=3D"header-sectio=
n-number">9.10.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb101"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb101-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb101-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;errno.h&gt;</span></span>
<span id=3D"cb101-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb101-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb101-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb101-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
errno;</span></code></pre></div>
<h4 data-number=3D"9.10.0.2" id=3D"description-9"><span class=3D"header-sec=
tion-number">9.10.0.2</span> Description</h4>
<p> This is the variable that holds error information for a lot of system c=
alls. If you=E2=80=99ll recall, things like <code>socket()</code> and <code=
>listen()</code> return <code>-1</code> on error, and they set the exact va=
lue of <code>errno</code> to let you know specifically which error occurred=
.</p>
<p>The header file <code>errno.h</code> lists a bunch of constant symbolic =
names for errors, such as <code>EADDRINUSE</code>, <code>EPIPE</code>, <cod=
e>ECONNREFUSED</code>, etc. Your local man pages will tell you what codes c=
an be returned as an error, and you can use these at run time to handle dif=
ferent errors in different ways.</p>
<p>Or, more commonly, you can call  <code>perror()</code> or  <code>strerro=
r()</code> to get a human-readable version of the error.</p>
<p>One thing to note, for you multithreading enthusiasts, is that on most s=
ystems <code>errno</code> is defined in a threadsafe manner. (That is, it=
=E2=80=99s not actually a global variable, but it behaves just like a globa=
l variable would in a single-threaded environment.)</p>
<h4 data-number=3D"9.10.0.3" id=3D"return-value-9"><span class=3D"header-se=
ction-number">9.10.0.3</span> Return Value</h4>
<p>The value of the variable is the latest error to have transpired, which =
might be the code for =E2=80=9Csuccess=E2=80=9D if the last action succeede=
d.</p>
<h4 data-number=3D"9.10.0.4" id=3D"example-9"><span class=3D"header-section=
-number">9.10.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb102"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb102-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb102-1"></a>s =3D socket(PF_INET, SO=
CK_STREAM, <span class=3D"dv">0</span>);</span>
<span id=3D"cb102-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-2">=
</a><span class=3D"cf">if</span> (s =3D=3D -<span class=3D"dv">1</span>) {<=
/span>
<span id=3D"cb102-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-3">=
</a>    perror(<span class=3D"st">"socket"</span>); <span class=3D"co">// o=
r use strerror()</span></span>
<span id=3D"cb102-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-4">=
</a>}</span>
<span id=3D"cb102-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-5">=
</a></span>
<span id=3D"cb102-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-6">=
</a>tryagain:</span>
<span id=3D"cb102-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-7">=
</a><span class=3D"cf">if</span> (select(n, &amp;readfds, NULL, NULL) =3D=
=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb102-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-8">=
</a>    <span class=3D"co">// an error has occurred!!</span></span>
<span id=3D"cb102-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-9">=
</a></span>
<span id=3D"cb102-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-10=
"></a>    <span class=3D"co">// if we were only interrupted, just restart t=
he select() call:</span></span>
<span id=3D"cb102-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-11=
"></a>    <span class=3D"cf">if</span> (errno =3D=3D EINTR) <span class=3D"=
cf">goto</span> tryagain;  <span class=3D"co">// AAAA! goto!!!</span></span=
>
<span id=3D"cb102-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-12=
"></a></span>
<span id=3D"cb102-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-13=
"></a>    <span class=3D"co">// otherwise it's a more serious error:</span>=
</span>
<span id=3D"cb102-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-14=
"></a>    perror(<span class=3D"st">"select"</span>);</span>
<span id=3D"cb102-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-15=
"></a>    exit(<span class=3D"dv">1</span>);</span>
<span id=3D"cb102-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb102-16=
"></a>}</span></code></pre></div>
<h4 data-number=3D"9.10.0.5" id=3D"see-also-9"><span class=3D"header-sectio=
n-number">9.10.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#perrorman"><code>perror()</=
code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#perrorman"><code>st=
rerror()</code></a></p>
<h2 data-number=3D"9.11" id=3D"fcntlman"><span class=3D"header-section-numb=
er">9.11</span> <code>fcntl()</code></h2>
<p>Control socket descriptors</p>
<h4 data-number=3D"9.11.0.1" id=3D"synopsis-10"><span class=3D"header-secti=
on-number">9.11.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb103"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb103-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb103-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/unistd.h&gt;</span></s=
pan>
<span id=3D"cb103-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb103-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </=
span><span class=3D"im">&lt;sys/fcntl.h&gt;</span></span>
<span id=3D"cb103-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb103-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb103-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb103-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
fcntl(<span class=3D"dt">int</span> s, <span class=3D"dt">int</span> cmd, <=
span class=3D"dt">long</span> arg);</span></code></pre></div>
<h4 data-number=3D"9.11.0.2" id=3D"description-10"><span class=3D"header-se=
ction-number">9.11.0.2</span> Description</h4>
<p> This function is typically used to do file locking and other file-orien=
ted stuff, but it also has a couple socket-related functions that you might=
 see or use from time to time.</p>
<p>Parameter <code>s</code> is the socket descriptor you wish to operate on=
, <code>cmd</code> should be set to  <code>F_SETFL</code>, and <code>arg</c=
ode> can be one of the following commands. (Like I said, there=E2=80=99s mo=
re to <code>fcntl()</code> than I=E2=80=99m letting on here, but I=E2=80=99=
m trying to stay socket-oriented.)</p>
<p>  </p>
<table>
<colgroup>
<col style=3D"width: 18%">
<col style=3D"width: 81%">
</colgroup>
<thead>
<tr class=3D"header">
<th><code>cmd</code></th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>O_NONBLOCK</code></td>
<td>Set the socket to be non-blocking. See the section on <a href=3D"https:=
//beej.us/guide/bgnet/html/#blocking">blocking</a> for more details.</td>
</tr>
<tr class=3D"even">
<td><code>O_ASYNC</code></td>
<td>Set the socket to do asynchronous I/O. When data is ready to be <code>r=
ecv()</code>=E2=80=99d on the socket, the signal <code>SIGIO</code> will be=
 raised. This is rare to see, and beyond the scope of the guide. And I thin=
k it=E2=80=99s only available on certain systems.</td>
</tr>
</tbody>
</table>
<h4 data-number=3D"9.11.0.3" id=3D"return-value-10"><span class=3D"header-s=
ection-number">9.11.0.3</span> Return Value</h4>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly).</p>
<p>Different uses of the <code>fcntl()</code> system call actually have dif=
ferent return values, but I haven=E2=80=99t covered them here because they=
=E2=80=99re not socket-related. See your local <code>fcntl()</code> man pag=
e for more information.</p>
<h4 data-number=3D"9.11.0.4" id=3D"example-10"><span class=3D"header-sectio=
n-number">9.11.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb104"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb104-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb104-1"></a><span class=3D"dt">int</=
span> s =3D socket(PF_INET, SOCK_STREAM, <span class=3D"dv">0</span>);</spa=
n>
<span id=3D"cb104-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb104-2">=
</a></span>
<span id=3D"cb104-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb104-3">=
</a>fcntl(s, F_SETFL, O_NONBLOCK);  <span class=3D"co">// set to non-blocki=
ng</span></span>
<span id=3D"cb104-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb104-4">=
</a>fcntl(s, F_SETFL, O_ASYNC);     <span class=3D"co">// set to asynchrono=
us I/O</span></span></code></pre></div>
<h4 data-number=3D"9.11.0.5" id=3D"see-also-10"><span class=3D"header-secti=
on-number">9.11.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#blocking">Blocking</a>, <a =
href=3D"https://beej.us/guide/bgnet/html/#sendman"><code>send()</code></a><=
/p>
<h2 data-number=3D"9.12" id=3D"htonsman"><span class=3D"header-section-numb=
er">9.12</span> <code>htons()</code>, <code>htonl()</code>, <code>ntohs()</=
code>, <code>ntohl()</code></h2>
<p>Convert multi-byte integer types from host byte order to network byte or=
der</p>
<h4 data-number=3D"9.12.0.1" id=3D"synopsis-11"><span class=3D"header-secti=
on-number">9.12.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb105"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb105-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb105-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&gt;</span></s=
pan>
<span id=3D"cb105-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb105-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb105-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb105-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">uint32_t</s=
pan> htonl(<span class=3D"dt">uint32_t</span> hostlong);</span>
<span id=3D"cb105-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb105-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">uint16_t</s=
pan> htons(<span class=3D"dt">uint16_t</span> hostshort);</span>
<span id=3D"cb105-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb105-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">uint32_t</s=
pan> ntohl(<span class=3D"dt">uint32_t</span> netlong);</span>
<span id=3D"cb105-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb105-6" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">uint16_t</s=
pan> ntohs(<span class=3D"dt">uint16_t</span> netshort);</span></code></pre=
></div>
<h4 data-number=3D"9.12.0.2" id=3D"description-11"><span class=3D"header-se=
ction-number">9.12.0.2</span> Description</h4>
<p>    Just to make you really unhappy, different computers use different b=
yte orderings internally for their multibyte integers (i.e.&nbsp;any intege=
r that=E2=80=99s larger than a <code>char</code>). The upshot of this is th=
at if you <code>send()</code> a two-byte <code>short int</code> from an Int=
el box to a Mac (before they became Intel boxes, too, I mean), what one com=
puter thinks is the number <code>1</code>, the other will think is the numb=
er <code>256</code>, and vice-versa.</p>
<p> The way to get around this problem is for everyone to put aside their d=
ifferences and agree that Motorola and IBM had it right, and Intel did it t=
he weird way, and so we all convert our byte orderings to =E2=80=9Cbig-endi=
an=E2=80=9D before sending them out. Since Intel is a =E2=80=9Clittle-endia=
n=E2=80=9D machine, it=E2=80=99s far more politically correct to call our p=
referred byte ordering =E2=80=9CNetwork Byte Order=E2=80=9D. So these funct=
ions convert from your native byte order to network byte order and back aga=
in.</p>
<p>(This means on Intel these functions swap all the bytes around, and on P=
owerPC they do nothing because the bytes are already in Network Byte Order.=
 But you should always use them in your code anyway, since someone might wa=
nt to build it on an Intel machine and still have things work properly.)</p=
>
<p>Note that the types involved are 32-bit (4 byte, probably <code>int</cod=
e>) and 16-bit (2 byte, very likely <code>short</code>) numbers. 64-bit mac=
hines might have a <code>htonll()</code> for 64-bit <code>int</code>s, but =
I=E2=80=99ve not seen it. You=E2=80=99ll just have to write your own.</p>
<p>Anyway, the way these functions work is that you first decide if you=E2=
=80=99re converting <em>from</em> host (your machine=E2=80=99s) byte order =
or from network byte order. If =E2=80=9Chost=E2=80=9D, the the first letter=
 of the function you=E2=80=99re going to call is =E2=80=9Ch=E2=80=9D. Other=
wise it=E2=80=99s =E2=80=9Cn=E2=80=9D for =E2=80=9Cnetwork=E2=80=9D. The mi=
ddle of the function name is always =E2=80=9Cto=E2=80=9D because you=E2=80=
=99re converting from one =E2=80=9Cto=E2=80=9D another, and the penultimate=
 letter shows what you=E2=80=99re converting <em>to</em>. The last letter i=
s the size of the data, =E2=80=9Cs=E2=80=9D for short, or =E2=80=9Cl=E2=80=
=9D for long. Thus:</p>
<table>
<thead>
<tr class=3D"header">
<th>Function</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>htons()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>s</code>ho=
rt</td>
</tr>
<tr class=3D"even">
<td><code>htonl()</code></td>
<td><code>h</code>ost <code>to</code> <code>n</code>etwork <code>l</code>on=
g</td>
</tr>
<tr class=3D"odd">
<td><code>ntohs()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>s</code>ho=
rt</td>
</tr>
<tr class=3D"even">
<td><code>ntohl()</code></td>
<td><code>n</code>etwork <code>to</code> <code>h</code>ost <code>l</code>on=
g</td>
</tr>
</tbody>
</table>
<h4 data-number=3D"9.12.0.3" id=3D"return-value-11"><span class=3D"header-s=
ection-number">9.12.0.3</span> Return Value</h4>
<p>Each function returns the converted value.</p>
<h4 data-number=3D"9.12.0.4" id=3D"example-11"><span class=3D"header-sectio=
n-number">9.12.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb106"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb106-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb106-1"></a><span class=3D"dt">uint3=
2_t</span> some_long =3D <span class=3D"dv">10</span>;</span>
<span id=3D"cb106-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb106-2">=
</a><span class=3D"dt">uint16_t</span> some_short =3D <span class=3D"dv">20=
</span>;</span>
<span id=3D"cb106-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb106-3">=
</a></span>
<span id=3D"cb106-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb106-4">=
</a><span class=3D"dt">uint32_t</span> network_byte_order;</span>
<span id=3D"cb106-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb106-5">=
</a></span>
<span id=3D"cb106-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb106-6">=
</a><span class=3D"co">// convert and send</span></span>
<span id=3D"cb106-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb106-7">=
</a>network_byte_order =3D htonl(some_long);</span>
<span id=3D"cb106-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb106-8">=
</a>send(s, &amp;network_byte_order, <span class=3D"kw">sizeof</span>(<span=
 class=3D"dt">uint32_t</span>), <span class=3D"dv">0</span>);</span>
<span id=3D"cb106-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb106-9">=
</a></span>
<span id=3D"cb106-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb106-10=
"></a>some_short =3D=3D ntohs(htons(some_short)); <span class=3D"co">// thi=
s expression is true</span></span></code></pre></div>
<h2 data-number=3D"9.13" id=3D"inet_ntoaman"><span class=3D"header-section-=
number">9.13</span> <code>inet_ntoa()</code>, <code>inet_aton()</code>, <co=
de>inet_addr</code></h2>
<p>Convert IP addresses from a dots-and-number string to a <code>struct in_=
addr</code> and back</p>
<h4 data-number=3D"9.13.0.1" id=3D"synopsis-12"><span class=3D"header-secti=
on-number">9.13.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb107"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb107-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb107-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt;</span></s=
pan>
<span id=3D"cb107-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb107-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </=
span><span class=3D"im">&lt;netinet/in.h&gt;</span></span>
<span id=3D"cb107-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb107-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </=
span><span class=3D"im">&lt;arpa/inet.h&gt;</span></span>
<span id=3D"cb107-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb107-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb107-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb107-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"co">// ALL THES=
E ARE </span><span class=3D"al">DEPRECATED</span><span class=3D"co">! Use i=
net_pton()  or inet_ntop() instead!!</span></span>
<span id=3D"cb107-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb107-6" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb107-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb107-7" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">char</span>=
 *inet_ntoa(<span class=3D"kw">struct</span> in_addr in);</span>
<span id=3D"cb107-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb107-8" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
inet_aton(<span class=3D"dt">const</span> <span class=3D"dt">char</span> *c=
p, <span class=3D"kw">struct</span> in_addr *inp);</span>
<span id=3D"cb107-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb107-9" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    in_addr_t inet_addr(<span clas=
s=3D"dt">const</span> <span class=3D"dt">char</span> *cp);</span></code></p=
re></div>
<h4 data-number=3D"9.13.0.2" id=3D"description-12"><span class=3D"header-se=
ction-number">9.13.0.2</span> Description</h4>
<p><em>These functions are deprecated because they don=E2=80=99t handle IPv=
6! Use <code>inet_ntop()</code> or <code>inet_pton()</code> instead! They a=
re included here because they can still be found in the wild.</em></p>
<p>   All of these functions convert from a <code>struct in_addr</code> (pa=
rt of your <code>struct sockaddr_in</code>, most likely) to a string in dot=
s-and-numbers format (e.g. =E2=80=9C192.168.5.10=E2=80=9D) and vice-versa. =
If you have an IP address passed on the command line or something, this is =
the easiest way to get a <code>struct in_addr</code> to <code>connect()</co=
de> to, or whatever. If you need more power, try some of the DNS functions =
like <code>gethostbyname()</code> or attempt a <em>coup d=E2=80=99=C3=89tat=
</em> in your local country.</p>
<p>The function <code>inet_ntoa()</code> converts a network address in a <c=
ode>struct in_addr</code> to a dots-and-numbers format string. The =E2=80=
=9Cn=E2=80=9D in =E2=80=9Cntoa=E2=80=9D stands for network, and the =E2=80=
=9Ca=E2=80=9D stands for ASCII for historical reasons (so it=E2=80=99s =E2=
=80=9CNetwork To ASCII=E2=80=9D=E2=80=94the =E2=80=9Ctoa=E2=80=9D suffix ha=
s an analogous friend in the C library called <code>atoi()</code> which con=
verts an ASCII string to an integer).</p>
<p>The function <code>inet_aton()</code> is the opposite, converting from a=
 dots-and-numbers string into a <code>in_addr_t</code> (which is the type o=
f the field <code>s_addr</code> in your <code>struct in_addr</code>).</p>
<p>Finally, the function <code>inet_addr()</code> is an older function that=
 does basically the same thing as <code>inet_aton()</code>. It=E2=80=99s th=
eoretically deprecated, but you=E2=80=99ll see it a lot and the police won=
=E2=80=99t come get you if you use it.</p>
<h4 data-number=3D"9.13.0.3" id=3D"return-value-12"><span class=3D"header-s=
ection-number">9.13.0.3</span> Return Value</h4>
<p><code>inet_aton()</code> returns non-zero if the address is a valid one,=
 and it returns zero if the address is invalid.</p>
<p><code>inet_ntoa()</code> returns the dots-and-numbers string in a static=
 buffer that is overwritten with each call to the function.</p>
<p><code>inet_addr()</code> returns the address as an <code>in_addr_t</code=
>, or <code>-1</code> if there=E2=80=99s an error. (That is the same result=
 as if you tried to convert the string  =E2=80=9C<code>255.255.255.255</cod=
e>=E2=80=9D, which is a valid IP address. This is why <code>inet_aton()</co=
de> is better.)</p>
<h4 data-number=3D"9.13.0.4" id=3D"example-12"><span class=3D"header-sectio=
n-number">9.13.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb108"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb108-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb108-1"></a><span class=3D"kw">struc=
t</span> sockaddr_in antelope;</span>
<span id=3D"cb108-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb108-2">=
</a><span class=3D"dt">char</span> *some_addr;</span>
<span id=3D"cb108-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb108-3">=
</a></span>
<span id=3D"cb108-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb108-4">=
</a>inet_aton(<span class=3D"st">"10.0.0.1"</span>, &amp;antelope.sin_addr)=
; <span class=3D"co">// store IP in antelope</span></span>
<span id=3D"cb108-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb108-5">=
</a></span>
<span id=3D"cb108-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb108-6">=
</a>some_addr =3D inet_ntoa(antelope.sin_addr); <span class=3D"co">// retur=
n the IP</span></span>
<span id=3D"cb108-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb108-7">=
</a>printf(<span class=3D"st">"%s</span><span class=3D"sc">\n</span><span c=
lass=3D"st">"</span>, some_addr); <span class=3D"co">// prints "10.0.0.1"</=
span></span>
<span id=3D"cb108-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb108-8">=
</a></span>
<span id=3D"cb108-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb108-9">=
</a><span class=3D"co">// and this call is the same as the inet_aton() call=
, above:</span></span>
<span id=3D"cb108-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb108-10=
"></a>antelope.sin_addr.s_addr =3D inet_addr(<span class=3D"st">"10.0.0.1"<=
/span>);</span></code></pre></div>
<h4 data-number=3D"9.13.0.5" id=3D"see-also-11"><span class=3D"header-secti=
on-number">9.13.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#inet_ntopman"><code>inet_nt=
op()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#inet_ntopman"=
><code>inet_pton()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/=
#gethostbynameman"><code>gethostbyname()</code></a>, <a href=3D"https://bee=
j.us/guide/bgnet/html/#gethostbynameman"><code>gethostbyaddr()</code></a></=
p>
<h2 data-number=3D"9.14" id=3D"inet_ntopman"><span class=3D"header-section-=
number">9.14</span> <code>inet_ntop()</code>, <code>inet_pton()</code></h2>
<p>Convert IP addresses to human-readable form and back.</p>
<h4 data-number=3D"9.14.0.1" id=3D"synopsis-13"><span class=3D"header-secti=
on-number">9.14.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb109"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb109-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb109-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;arpa/inet.h&gt;</span></sp=
an>
<span id=3D"cb109-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb109-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb109-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb109-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">const</span=
> <span class=3D"dt">char</span> *inet_ntop(<span class=3D"dt">int</span> a=
f, <span class=3D"dt">const</span> <span class=3D"dt">void</span> *src,</sp=
an>
<span id=3D"cb109-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb109-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>                          <span cl=
ass=3D"dt">char</span> *dst, socklen_t size);</span>
<span id=3D"cb109-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb109-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb109-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb109-6" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
inet_pton(<span class=3D"dt">int</span> af, <span class=3D"dt">const</span>=
 <span class=3D"dt">char</span> *src, <span class=3D"dt">void</span> *dst);=
</span></code></pre></div>
<h4 data-number=3D"9.14.0.2" id=3D"description-13"><span class=3D"header-se=
ction-number">9.14.0.2</span> Description</h4>
<p>These functions are for dealing with human-readable IP addresses and con=
verting them to their binary representation for use with various functions =
and system calls. The =E2=80=9Cn=E2=80=9D stands for =E2=80=9Cnetwork=E2=80=
=9D, and =E2=80=9Cp=E2=80=9D for =E2=80=9Cpresentation=E2=80=9D. Or =E2=80=
=9Ctext presentation=E2=80=9D. But you can think of it as =E2=80=9Cprintabl=
e=E2=80=9D. =E2=80=9Cntop=E2=80=9D is =E2=80=9Cnetwork to printable=E2=80=
=9D. See?</p>
<p>Sometimes you don=E2=80=99t want to look at a pile of binary numbers whe=
n looking at an IP address. You want it in a nice printable form, like <cod=
e>192.0.2.180</code>, or <code>2001:db8:8714:3a90::12</code>. In that case,=
 <code>inet_ntop()</code> is for you.</p>
<p><code>inet_ntop()</code> takes the address family in the <code>af</code>=
 parameter (either <code>AF_INET</code> or <code>AF_INET6</code>). The <cod=
e>src</code> parameter should be a pointer to either a <code>struct in_addr=
</code> or <code>struct in6_addr</code> containing the address you wish to =
convert to a string. Finally <code>dst</code> and <code>size</code> are the=
 pointer to the destination string and the maximum length of that string.</=
p>
<p>What should the maximum length of the <code>dst</code> string be? What i=
s the maximum length for IPv4 and IPv6 addresses? Fortunately there are a c=
ouple of macros to help you out. The maximum lengths are: <code>INET_ADDRST=
RLEN</code> and <code>INET6_ADDRSTRLEN</code>.</p>
<p>Other times, you might have a string containing an IP address in readabl=
e form, and you want to pack it into a <code>struct sockaddr_in</code> or a=
 <code>struct sockaddr_in6</code>. In that case, the opposite funcion <code=
>inet_pton()</code> is what you=E2=80=99re after.</p>
<p><code>inet_pton()</code> also takes an address family (either <code>AF_I=
NET</code> or <code>AF_INET6</code>) in the <code>af</code> parameter. The =
<code>src</code> parameter is a pointer to a string containing the IP addre=
ss in printable form. Lastly the <code>dst</code> parameter points to where=
 the result should be stored, which is probably a <code>struct in_addr</cod=
e> or <code>struct in6_addr</code>.</p>
<p>These functions don=E2=80=99t do DNS lookups=E2=80=94you=E2=80=99ll need=
 <code>getaddrinfo()</code> for that.</p>
<h4 data-number=3D"9.14.0.3" id=3D"return-value-13"><span class=3D"header-s=
ection-number">9.14.0.3</span> Return Value</h4>
<p><code>inet_ntop()</code> returns the <code>dst</code> parameter on succe=
ss, or <code>NULL</code> on failure (and <code>errno</code> is set).</p>
<p><code>inet_pton()</code> returns <code>1</code> on success. It returns <=
code>-1</code> if there was an error (<code>errno</code> is set), or <code>=
0</code> if the input isn=E2=80=99t a valid IP address.</p>
<h4 data-number=3D"9.14.0.4" id=3D"example-13"><span class=3D"header-sectio=
n-number">9.14.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb110"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb110-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb110-1"></a><span class=3D"co">// IP=
v4 demo of inet_ntop() and inet_pton()</span></span>
<span id=3D"cb110-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-2">=
</a></span>
<span id=3D"cb110-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-3">=
</a><span class=3D"kw">struct</span> sockaddr_in sa;</span>
<span id=3D"cb110-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-4">=
</a><span class=3D"dt">char</span> str[INET_ADDRSTRLEN];</span>
<span id=3D"cb110-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-5">=
</a></span>
<span id=3D"cb110-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-6">=
</a><span class=3D"co">// store this IP address in sa:</span></span>
<span id=3D"cb110-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-7">=
</a>inet_pton(AF_INET, <span class=3D"st">"192.0.2.33"</span>, &amp;(sa.sin=
_addr));</span>
<span id=3D"cb110-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-8">=
</a></span>
<span id=3D"cb110-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-9">=
</a><span class=3D"co">// now get it back and print it</span></span>
<span id=3D"cb110-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-10=
"></a>inet_ntop(AF_INET, &amp;(sa.sin_addr), str, INET_ADDRSTRLEN);</span>
<span id=3D"cb110-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-11=
"></a></span>
<span id=3D"cb110-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb110-12=
"></a>printf(<span class=3D"st">"%s</span><span class=3D"sc">\n</span><span=
 class=3D"st">"</span>, str); <span class=3D"co">// prints "192.0.2.33"</sp=
an></span></code></pre></div>
<div class=3D"sourceCode" id=3D"cb111"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb111-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb111-1"></a><span class=3D"co">// IP=
v6 demo of inet_ntop() and inet_pton()</span></span>
<span id=3D"cb111-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-2">=
</a><span class=3D"co">// (basically the same except with a bunch of 6s thr=
own around)</span></span>
<span id=3D"cb111-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-3">=
</a></span>
<span id=3D"cb111-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-4">=
</a><span class=3D"kw">struct</span> sockaddr_in6 sa;</span>
<span id=3D"cb111-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-5">=
</a><span class=3D"dt">char</span> str[INET6_ADDRSTRLEN];</span>
<span id=3D"cb111-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-6">=
</a></span>
<span id=3D"cb111-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-7">=
</a><span class=3D"co">// store this IP address in sa:</span></span>
<span id=3D"cb111-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-8">=
</a>inet_pton(AF_INET6, <span class=3D"st">"2001:db8:8714:3a90::12"</span>,=
 &amp;(sa.sin6_addr));</span>
<span id=3D"cb111-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-9">=
</a></span>
<span id=3D"cb111-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-10=
"></a><span class=3D"co">// now get it back and print it</span></span>
<span id=3D"cb111-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-11=
"></a>inet_ntop(AF_INET6, &amp;(sa.sin6_addr), str, INET6_ADDRSTRLEN);</spa=
n>
<span id=3D"cb111-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-12=
"></a></span>
<span id=3D"cb111-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb111-13=
"></a>printf(<span class=3D"st">"%s</span><span class=3D"sc">\n</span><span=
 class=3D"st">"</span>, str); <span class=3D"co">// prints "2001:db8:8714:3=
a90::12"</span></span></code></pre></div>
<div class=3D"sourceCode" id=3D"cb112"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb112-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb112-1"></a><span class=3D"co">// He=
lper function you can use:</span></span>
<span id=3D"cb112-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-2">=
</a></span>
<span id=3D"cb112-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-3">=
</a><span class=3D"co">//Convert a struct sockaddr address to a string, IPv=
4 and IPv6:</span></span>
<span id=3D"cb112-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-4">=
</a></span>
<span id=3D"cb112-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-5">=
</a><span class=3D"dt">char</span> *get_ip_str(<span class=3D"dt">const</sp=
an> <span class=3D"kw">struct</span> sockaddr *sa, <span class=3D"dt">char<=
/span> *s, <span class=3D"dt">size_t</span> maxlen)</span>
<span id=3D"cb112-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-6">=
</a>{</span>
<span id=3D"cb112-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-7">=
</a>    <span class=3D"cf">switch</span>(sa-&gt;sa_family) {</span>
<span id=3D"cb112-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-8">=
</a>        <span class=3D"cf">case</span> AF_INET:</span>
<span id=3D"cb112-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-9">=
</a>            inet_ntop(AF_INET, &amp;(((<span class=3D"kw">struct</span>=
 sockaddr_in *)sa)-&gt;sin_addr),</span>
<span id=3D"cb112-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-10=
"></a>                    s, maxlen);</span>
<span id=3D"cb112-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-11=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb112-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-12=
"></a></span>
<span id=3D"cb112-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-13=
"></a>        <span class=3D"cf">case</span> AF_INET6:</span>
<span id=3D"cb112-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-14=
"></a>            inet_ntop(AF_INET6, &amp;(((<span class=3D"kw">struct</sp=
an> sockaddr_in6 *)sa)-&gt;sin6_addr),</span>
<span id=3D"cb112-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-15=
"></a>                    s, maxlen);</span>
<span id=3D"cb112-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-16=
"></a>            <span class=3D"cf">break</span>;</span>
<span id=3D"cb112-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-17=
"></a></span>
<span id=3D"cb112-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-18=
"></a>        <span class=3D"cf">default</span>:</span>
<span id=3D"cb112-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-19=
"></a>            strncpy(s, <span class=3D"st">"Unknown AF"</span>, maxlen=
);</span>
<span id=3D"cb112-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-20=
"></a>            <span class=3D"cf">return</span> NULL;</span>
<span id=3D"cb112-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-21=
"></a>    }</span>
<span id=3D"cb112-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-22=
"></a></span>
<span id=3D"cb112-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-23=
"></a>    <span class=3D"cf">return</span> s;</span>
<span id=3D"cb112-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb112-24=
"></a>}</span></code></pre></div>
<h4 data-number=3D"9.14.0.5" id=3D"see-also-12"><span class=3D"header-secti=
on-number">9.14.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#getaddrinfoman"><code>getad=
drinfo()</code></a></p>
<h2 data-number=3D"9.15" id=3D"listenman"><span class=3D"header-section-num=
ber">9.15</span> <code>listen()</code></h2>
<p>Tell a socket to listen for incoming connections</p>
<h4 data-number=3D"9.15.0.1" id=3D"synopsis-14"><span class=3D"header-secti=
on-number">9.15.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb113"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb113-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb113-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt;</span></s=
pan>
<span id=3D"cb113-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb113-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb113-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb113-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
listen(<span class=3D"dt">int</span> s, <span class=3D"dt">int</span> backl=
og);</span></code></pre></div>
<h4 data-number=3D"9.15.0.2" id=3D"description-14"><span class=3D"header-se=
ction-number">9.15.0.2</span> Description</h4>
<p> You can take your socket descriptor (made with the <code>socket()</code=
> system call) and tell it to listen for incoming connections. This is what=
 differentiates the servers from the clients, guys.</p>
<p>The <code>backlog</code> parameter can mean a couple different things de=
pending on the system you on, but loosely it is how many pending connection=
s you can have before the kernel starts rejecting new ones. So as the new c=
onnections come in, you should be quick to <code>accept()</code> them so th=
at the backlog doesn=E2=80=99t fill. Try setting it to 10 or so, and if you=
r clients start getting =E2=80=9CConnection refused=E2=80=9D under heavy lo=
ad, set it higher.</p>
<p>Before calling <code>listen()</code>, your server should call <code>bind=
()</code> to attach itself to a specific port number. That port number (on =
the server=E2=80=99s IP address) will be the one that clients connect to.</=
p>
<h4 data-number=3D"9.15.0.3" id=3D"return-value-14"><span class=3D"header-s=
ection-number">9.15.0.3</span> Return Value</h4>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly).</p>
<h4 data-number=3D"9.15.0.4" id=3D"example-14"><span class=3D"header-sectio=
n-number">9.15.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb114"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb114-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb114-1"></a><span class=3D"kw">struc=
t</span> addrinfo hints, *res;</span>
<span id=3D"cb114-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-2">=
</a><span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb114-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-3">=
</a></span>
<span id=3D"cb114-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-4">=
</a><span class=3D"co">// first, load up address structs with getaddrinfo()=
:</span></span>
<span id=3D"cb114-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-5">=
</a></span>
<span id=3D"cb114-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-6">=
</a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">size=
of</span> hints);</span>
<span id=3D"cb114-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-7">=
</a>hints.ai_family =3D AF_UNSPEC;  <span class=3D"co">// use IPv4 or IPv6,=
 whichever</span></span>
<span id=3D"cb114-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-8">=
</a>hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb114-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-9">=
</a>hints.ai_flags =3D AI_PASSIVE;     <span class=3D"co">// fill in my IP =
for me</span></span>
<span id=3D"cb114-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-10=
"></a></span>
<span id=3D"cb114-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-11=
"></a>getaddrinfo(NULL, <span class=3D"st">"3490"</span>, &amp;hints, &amp;=
res);</span>
<span id=3D"cb114-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-12=
"></a></span>
<span id=3D"cb114-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-13=
"></a><span class=3D"co">// make a socket:</span></span>
<span id=3D"cb114-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-14=
"></a></span>
<span id=3D"cb114-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-15=
"></a>sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_=
protocol);</span>
<span id=3D"cb114-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-16=
"></a></span>
<span id=3D"cb114-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-17=
"></a><span class=3D"co">// bind it to the port we passed in to getaddrinfo=
():</span></span>
<span id=3D"cb114-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-18=
"></a></span>
<span id=3D"cb114-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-19=
"></a>bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span>
<span id=3D"cb114-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-20=
"></a></span>
<span id=3D"cb114-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-21=
"></a>listen(sockfd, <span class=3D"dv">10</span>); <span class=3D"co">// s=
et s up to be a server (listening) socket</span></span>
<span id=3D"cb114-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-22=
"></a></span>
<span id=3D"cb114-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb114-23=
"></a><span class=3D"co">// then have an accept() loop down here somewhere<=
/span></span></code></pre></div>
<h4 data-number=3D"9.15.0.5" id=3D"see-also-13"><span class=3D"header-secti=
on-number">9.15.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#acceptman"><code>accept()</=
code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#bindman"><code>bind=
()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#socketman"><cod=
e>socket()</code></a></p>
<h2 data-number=3D"9.16" id=3D"perrorman"><span class=3D"header-section-num=
ber">9.16</span> <code>perror()</code>, <code>strerror()</code></h2>
<p>Print an error as a human-readable string</p>
<h4 data-number=3D"9.16.0.1" id=3D"synopsis-15"><span class=3D"header-secti=
on-number">9.16.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb115"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb115-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb115-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;stdio.h&gt;</span></span>
<span id=3D"cb115-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb115-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </=
span><span class=3D"im">&lt;string.h&gt;</span><span class=3D"pp">   </span=
><span class=3D"co">// for strerror()</span></span>
<span id=3D"cb115-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb115-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb115-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb115-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">void</span>=
 perror(<span class=3D"dt">const</span> <span class=3D"dt">char</span> *s);=
</span>
<span id=3D"cb115-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb115-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">char</span>=
 *strerror(<span class=3D"dt">int</span> errnum);</span></code></pre></div>
<h4 data-number=3D"9.16.0.2" id=3D"description-15"><span class=3D"header-se=
ction-number">9.16.0.2</span> Description</h4>
<p>  Since so many functions return <code>-1</code> on error and set the va=
lue of the variable  <code>errno</code> to be some number, it would sure be=
 nice if you could easily print that in a form that made sense to you.</p>
<p>Mercifully, <code>perror()</code> does that. If you want more descriptio=
n to be printed before the error, you can point the parameter <code>s</code=
> to it (or you can leave <code>s</code> as <code>NULL</code> and nothing a=
dditional will be printed).</p>
<p>In a nutshell, this function takes <code>errno</code> values, like <code=
>ECONNRESET</code>, and prints them nicely, like =E2=80=9CConnection reset =
by peer.=E2=80=9D</p>
<p>The function <code>strerror()</code> is very similar to <code>perror()</=
code>, except it returns a pointer to the error message string for a given =
value (you usually pass in the variable <code>errno</code>).</p>
<h4 data-number=3D"9.16.0.3" id=3D"return-value-15"><span class=3D"header-s=
ection-number">9.16.0.3</span> Return Value</h4>
<p><code>strerror()</code> returns a pointer to the error message string.</=
p>
<h4 data-number=3D"9.16.0.4" id=3D"example-15"><span class=3D"header-sectio=
n-number">9.16.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb116"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb116-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb116-1"></a><span class=3D"dt">int</=
span> s;</span>
<span id=3D"cb116-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-2">=
</a></span>
<span id=3D"cb116-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-3">=
</a>s =3D socket(PF_INET, SOCK_STREAM, <span class=3D"dv">0</span>);</span>
<span id=3D"cb116-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-4">=
</a></span>
<span id=3D"cb116-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-5">=
</a><span class=3D"cf">if</span> (s =3D=3D -<span class=3D"dv">1</span>) { =
<span class=3D"co">// some error has occurred</span></span>
<span id=3D"cb116-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-6">=
</a>    <span class=3D"co">// prints "socket error: " + the error message:<=
/span></span>
<span id=3D"cb116-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-7">=
</a>    perror(<span class=3D"st">"socket error"</span>);</span>
<span id=3D"cb116-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-8">=
</a>}</span>
<span id=3D"cb116-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-9">=
</a></span>
<span id=3D"cb116-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-10=
"></a><span class=3D"co">// similarly:</span></span>
<span id=3D"cb116-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-11=
"></a><span class=3D"cf">if</span> (listen(s, <span class=3D"dv">10</span>)=
 =3D=3D -<span class=3D"dv">1</span>) {</span>
<span id=3D"cb116-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-12=
"></a>    <span class=3D"co">// this prints "an error: " + the error messag=
e from errno:</span></span>
<span id=3D"cb116-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-13=
"></a>    printf(<span class=3D"st">"an error: %s</span><span class=3D"sc">=
\n</span><span class=3D"st">"</span>, strerror(errno));</span>
<span id=3D"cb116-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb116-14=
"></a>}</span></code></pre></div>
<h4 data-number=3D"9.16.0.5" id=3D"see-also-14"><span class=3D"header-secti=
on-number">9.16.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#errnoman"><code>errno</code=
></a></p>
<h2 data-number=3D"9.17" id=3D"pollman"><span class=3D"header-section-numbe=
r">9.17</span> <code>poll()</code></h2>
<p>Test for events on multiple sockets simultaneously</p>
<h4 data-number=3D"9.17.0.1" id=3D"synopsis-16"><span class=3D"header-secti=
on-number">9.17.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb117"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb117-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb117-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/poll.h&gt;</span></spa=
n>
<span id=3D"cb117-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb117-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb117-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb117-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
poll(<span class=3D"kw">struct</span> pollfd *ufds, <span class=3D"dt">unsi=
gned</span> <span class=3D"dt">int</span> nfds, <span class=3D"dt">int</spa=
n> timeout);</span></code></pre></div>
<h4 data-number=3D"9.17.0.2" id=3D"description-16"><span class=3D"header-se=
ction-number">9.17.0.2</span> Description</h4>
<p> This function is very similar to <code>select()</code> in that they bot=
h watch sets of file descriptors for events, such as incoming data ready to=
 <code>recv()</code>, socket ready to <code>send()</code> data to, out-of-b=
and data ready to <code>recv()</code>, errors, etc.</p>
<p>The basic idea is that you pass an array of <code>nfds</code> <code>stru=
ct pollfd</code>s in <code>ufds</code>, along with a timeout in millisecond=
s (1000 milliseconds in a second). The <code>timeout</code> can be negative=
 if you want to wait forever. If no event happens on any of the socket desc=
riptors by the timeout, <code>poll()</code> will return.</p>
<p>Each element in the array of <code>struct pollfd</code>s represents one =
socket descriptor, and contains the following fields:</p>
<p></p>
<div class=3D"sourceCode" id=3D"cb118"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb118-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb118-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"kw">struct</span> pollfd {</span>
<span id=3D"cb118-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb118-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int</sp=
an> fd;         <span class=3D"co">// the socket descriptor</span></span>
<span id=3D"cb118-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb118-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">short</=
span> events;   <span class=3D"co">// bitmap of events we're interested in<=
/span></span>
<span id=3D"cb118-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb118-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">short</=
span> revents;  <span class=3D"co">// when poll() returns, bitmap of events=
 that occurred</span></span>
<span id=3D"cb118-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb118-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    };</span></code></pre></div>
<p>Before calling <code>poll()</code>, load <code>fd</code> with the socket=
 descriptor (if you set <code>fd</code> to a negative number, this <code>st=
ruct pollfd</code> is ignored and its <code>revents</code> field is set to =
zero) and then construct the <code>events</code> field by bitwise-ORing the=
 following macros:</p>
<table>
<thead>
<tr class=3D"header">
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>POLLIN</code></td>
<td>Alert me when data is ready to <code>recv()</code> on this socket.</td>
</tr>
<tr class=3D"even">
<td><code>POLLOUT</code></td>
<td>Alert me when I can <code>send()</code> data to this socket without blo=
cking.</td>
</tr>
<tr class=3D"odd">
<td><code>POLLPRI</code></td>
<td>Alert me when out-of-band data is ready to <code>recv()</code> on this =
socket.</td>
</tr>
</tbody>
</table>
<p>Once the <code>poll()</code> call returns, the <code>revents</code> fiel=
d will be constructed as a bitwise-OR of the above fields, telling you whic=
h descriptors actually have had that event occur. Additionally, these other=
 fields might be present:</p>
<table>
<colgroup>
<col style=3D"width: 16%">
<col style=3D"width: 83%">
</colgroup>
<thead>
<tr class=3D"header">
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>POLLERR</code></td>
<td>An error has occurred on this socket.</td>
</tr>
<tr class=3D"even">
<td><code>POLLHUP</code></td>
<td>The remote side of the connection hung up.</td>
</tr>
<tr class=3D"odd">
<td><code>POLLNVAL</code></td>
<td>Something was wrong with the socket descriptor <code>fd</code>=E2=80=94=
maybe it=E2=80=99s uninitialized?</td>
</tr>
</tbody>
</table>
<h4 data-number=3D"9.17.0.3" id=3D"return-value-16"><span class=3D"header-s=
ection-number">9.17.0.3</span> Return Value</h4>
<p>Returns the number of elements in the <code>ufds</code> array that have =
had event occur on them; this can be zero if the timeout occurred. Also ret=
urns <code>-1</code> on error (and <code>errno</code> will be set according=
ly).</p>
<h4 data-number=3D"9.17.0.4" id=3D"example-16"><span class=3D"header-sectio=
n-number">9.17.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb119"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb119-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb119-1"></a><span class=3D"dt">int</=
span> s1, s2;</span>
<span id=3D"cb119-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-2">=
</a><span class=3D"dt">int</span> rv;</span>
<span id=3D"cb119-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-3">=
</a><span class=3D"dt">char</span> buf1[<span class=3D"dv">256</span>], buf=
2[<span class=3D"dv">256</span>];</span>
<span id=3D"cb119-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-4">=
</a><span class=3D"kw">struct</span> pollfd ufds[<span class=3D"dv">2</span=
>];</span>
<span id=3D"cb119-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-5">=
</a></span>
<span id=3D"cb119-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-6">=
</a>s1 =3D socket(PF_INET, SOCK_STREAM, <span class=3D"dv">0</span>);</span=
>
<span id=3D"cb119-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-7">=
</a>s2 =3D socket(PF_INET, SOCK_STREAM, <span class=3D"dv">0</span>);</span=
>
<span id=3D"cb119-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-8">=
</a></span>
<span id=3D"cb119-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-9">=
</a><span class=3D"co">// pretend we've connected both to a server at this =
point</span></span>
<span id=3D"cb119-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-10=
"></a><span class=3D"co">//connect(s1, ...)...</span></span>
<span id=3D"cb119-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-11=
"></a><span class=3D"co">//connect(s2, ...)...</span></span>
<span id=3D"cb119-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-12=
"></a></span>
<span id=3D"cb119-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-13=
"></a><span class=3D"co">// set up the array of file descriptors.</span></s=
pan>
<span id=3D"cb119-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-14=
"></a><span class=3D"co">//</span></span>
<span id=3D"cb119-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-15=
"></a><span class=3D"co">// in this example, we want to know when there's n=
ormal or out-of-band</span></span>
<span id=3D"cb119-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-16=
"></a><span class=3D"co">// data ready to be recv()'d...</span></span>
<span id=3D"cb119-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-17=
"></a></span>
<span id=3D"cb119-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-18=
"></a>ufds[<span class=3D"dv">0</span>].fd =3D s1;</span>
<span id=3D"cb119-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-19=
"></a>ufds[<span class=3D"dv">0</span>].events =3D POLLIN | POLLPRI; <span =
class=3D"co">// check for normal or out-of-band</span></span>
<span id=3D"cb119-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-20=
"></a></span>
<span id=3D"cb119-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-21=
"></a>ufds[<span class=3D"dv">1</span>].fd =3D s2;</span>
<span id=3D"cb119-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-22=
"></a>ufds[<span class=3D"dv">1</span>].events =3D POLLIN; <span class=3D"c=
o">// check for just normal data</span></span>
<span id=3D"cb119-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-23=
"></a></span>
<span id=3D"cb119-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-24=
"></a><span class=3D"co">// wait for events on the sockets, 3.5 second time=
out</span></span>
<span id=3D"cb119-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-25=
"></a>rv =3D poll(ufds, <span class=3D"dv">2</span>, <span class=3D"dv">350=
0</span>);</span>
<span id=3D"cb119-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-26=
"></a></span>
<span id=3D"cb119-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-27=
"></a><span class=3D"cf">if</span> (rv =3D=3D -<span class=3D"dv">1</span>)=
 {</span>
<span id=3D"cb119-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-28=
"></a>    perror(<span class=3D"st">"poll"</span>); <span class=3D"co">// e=
rror occurred in poll()</span></span>
<span id=3D"cb119-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-29=
"></a>} <span class=3D"cf">else</span> <span class=3D"cf">if</span> (rv =3D=
=3D <span class=3D"dv">0</span>) {</span>
<span id=3D"cb119-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-30=
"></a>    printf(<span class=3D"st">"Timeout occurred! No data after 3.5 se=
conds.</span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</spa=
n>
<span id=3D"cb119-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-31=
"></a>} <span class=3D"cf">else</span> {</span>
<span id=3D"cb119-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-32=
"></a>    <span class=3D"co">// check for events on s1:</span></span>
<span id=3D"cb119-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-33=
"></a>    <span class=3D"cf">if</span> (ufds[<span class=3D"dv">0</span>].r=
events &amp; POLLIN) {</span>
<span id=3D"cb119-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-34=
"></a>        recv(s1, buf1, <span class=3D"kw">sizeof</span> buf1, <span c=
lass=3D"dv">0</span>); <span class=3D"co">// receive normal data</span></sp=
an>
<span id=3D"cb119-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-35=
"></a>    }</span>
<span id=3D"cb119-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-36=
"></a>    <span class=3D"cf">if</span> (ufds[<span class=3D"dv">0</span>].r=
events &amp; POLLPRI) {</span>
<span id=3D"cb119-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-37=
"></a>        recv(s1, buf1, <span class=3D"kw">sizeof</span> buf1, MSG_OOB=
); <span class=3D"co">// out-of-band data</span></span>
<span id=3D"cb119-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-38=
"></a>    }</span>
<span id=3D"cb119-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-39=
"></a></span>
<span id=3D"cb119-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-40=
"></a>    <span class=3D"co">// check for events on s2:</span></span>
<span id=3D"cb119-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-41=
"></a>    <span class=3D"cf">if</span> (ufds[<span class=3D"dv">1</span>].r=
events &amp; POLLIN) {</span>
<span id=3D"cb119-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-42=
"></a>        recv(s1, buf2, <span class=3D"kw">sizeof</span> buf2, <span c=
lass=3D"dv">0</span>);</span>
<span id=3D"cb119-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-43=
"></a>    }</span>
<span id=3D"cb119-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb119-44=
"></a>}</span></code></pre></div>
<h4 data-number=3D"9.17.0.5" id=3D"see-also-15"><span class=3D"header-secti=
on-number">9.17.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#selectman"><code>select()</=
code></a></p>
<h2 data-number=3D"9.18" id=3D"recvman"><span class=3D"header-section-numbe=
r">9.18</span> <code>recv()</code>, <code>recvfrom()</code></h2>
<p>Receive data on a socket</p>
<h4 data-number=3D"9.18.0.1" id=3D"synopsis-17"><span class=3D"header-secti=
on-number">9.18.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb120"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb120-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb120-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></sp=
an>
<span id=3D"cb120-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb120-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </=
span><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb120-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb120-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb120-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb120-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">ssize_t</sp=
an> recv(<span class=3D"dt">int</span> s, <span class=3D"dt">void</span> *b=
uf, <span class=3D"dt">size_t</span> len, <span class=3D"dt">int</span> fla=
gs);</span>
<span id=3D"cb120-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb120-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">ssize_t</sp=
an> recvfrom(<span class=3D"dt">int</span> s, <span class=3D"dt">void</span=
> *buf, <span class=3D"dt">size_t</span> len, <span class=3D"dt">int</span>=
 flags,</span>
<span id=3D"cb120-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb120-6" =
aria-hidden=3D"true" tabindex=3D"-1"></a>                     <span class=
=3D"kw">struct</span> sockaddr *from, socklen_t *fromlen);</span></code></p=
re></div>
<h4 data-number=3D"9.18.0.2" id=3D"description-17"><span class=3D"header-se=
ction-number">9.18.0.2</span> Description</h4>
<p>  Once you have a socket up and connected, you can read incoming data fr=
om the remote side using the <code>recv()</code> (for TCP  <code>SOCK_STREA=
M</code> sockets) and <code>recvfrom()</code> (for UDP  <code>SOCK_DGRAM</c=
ode> sockets).</p>
<p>Both functions take the socket descriptor <code>s</code>, a pointer to t=
he buffer <code>buf</code>, the size (in bytes) of the buffer <code>len</co=
de>, and a set of <code>flags</code> that control how the functions work.</=
p>
<p>Additionally, the <code>recvfrom()</code> takes a  <code>struct sockaddr=
*</code>, <code>from</code> that will tell you where the data came from, an=
d will fill in <code>fromlen</code> with the size of <code>struct sockaddr<=
/code>. (You must also initialize <code>fromlen</code> to be the size of <c=
ode>from</code> or <code>struct sockaddr</code>.)</p>
<p>So what wondrous flags can you pass into this function? Here are some of=
 them, but you should check your local man pages for more information and w=
hat is actually supported on your system. You bitwise-or these together, or=
 just set <code>flags</code> to <code>0</code> if you want it to be a regul=
ar vanilla <code>recv()</code>.</p>
<p>   </p>
<table>
<colgroup>
<col style=3D"width: 20%">
<col style=3D"width: 79%">
</colgroup>
<thead>
<tr class=3D"header">
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>MSG_OOB</code></td>
<td>Receive Out of Band data. This is how to get data that has been sent to=
 you with the <code>MSG_OOB</code> flag in <code>send()</code>. As the rece=
iving side, you will have had signal  <code>SIGURG</code> raised telling yo=
u there is urgent data. In your handler for that signal, you could call <co=
de>recv()</code> with this <code>MSG_OOB</code> flag.</td>
</tr>
<tr class=3D"even">
<td><code>MSG_PEEK</code></td>
<td>If you want to call <code>recv()</code> =E2=80=9Cjust for pretend=E2=80=
=9D, you can call it with this flag. This will tell you what=E2=80=99s wait=
ing in the buffer for when you call <code>recv()</code> =E2=80=9Cfor real=
=E2=80=9D (i.e.&nbsp;<em>without</em> the <code>MSG_PEEK</code> flag. It=E2=
=80=99s like a sneak preview into the next <code>recv()</code> call.</td>
</tr>
<tr class=3D"odd">
<td><code>MSG_WAITALL</code></td>
<td>Tell <code>recv()</code> to not return until all the data you specified=
 in the <code>len</code> parameter. It will ignore your wishes in extreme c=
ircumstances, however, like if a signal interrupts the call or if some erro=
r occurs or if the remote side closes the connection, etc. Don=E2=80=99t be=
 mad with it.</td>
</tr>
</tbody>
</table>
<p>When you call <code>recv()</code>, it will block until there is some dat=
a to read. If you want to not block, set the socket to non-blocking or chec=
k with <code>select()</code> or <code>poll()</code> to see if there is inco=
ming data before calling <code>recv()</code> or <code>recvfrom()</code>.</p=
>
<h4 data-number=3D"9.18.0.3" id=3D"return-value-17"><span class=3D"header-s=
ection-number">9.18.0.3</span> Return Value</h4>
<p>Returns the number of bytes actually received (which might be less than =
you requested in the <code>len</code> parameter), or <code>-1</code> on err=
or (and <code>errno</code> will be set accordingly).</p>
<p>If the remote side has closed the connection, <code>recv()</code> will r=
eturn <code>0</code>. This is the normal method for determining if the remo=
te side has closed the connection. Normality is good, rebel!</p>
<h4 data-number=3D"9.18.0.4" id=3D"example-17"><span class=3D"header-sectio=
n-number">9.18.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb121"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb121-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb121-1"></a><span class=3D"co">// st=
ream sockets and recv()</span></span>
<span id=3D"cb121-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-2">=
</a></span>
<span id=3D"cb121-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-3">=
</a><span class=3D"kw">struct</span> addrinfo hints, *res;</span>
<span id=3D"cb121-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-4">=
</a><span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb121-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-5">=
</a><span class=3D"dt">char</span> buf[<span class=3D"dv">512</span>];</spa=
n>
<span id=3D"cb121-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-6">=
</a><span class=3D"dt">int</span> byte_count;</span>
<span id=3D"cb121-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-7">=
</a></span>
<span id=3D"cb121-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-8">=
</a><span class=3D"co">// get host info, make socket, and connect it</span>=
</span>
<span id=3D"cb121-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-9">=
</a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">size=
of</span> hints);</span>
<span id=3D"cb121-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-10=
"></a>hints.ai_family =3D AF_UNSPEC;  <span class=3D"co">// use IPv4 or IPv=
6, whichever</span></span>
<span id=3D"cb121-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-11=
"></a>hints.ai_socktype =3D SOCK_STREAM;</span>
<span id=3D"cb121-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-12=
"></a>getaddrinfo(<span class=3D"st">"www.example.com"</span>, <span class=
=3D"st">"3490"</span>, &amp;hints, &amp;res);</span>
<span id=3D"cb121-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-13=
"></a>sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_=
protocol);</span>
<span id=3D"cb121-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-14=
"></a>connect(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span>
<span id=3D"cb121-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-15=
"></a></span>
<span id=3D"cb121-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-16=
"></a><span class=3D"co">// all right! now that we're connected, we can rec=
eive some data!</span></span>
<span id=3D"cb121-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-17=
"></a>byte_count =3D recv(sockfd, buf, <span class=3D"kw">sizeof</span> buf=
, <span class=3D"dv">0</span>);</span>
<span id=3D"cb121-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb121-18=
"></a>printf(<span class=3D"st">"recv()'d %d bytes of data in buf</span><sp=
an class=3D"sc">\n</span><span class=3D"st">"</span>, byte_count);</span></=
code></pre></div>
<div class=3D"sourceCode" id=3D"cb122"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb122-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb122-1"></a><span class=3D"co">// da=
tagram sockets and recvfrom()</span></span>
<span id=3D"cb122-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-2">=
</a></span>
<span id=3D"cb122-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-3">=
</a><span class=3D"kw">struct</span> addrinfo hints, *res;</span>
<span id=3D"cb122-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-4">=
</a><span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb122-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-5">=
</a><span class=3D"dt">int</span> byte_count;</span>
<span id=3D"cb122-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-6">=
</a>socklen_t fromlen;</span>
<span id=3D"cb122-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-7">=
</a><span class=3D"kw">struct</span> sockaddr_storage addr;</span>
<span id=3D"cb122-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-8">=
</a><span class=3D"dt">char</span> buf[<span class=3D"dv">512</span>];</spa=
n>
<span id=3D"cb122-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-9">=
</a><span class=3D"dt">char</span> ipstr[INET6_ADDRSTRLEN];</span>
<span id=3D"cb122-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-10=
"></a></span>
<span id=3D"cb122-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-11=
"></a><span class=3D"co">// get host info, make socket, bind it to port 495=
0</span></span>
<span id=3D"cb122-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-12=
"></a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">si=
zeof</span> hints);</span>
<span id=3D"cb122-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-13=
"></a>hints.ai_family =3D AF_UNSPEC;  <span class=3D"co">// use IPv4 or IPv=
6, whichever</span></span>
<span id=3D"cb122-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-14=
"></a>hints.ai_socktype =3D SOCK_DGRAM;</span>
<span id=3D"cb122-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-15=
"></a>hints.ai_flags =3D AI_PASSIVE;</span>
<span id=3D"cb122-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-16=
"></a>getaddrinfo(NULL, <span class=3D"st">"4950"</span>, &amp;hints, &amp;=
res);</span>
<span id=3D"cb122-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-17=
"></a>sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_=
protocol);</span>
<span id=3D"cb122-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-18=
"></a>bind(sockfd, res-&gt;ai_addr, res-&gt;ai_addrlen);</span>
<span id=3D"cb122-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-19=
"></a></span>
<span id=3D"cb122-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-20=
"></a><span class=3D"co">// no need to accept(), just recvfrom():</span></s=
pan>
<span id=3D"cb122-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-21=
"></a></span>
<span id=3D"cb122-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-22=
"></a>fromlen =3D <span class=3D"kw">sizeof</span> addr;</span>
<span id=3D"cb122-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-23=
"></a>byte_count =3D recvfrom(sockfd, buf, <span class=3D"kw">sizeof</span>=
 buf, <span class=3D"dv">0</span>, &amp;addr, &amp;fromlen);</span>
<span id=3D"cb122-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-24=
"></a></span>
<span id=3D"cb122-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-25=
"></a>printf(<span class=3D"st">"recv()'d %d bytes of data in buf</span><sp=
an class=3D"sc">\n</span><span class=3D"st">"</span>, byte_count);</span>
<span id=3D"cb122-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-26=
"></a>printf(<span class=3D"st">"from IP address %s</span><span class=3D"sc=
">\n</span><span class=3D"st">"</span>,</span>
<span id=3D"cb122-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-27=
"></a>    inet_ntop(addr.ss_family,</span>
<span id=3D"cb122-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-28=
"></a>        addr.ss_family =3D=3D AF_INET?</span>
<span id=3D"cb122-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-29=
"></a>            ((<span class=3D"kw">struct</span> sockadd_in *)&amp;addr=
)-&gt;sin_addr:</span>
<span id=3D"cb122-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-30=
"></a>            ((<span class=3D"kw">struct</span> sockadd_in6 *)&amp;add=
r)-&gt;sin6_addr,</span>
<span id=3D"cb122-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb122-31=
"></a>        ipstr, <span class=3D"kw">sizeof</span> ipstr);</span></code>=
</pre></div>
<h4 data-number=3D"9.18.0.5" id=3D"see-also-16"><span class=3D"header-secti=
on-number">9.18.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#sendman"><code>send()</code=
></a>, <a href=3D"https://beej.us/guide/bgnet/html/#sendman"><code>sendto()=
</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#selectman"><code>=
select()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#pollman">=
<code>poll()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#block=
ing">Blocking</a></p>
<h2 data-number=3D"9.19" id=3D"selectman"><span class=3D"header-section-num=
ber">9.19</span> <code>select()</code></h2>
<p>Check if sockets descriptors are ready to read/write</p>
<h4 data-number=3D"9.19.0.1" id=3D"synopsis-18"><span class=3D"header-secti=
on-number">9.19.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb123"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb123-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb123-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/select.h&gt;</span></s=
pan>
<span id=3D"cb123-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb123-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb123-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb123-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
select(<span class=3D"dt">int</span> n, fd_set *readfds, fd_set *writefds, =
fd_set *exceptfds,</span>
<span id=3D"cb123-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb123-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>               <span class=3D"kw">=
struct</span> timeval *timeout);</span>
<span id=3D"cb123-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb123-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb123-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb123-6" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    FD_SET(<span class=3D"dt">int<=
/span> fd, fd_set *set);</span>
<span id=3D"cb123-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb123-7" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    FD_CLR(<span class=3D"dt">int<=
/span> fd, fd_set *set);</span>
<span id=3D"cb123-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb123-8" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    FD_ISSET(<span class=3D"dt">in=
t</span> fd, fd_set *set);</span>
<span id=3D"cb123-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb123-9" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    FD_ZERO(fd_set *set);</span></=
code></pre></div>
<h4 data-number=3D"9.19.0.2" id=3D"description-18"><span class=3D"header-se=
ction-number">9.19.0.2</span> Description</h4>
<p> The <code>select()</code> function gives you a way to simultaneously ch=
eck multiple sockets to see if they have data waiting to be <code>recv()</c=
ode>d, or if you can <code>send()</code> data to them without blocking, or =
if some exception has occurred.</p>
<p>You populate your sets of socket descriptors using the macros, like <cod=
e>FD_SET()</code>, above. Once you have the set, you pass it into the funct=
ion as one of the following parameters: <code>readfds</code> if you want to=
 know when any of the sockets in the set is ready to <code>recv()</code> da=
ta, <code>writefds</code> if any of the sockets is ready to <code>send()</c=
ode> data to, and/or <code>exceptfds</code> if you need to know when an exc=
eption (error) occurs on any of the sockets. Any or all of these parameters=
 can be <code>NULL</code> if you=E2=80=99re not interested in those types o=
f events. After <code>select()</code> returns, the values in the sets will =
be changed to show which are ready for reading or writing, and which have e=
xceptions.</p>
<p>The first parameter, <code>n</code> is the highest-numbered socket descr=
iptor (they=E2=80=99re just <code>int</code>s, remember?) plus one.</p>
<p>Lastly, the  <code>struct timeval</code>, <code>timeout</code>, at the e=
nd=E2=80=94this lets you tell <code>select()</code> how long to check these=
 sets for. It=E2=80=99ll return after the timeout, or when an event occurs,=
 whichever is first. The <code>struct timeval</code> has two fields: <code>=
tv_sec</code> is the number of seconds, to which is added <code>tv_usec</co=
de>, the number of microseconds (1,000,000 microseconds in a second).</p>
<p>The helper macros do the following:</p>
<table>
<thead>
<tr class=3D"header">
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td> <code>FD_SET(int fd, fd_set *set);</code></td>
<td>Add <code>fd</code> to the <code>set</code>.</td>
</tr>
<tr class=3D"even">
<td> <code>FD_CLR(int fd, fd_set *set);</code></td>
<td>Remove <code>fd</code> from the <code>set</code>.</td>
</tr>
<tr class=3D"odd">
<td> <code>FD_ISSET(int fd, fd_set *set);</code></td>
<td>Return true if <code>fd</code> is in the <code>set</code>.</td>
</tr>
<tr class=3D"even">
<td> <code>FD_ZERO(fd_set *set);</code></td>
<td>Clear all entries from the <code>set</code>.</td>
</tr>
</tbody>
</table>
<p>Note for Linux users: Linux=E2=80=99s <code>select()</code> can return =
=E2=80=9Cready-to-read=E2=80=9D and then not actually be ready to read, thu=
s causing the subsequent <code>read()</code> call to block. You can work ar=
ound this bug by setting  <code>O_NONBLOCK</code> flag on the receiving soc=
ket so it errors with <code>EWOULDBLOCK</code>, then ignoring this error if=
 it occurs. See the <a href=3D"https://beej.us/guide/bgnet/html/#fcntlman">=
<code>fcntl()</code> reference page</a> for more info on setting a socket t=
o non-blocking.</p>
<h4 data-number=3D"9.19.0.3" id=3D"return-value-18"><span class=3D"header-s=
ection-number">9.19.0.3</span> Return Value</h4>
<p>Returns the number of descriptors in the set on success, <code>0</code> =
if the timeout was reached, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly). Also, the sets are modified to show which so=
ckets are ready.</p>
<h4 data-number=3D"9.19.0.4" id=3D"example-18"><span class=3D"header-sectio=
n-number">9.19.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb124"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb124-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb124-1"></a><span class=3D"dt">int</=
span> s1, s2, n;</span>
<span id=3D"cb124-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-2">=
</a>fd_set readfds;</span>
<span id=3D"cb124-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-3">=
</a><span class=3D"kw">struct</span> timeval tv;</span>
<span id=3D"cb124-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-4">=
</a><span class=3D"dt">char</span> buf1[<span class=3D"dv">256</span>], buf=
2[<span class=3D"dv">256</span>];</span>
<span id=3D"cb124-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-5">=
</a></span>
<span id=3D"cb124-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-6">=
</a><span class=3D"co">// pretend we've connected both to a server at this =
point</span></span>
<span id=3D"cb124-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-7">=
</a><span class=3D"co">//s1 =3D socket(...);</span></span>
<span id=3D"cb124-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-8">=
</a><span class=3D"co">//s2 =3D socket(...);</span></span>
<span id=3D"cb124-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-9">=
</a><span class=3D"co">//connect(s1, ...)...</span></span>
<span id=3D"cb124-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-10=
"></a><span class=3D"co">//connect(s2, ...)...</span></span>
<span id=3D"cb124-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-11=
"></a></span>
<span id=3D"cb124-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-12=
"></a><span class=3D"co">// clear the set ahead of time</span></span>
<span id=3D"cb124-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-13=
"></a>FD_ZERO(&amp;readfds);</span>
<span id=3D"cb124-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-14=
"></a></span>
<span id=3D"cb124-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-15=
"></a><span class=3D"co">// add our descriptors to the set</span></span>
<span id=3D"cb124-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-16=
"></a>FD_SET(s1, &amp;readfds);</span>
<span id=3D"cb124-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-17=
"></a>FD_SET(s2, &amp;readfds);</span>
<span id=3D"cb124-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-18=
"></a></span>
<span id=3D"cb124-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-19=
"></a><span class=3D"co">// since we got s2 second, it's the "greater", so =
we use that for</span></span>
<span id=3D"cb124-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-20=
"></a><span class=3D"co">// the n param in select()</span></span>
<span id=3D"cb124-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-21=
"></a>n =3D s2 + <span class=3D"dv">1</span>;</span>
<span id=3D"cb124-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-22=
"></a></span>
<span id=3D"cb124-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-23=
"></a><span class=3D"co">// wait until either socket has data ready to be r=
ecv()d (timeout 10.5 secs)</span></span>
<span id=3D"cb124-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-24=
"></a>tv.tv_sec =3D <span class=3D"dv">10</span>;</span>
<span id=3D"cb124-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-25=
"></a>tv.tv_usec =3D <span class=3D"dv">500000</span>;</span>
<span id=3D"cb124-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-26=
"></a>rv =3D select(n, &amp;readfds, NULL, NULL, &amp;tv);</span>
<span id=3D"cb124-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-27=
"></a></span>
<span id=3D"cb124-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-28=
"></a><span class=3D"cf">if</span> (rv =3D=3D -<span class=3D"dv">1</span>)=
 {</span>
<span id=3D"cb124-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-29=
"></a>    perror(<span class=3D"st">"select"</span>); <span class=3D"co">//=
 error occurred in select()</span></span>
<span id=3D"cb124-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-30=
"></a>} <span class=3D"cf">else</span> <span class=3D"cf">if</span> (rv =3D=
=3D <span class=3D"dv">0</span>) {</span>
<span id=3D"cb124-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-31=
"></a>    printf(<span class=3D"st">"Timeout occurred! No data after 10.5 s=
econds.</span><span class=3D"sc">\n</span><span class=3D"st">"</span>);</sp=
an>
<span id=3D"cb124-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-32=
"></a>} <span class=3D"cf">else</span> {</span>
<span id=3D"cb124-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-33=
"></a>    <span class=3D"co">// one or both of the descriptors have data</s=
pan></span>
<span id=3D"cb124-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-34=
"></a>    <span class=3D"cf">if</span> (FD_ISSET(s1, &amp;readfds)) {</span=
>
<span id=3D"cb124-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-35=
"></a>        recv(s1, buf1, <span class=3D"kw">sizeof</span> buf1, <span c=
lass=3D"dv">0</span>);</span>
<span id=3D"cb124-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-36=
"></a>    }</span>
<span id=3D"cb124-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-37=
"></a>    <span class=3D"cf">if</span> (FD_ISSET(s2, &amp;readfds)) {</span=
>
<span id=3D"cb124-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-38=
"></a>        recv(s2, buf2, <span class=3D"kw">sizeof</span> buf2, <span c=
lass=3D"dv">0</span>);</span>
<span id=3D"cb124-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-39=
"></a>    }</span>
<span id=3D"cb124-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb124-40=
"></a>}</span></code></pre></div>
<h4 data-number=3D"9.19.0.5" id=3D"see-also-17"><span class=3D"header-secti=
on-number">9.19.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#pollman"><code>poll()</code=
></a></p>
<h2 data-number=3D"9.20" id=3D"setsockoptman"><span class=3D"header-section=
-number">9.20</span> <code>setsockopt()</code>, <code>getsockopt()</code></=
h2>
<p>Set various options for a socket</p>
<h4 data-number=3D"9.20.0.1" id=3D"synopsis-19"><span class=3D"header-secti=
on-number">9.20.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb125"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb125-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb125-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></sp=
an>
<span id=3D"cb125-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb125-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </=
span><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb125-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb125-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb125-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb125-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
getsockopt(<span class=3D"dt">int</span> s, <span class=3D"dt">int</span> l=
evel, <span class=3D"dt">int</span> optname, <span class=3D"dt">void</span>=
 *optval,</span>
<span id=3D"cb125-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb125-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>                   socklen_t *optl=
en);</span>
<span id=3D"cb125-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb125-6" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
setsockopt(<span class=3D"dt">int</span> s, <span class=3D"dt">int</span> l=
evel, <span class=3D"dt">int</span> optname, <span class=3D"dt">const</span=
> <span class=3D"dt">void</span> *optval,</span>
<span id=3D"cb125-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb125-7" =
aria-hidden=3D"true" tabindex=3D"-1"></a>                   socklen_t optle=
n);</span></code></pre></div>
<h4 data-number=3D"9.20.0.2" id=3D"description-19"><span class=3D"header-se=
ction-number">9.20.0.2</span> Description</h4>
<p>  Sockets are fairly configurable beasts. In fact, they are so configura=
ble, I=E2=80=99m not even going to cover it all here. It=E2=80=99s probably=
 system-dependent anyway. But I will talk about the basics.</p>
<p>Obviously, these functions get and set certain options on a socket. On a=
 Linux box, all the socket information is in the man page for socket in sec=
tion 7. (Type: =E2=80=9C<code>man 7 socket</code>=E2=80=9D to get all these=
 goodies.)</p>
<p>As for parameters, <code>s</code> is the socket you=E2=80=99re talking a=
bout, level should be set to  <code>SOL_SOCKET</code>. Then you set the <co=
de>optname</code> to the name you=E2=80=99re interested in. Again, see your=
 man page for all the options, but here are some of the most fun ones:</p>
<table>
<colgroup>
<col style=3D"width: 26%">
<col style=3D"width: 73%">
</colgroup>
<thead>
<tr class=3D"header">
<th><code>optname</code></th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td> <code>SO_BINDTODEVICE</code></td>
<td>Bind this socket to a symbolic device name like <code>eth0</code> inste=
ad of using <code>bind()</code> to bind it to an IP address. Type the comma=
nd <code>ifconfig</code> under Unix to see the device names.</td>
</tr>
<tr class=3D"even">
<td> <code>SO_REUSEADDR</code></td>
<td>Allows other sockets to <code>bind()</code> to this port, unless there =
is an active listening socket bound to the port already. This enables you t=
o get around those =E2=80=9CAddress already in use=E2=80=9D error messages =
when you try to restart your server after a crash.</td>
</tr>
<tr class=3D"odd">
<td> <code>SOCK_DGRAM</code></td>
<td>Allows UDP datagram  (<code>SOCK_DGRAM</code>) sockets to send and rece=
ive packets sent to and from the broadcast address. Does nothing=E2=80=94<e=
m>NOTHING!!</em>=E2=80=94to TCP stream sockets! Hahaha!</td>
</tr>
</tbody>
</table>
<p>As for the parameter <code>optval</code>, it=E2=80=99s usually a pointer=
 to an <code>int</code> indicating the value in question. For booleans, zer=
o is false, and non-zero is true. And that=E2=80=99s an absolute fact, unle=
ss it=E2=80=99s different on your system. If there is no parameter to be pa=
ssed, <code>optval</code> can be <code>NULL</code>.</p>
<p>The final parameter, <code>optlen</code>, should be set to the length of=
 <code>optval</code>, probably <code>sizeof(int)</code>, but varies dependi=
ng on the option. Note that in the case of <code>getsockopt()</code>, this =
is a pointer to a <code>socklen_t</code>, and it specifies the maximum size=
 object that will be stored in <code>optval</code> (to prevent buffer overf=
lows). And <code>getsockopt()</code> will modify the value of <code>optlen<=
/code> to reflect the number of bytes actually set.</p>
<p><strong>Warning</strong>: on some systems (notably   Sun and  Windows), =
the option can be a <code>char</code> instead of an <code>int</code>, and i=
s set to, for example, a character value of <code>'1'</code> instead of an =
<code>int</code> value of <code>1</code>. Again, check your own man pages f=
or more info with =E2=80=9C<code>man setsockopt</code>=E2=80=9D and =E2=80=
=9C<code>man 7 socket</code>=E2=80=9D!</p>
<h4 data-number=3D"9.20.0.3" id=3D"return-value-19"><span class=3D"header-s=
ection-number">9.20.0.3</span> Return Value</h4>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly).</p>
<h4 data-number=3D"9.20.0.4" id=3D"example-19"><span class=3D"header-sectio=
n-number">9.20.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb126"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb126-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb126-1"></a><span class=3D"dt">int</=
span> optval;</span>
<span id=3D"cb126-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-2">=
</a><span class=3D"dt">int</span> optlen;</span>
<span id=3D"cb126-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-3">=
</a><span class=3D"dt">char</span> *optval2;</span>
<span id=3D"cb126-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-4">=
</a></span>
<span id=3D"cb126-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-5">=
</a><span class=3D"co">// set SO_REUSEADDR on a socket to true (1):</span><=
/span>
<span id=3D"cb126-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-6">=
</a>optval =3D <span class=3D"dv">1</span>;</span>
<span id=3D"cb126-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-7">=
</a>setsockopt(s1, SOL_SOCKET, SO_REUSEADDR, &amp;optval, <span class=3D"kw=
">sizeof</span> optval);</span>
<span id=3D"cb126-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-8">=
</a></span>
<span id=3D"cb126-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-9">=
</a><span class=3D"co">// bind a socket to a device name (might not work on=
 all systems):</span></span>
<span id=3D"cb126-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-10=
"></a>optval2 =3D <span class=3D"st">"eth1"</span>; <span class=3D"co">// 4=
 bytes long, so 4, below:</span></span>
<span id=3D"cb126-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-11=
"></a>setsockopt(s2, SOL_SOCKET, SO_BINDTODEVICE, optval2, <span class=3D"d=
v">4</span>);</span>
<span id=3D"cb126-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-12=
"></a></span>
<span id=3D"cb126-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-13=
"></a><span class=3D"co">// see if the SO_BROADCAST flag is set:</span></sp=
an>
<span id=3D"cb126-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-14=
"></a>getsockopt(s3, SOL_SOCKET, SO_BROADCAST, &amp;optval, &amp;optlen);</=
span>
<span id=3D"cb126-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-15=
"></a><span class=3D"cf">if</span> (optval !=3D <span class=3D"dv">0</span>=
) {</span>
<span id=3D"cb126-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-16=
"></a>    print(<span class=3D"st">"SO_BROADCAST enabled on s3!</span><span=
 class=3D"sc">\n</span><span class=3D"st">"</span>);</span>
<span id=3D"cb126-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb126-17=
"></a>}</span></code></pre></div>
<h4 data-number=3D"9.20.0.5" id=3D"see-also-18"><span class=3D"header-secti=
on-number">9.20.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#fcntlman"><code>fcntl()</co=
de></a></p>
<h2 data-number=3D"9.21" id=3D"sendman"><span class=3D"header-section-numbe=
r">9.21</span> <code>send()</code>, <code>sendto()</code></h2>
<p>Send data out over a socket</p>
<h4 data-number=3D"9.21.0.1" id=3D"synopsis-20"><span class=3D"header-secti=
on-number">9.21.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb127"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb127-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb127-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></sp=
an>
<span id=3D"cb127-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb127-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </=
span><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb127-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb127-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb127-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb127-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">ssize_t</sp=
an> send(<span class=3D"dt">int</span> s, <span class=3D"dt">const</span> <=
span class=3D"dt">void</span> *buf, <span class=3D"dt">size_t</span> len, <=
span class=3D"dt">int</span> flags);</span>
<span id=3D"cb127-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb127-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">ssize_t</sp=
an> sendto(<span class=3D"dt">int</span> s, <span class=3D"dt">const</span>=
 <span class=3D"dt">void</span> *buf, <span class=3D"dt">size_t</span> len,=
</span>
<span id=3D"cb127-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb127-6" =
aria-hidden=3D"true" tabindex=3D"-1"></a>                   <span class=3D"=
dt">int</span> flags, <span class=3D"dt">const</span> <span class=3D"kw">st=
ruct</span> sockaddr *to,</span>
<span id=3D"cb127-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb127-7" =
aria-hidden=3D"true" tabindex=3D"-1"></a>                   socklen_t tolen=
);</span></code></pre></div>
<h4 data-number=3D"9.21.0.2" id=3D"description-20"><span class=3D"header-se=
ction-number">9.21.0.2</span> Description</h4>
<p>  These functions send data to a socket. Generally speaking, <code>send(=
)</code> is used for TCP  <code>SOCK_STREAM</code> connected sockets, and <=
code>sendto()</code> is used for UDP  <code>SOCK_DGRAM</code> unconnected d=
atagram sockets. With the unconnected sockets, you must specify the destina=
tion of a packet each time you send one, and that=E2=80=99s why the last pa=
rameters of <code>sendto()</code> define where the packet is going.</p>
<p>With both <code>send()</code> and <code>sendto()</code>, the parameter <=
code>s</code> is the socket, <code>buf</code> is a pointer to the data you =
want to send, <code>len</code> is the number of bytes you want to send, and=
 <code>flags</code> allows you to specify more information about how the da=
ta is to be sent. Set <code>flags</code> to zero if you want it to be =E2=
=80=9Cnormal=E2=80=9D data. Here are some of the commonly used flags, but c=
heck your local <code>send()</code> man pages for more details:</p>
<table>
<colgroup>
<col style=3D"width: 23%">
<col style=3D"width: 76%">
</colgroup>
<thead>
<tr class=3D"header">
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td> <code>MSG_OOB</code></td>
<td>Send as  =E2=80=9Cout of band=E2=80=9D data. TCP supports this, and it=
=E2=80=99s a way to tell the receiving system that this data has a higher p=
riority than the normal data. The receiver will receive the signal  <code>S=
IGURG</code> and it can then receive this data without first receiving all =
the rest of the normal data in the queue.</td>
</tr>
<tr class=3D"even">
<td> <code>MSG_DONTROUTE</code></td>
<td>Don=E2=80=99t send this data over a router, just keep it local.</td>
</tr>
<tr class=3D"odd">
<td> <code>MSG_DONTWAIT</code></td>
<td>If <code>send()</code> would block because outbound traffic is clogged,=
 have it return  <code>EAGAIN</code>. This is like a =E2=80=9Cenable  non-b=
locking just for this send.=E2=80=9D See the section on <a href=3D"https://=
beej.us/guide/bgnet/html/#blocking">blocking</a> for more details.</td>
</tr>
<tr class=3D"even">
<td> <code>MSG_NOSIGNAL</code></td>
<td>If you <code>send()</code> to a remote host which is no longer <code>re=
cv()</code>ing, you=E2=80=99ll typically get the signal  <code>SIGPIPE</cod=
e>. Adding this flag prevents that signal from being raised.</td>
</tr>
</tbody>
</table>
<h4 data-number=3D"9.21.0.3" id=3D"return-value-20"><span class=3D"header-s=
ection-number">9.21.0.3</span> Return Value</h4>
<p>Returns the number of bytes actually sent, or <code>-1</code> on error (=
and <code>errno</code> will be set accordingly). Note that the number of by=
tes actually sent might be less than the number you asked it to send! See t=
he section on <a href=3D"https://beej.us/guide/bgnet/html/#sendall">handlin=
g partial <code>send()</code>s</a> for a helper function to get around this=
.</p>
<p>Also, if the socket has been closed by either side, the process calling =
<code>send()</code> will get the signal <code>SIGPIPE</code>. (Unless <code=
>send()</code> was called with the <code>MSG_NOSIGNAL</code> flag.)</p>
<h4 data-number=3D"9.21.0.4" id=3D"example-20"><span class=3D"header-sectio=
n-number">9.21.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb128"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb128-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb128-1"></a><span class=3D"dt">int</=
span> spatula_count =3D <span class=3D"dv">3490</span>;</span>
<span id=3D"cb128-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-2">=
</a><span class=3D"dt">char</span> *secret_message =3D <span class=3D"st">"=
The Cheese is in The Toaster"</span>;</span>
<span id=3D"cb128-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-3">=
</a></span>
<span id=3D"cb128-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-4">=
</a><span class=3D"dt">int</span> stream_socket, dgram_socket;</span>
<span id=3D"cb128-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-5">=
</a><span class=3D"kw">struct</span> sockaddr_in dest;</span>
<span id=3D"cb128-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-6">=
</a><span class=3D"dt">int</span> temp;</span>
<span id=3D"cb128-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-7">=
</a></span>
<span id=3D"cb128-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-8">=
</a><span class=3D"co">// first with TCP stream sockets:</span></span>
<span id=3D"cb128-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-9">=
</a></span>
<span id=3D"cb128-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-10=
"></a><span class=3D"co">// assume sockets are made and connected</span></s=
pan>
<span id=3D"cb128-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-11=
"></a><span class=3D"co">//stream_socket =3D socket(...</span></span>
<span id=3D"cb128-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-12=
"></a><span class=3D"co">//connect(stream_socket, ...</span></span>
<span id=3D"cb128-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-13=
"></a></span>
<span id=3D"cb128-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-14=
"></a><span class=3D"co">// convert to network byte order</span></span>
<span id=3D"cb128-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-15=
"></a>temp =3D htonl(spatula_count);</span>
<span id=3D"cb128-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-16=
"></a><span class=3D"co">// send data normally:</span></span>
<span id=3D"cb128-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-17=
"></a>send(stream_socket, &amp;temp, <span class=3D"kw">sizeof</span> temp,=
 <span class=3D"dv">0</span>);</span>
<span id=3D"cb128-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-18=
"></a></span>
<span id=3D"cb128-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-19=
"></a><span class=3D"co">// send secret message out of band:</span></span>
<span id=3D"cb128-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-20=
"></a>send(stream_socket, secret_message, strlen(secret_message)+<span clas=
s=3D"dv">1</span>, MSG_OOB);</span>
<span id=3D"cb128-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-21=
"></a></span>
<span id=3D"cb128-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-22=
"></a><span class=3D"co">// now with UDP datagram sockets:</span></span>
<span id=3D"cb128-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-23=
"></a><span class=3D"co">//getaddrinfo(...</span></span>
<span id=3D"cb128-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-24=
"></a><span class=3D"co">//dest =3D ... // assume "dest" holds the address =
of the destination</span></span>
<span id=3D"cb128-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-25=
"></a><span class=3D"co">//dgram_socket =3D socket(...</span></span>
<span id=3D"cb128-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-26=
"></a></span>
<span id=3D"cb128-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-27=
"></a><span class=3D"co">// send secret message normally:</span></span>
<span id=3D"cb128-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-28=
"></a>sendto(dgram_socket, secret_message, strlen(secret_message)+<span cla=
ss=3D"dv">1</span>, <span class=3D"dv">0</span>, </span>
<span id=3D"cb128-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb128-29=
"></a>       (<span class=3D"kw">struct</span> sockaddr*)&amp;dest, <span c=
lass=3D"kw">sizeof</span> dest);</span></code></pre></div>
<h4 data-number=3D"9.21.0.5" id=3D"see-also-19"><span class=3D"header-secti=
on-number">9.21.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#recvman"><code>recv()</code=
></a>, <a href=3D"https://beej.us/guide/bgnet/html/#recvman"><code>recvfrom=
()</code></a></p>
<h2 data-number=3D"9.22" id=3D"shutdownman"><span class=3D"header-section-n=
umber">9.22</span> <code>shutdown()</code></h2>
<p>Stop further sends and receives on a socket</p>
<h4 data-number=3D"9.22.0.1" id=3D"synopsis-21"><span class=3D"header-secti=
on-number">9.22.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb129"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb129-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb129-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/socket.h&gt;</span></s=
pan>
<span id=3D"cb129-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb129-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb129-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb129-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
shutdown(<span class=3D"dt">int</span> s, <span class=3D"dt">int</span> how=
);</span></code></pre></div>
<h4 data-number=3D"9.22.0.2" id=3D"description-21"><span class=3D"header-se=
ction-number">9.22.0.2</span> Description</h4>
<p> That=E2=80=99s it! I=E2=80=99ve had it! No more <code>send()</code>s ar=
e allowed on this socket, but I still want to <code>recv()</code> data on i=
t! Or vice-versa! How can I do this?</p>
<p>When you <code>close()</code> a socket descriptor, it closes both sides =
of the socket for reading and writing, and frees the socket descriptor. If =
you just want to close one side or the other, you can use this <code>shutdo=
wn()</code> call.</p>
<p>As for parameters, <code>s</code> is obviously the socket you want to pe=
rform this action on, and what action that is can be specified with the <co=
de>how</code> parameter. How can be <code>SHUT_RD</code> to prevent further=
 <code>recv()</code>s, <code>SHUT_WR</code> to prohibit further <code>send(=
)</code>s, or <code>SHUT_RDWR</code> to do both.</p>
<p>Note that <code>shutdown()</code> doesn=E2=80=99t free up the socket des=
criptor, so you still have to eventually <code>close()</code> the socket ev=
en if it has been fully shut down.</p>
<p>This is a rarely used system call.</p>
<h4 data-number=3D"9.22.0.3" id=3D"return-value-21"><span class=3D"header-s=
ection-number">9.22.0.3</span> Return Value</h4>
<p>Returns zero on success, or <code>-1</code> on error (and <code>errno</c=
ode> will be set accordingly).</p>
<h4 data-number=3D"9.22.0.4" id=3D"example-21"><span class=3D"header-sectio=
n-number">9.22.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb130"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb130-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb130-1"></a><span class=3D"dt">int</=
span> s =3D socket(PF_INET, SOCK_STREAM, <span class=3D"dv">0</span>);</spa=
n>
<span id=3D"cb130-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb130-2">=
</a></span>
<span id=3D"cb130-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb130-3">=
</a><span class=3D"co">// ...do some send()s and stuff in here...</span></s=
pan>
<span id=3D"cb130-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb130-4">=
</a></span>
<span id=3D"cb130-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb130-5">=
</a><span class=3D"co">// and now that we're done, don't allow any more sen=
ds()s:</span></span>
<span id=3D"cb130-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb130-6">=
</a>shutdown(s, SHUT_WR);</span></code></pre></div>
<h4 data-number=3D"9.22.0.5" id=3D"see-also-20"><span class=3D"header-secti=
on-number">9.22.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#closeman"><code>close()</co=
de></a></p>
<h2 data-number=3D"9.23" id=3D"socketman"><span class=3D"header-section-num=
ber">9.23</span> <code>socket()</code></h2>
<p>Allocate a socket descriptor</p>
<h4 data-number=3D"9.23.0.1" id=3D"synopsis-22"><span class=3D"header-secti=
on-number">9.23.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb131"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb131-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb131-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;sys/types.h&gt;</span></sp=
an>
<span id=3D"cb131-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb131-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"pp">#include </=
span><span class=3D"im">&lt;sys/socket.h&gt;</span></span>
<span id=3D"cb131-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb131-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb131-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb131-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"dt">int</span> =
socket(<span class=3D"dt">int</span> domain, <span class=3D"dt">int</span> =
type, <span class=3D"dt">int</span> protocol);</span></code></pre></div>
<h4 data-number=3D"9.23.0.2" id=3D"description-22"><span class=3D"header-se=
ction-number">9.23.0.2</span> Description</h4>
<p> Returns a new socket descriptor that you can use to do sockety things w=
ith. This is generally the first call in the whopping process of writing a =
socket program, and you can use the result for subsequent calls to <code>li=
sten()</code>, <code>bind()</code>, <code>accept()</code>, or a variety of =
other functions.</p>
<p>In usual usage, you get the values for these parameters from a call to <=
code>getaddrinfo()</code>, as shown in the example below. But you can fill =
them in by hand if you really want to.</p>
<table>
<colgroup>
<col style=3D"width: 16%">
<col style=3D"width: 83%">
</colgroup>
<thead>
<tr class=3D"header">
<th>Macro</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr class=3D"odd">
<td><code>domain</code></td>
<td><code>domain</code> describes what kind of socket you=E2=80=99re intere=
sted in. This can, believe me, be a wide variety of things, but since this =
is a socket guide, it=E2=80=99s going to be  <code>PF_INET</code> for IPv4,=
 and <code>PF_INET6</code> for IPv6.</td>
</tr>
<tr class=3D"even">
<td><code>type</code></td>
<td>Also, the <code>type</code> parameter can be a number of things, but yo=
u=E2=80=99ll probably be setting it to either  <code>SOCK_STREAM</code> for=
 reliable  TCP sockets (<code>send()</code>, <code>recv()</code>) or  <code=
>SOCK_DGRAM</code> for unreliable fast  UDP sockets (<code>sendto()</code>,=
 <code>recvfrom()</code>). (Another interesting socket type is  <code>SOCK_=
RAW</code> which can be used to construct packets by hand. It=E2=80=99s pre=
tty cool.)</td>
</tr>
<tr class=3D"odd">
<td><code>protocol</code></td>
<td>Finally, the <code>protocol</code> parameter tells which protocol to us=
e with a certain socket type. Like I=E2=80=99ve already said, for instance,=
 <code>SOCK_STREAM</code> uses TCP. Fortunately for you, when using <code>S=
OCK_STREAM</code> or <code>SOCK_DGRAM</code>, you can just set the protocol=
 to 0, and it=E2=80=99ll use the proper protocol automatically. Otherwise, =
you can use  <code>getprotobyname()</code> to look up the proper protocol n=
umber.</td>
</tr>
</tbody>
</table>
<h4 data-number=3D"9.23.0.3" id=3D"return-value-22"><span class=3D"header-s=
ection-number">9.23.0.3</span> Return Value</h4>
<p>The new socket descriptor to be used in subsequent calls, or <code>-1</c=
ode> on error (and <code>errno</code> will be set accordingly).</p>
<h4 data-number=3D"9.23.0.4" id=3D"example-22"><span class=3D"header-sectio=
n-number">9.23.0.4</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb132"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb132-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb132-1"></a><span class=3D"kw">struc=
t</span> addrinfo hints, *res;</span>
<span id=3D"cb132-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-2">=
</a><span class=3D"dt">int</span> sockfd;</span>
<span id=3D"cb132-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-3">=
</a></span>
<span id=3D"cb132-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-4">=
</a><span class=3D"co">// first, load up address structs with getaddrinfo()=
:</span></span>
<span id=3D"cb132-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-5">=
</a></span>
<span id=3D"cb132-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-6">=
</a>memset(&amp;hints, <span class=3D"dv">0</span>, <span class=3D"kw">size=
of</span> hints);</span>
<span id=3D"cb132-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-7">=
</a>hints.ai_family =3D AF_UNSPEC;     <span class=3D"co">// AF_INET, AF_IN=
ET6, or AF_UNSPEC</span></span>
<span id=3D"cb132-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-8">=
</a>hints.ai_socktype =3D SOCK_STREAM; <span class=3D"co">// SOCK_STREAM or=
 SOCK_DGRAM</span></span>
<span id=3D"cb132-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-9">=
</a></span>
<span id=3D"cb132-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-10=
"></a>getaddrinfo(<span class=3D"st">"www.example.com"</span>, <span class=
=3D"st">"3490"</span>, &amp;hints, &amp;res);</span>
<span id=3D"cb132-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-11=
"></a></span>
<span id=3D"cb132-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-12=
"></a><span class=3D"co">// make a socket using the information gleaned fro=
m getaddrinfo():</span></span>
<span id=3D"cb132-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb132-13=
"></a>sockfd =3D socket(res-&gt;ai_family, res-&gt;ai_socktype, res-&gt;ai_=
protocol);</span></code></pre></div>
<h4 data-number=3D"9.23.0.5" id=3D"see-also-21"><span class=3D"header-secti=
on-number">9.23.0.5</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#acceptman"><code>accept()</=
code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#bindman"><code>bind=
()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#getaddrinfoman"=
><code>getaddrinfo()</code></a>, <a href=3D"https://beej.us/guide/bgnet/htm=
l/#listenman"><code>listen()</code></a></p>
<h2 data-number=3D"9.24" id=3D"structsockaddrman"><span class=3D"header-sec=
tion-number">9.24</span> <code>struct sockaddr</code> and pals</h2>
<p>Structures for handling internet addresses</p>
<h4 data-number=3D"9.24.0.1" id=3D"synopsis-23"><span class=3D"header-secti=
on-number">9.24.0.1</span> Synopsis</h4>
<div class=3D"sourceCode" id=3D"cb133"><pre class=3D"sourceCode c"><code cl=
ass=3D"sourceCode c"><span id=3D"cb133-1"><a href=3D"https://beej.us/guide/=
bgnet/html/#cb133-1" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span cla=
ss=3D"pp">#include </span><span class=3D"im">&lt;netinet/in.h&gt;</span></s=
pan>
<span id=3D"cb133-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-2" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-3" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"co">// All poin=
ters to socket address structures are often cast to pointers</span></span>
<span id=3D"cb133-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-4" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"co">// to this =
type before use in various functions and system calls:</span></span>
<span id=3D"cb133-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-5" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-6" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</spa=
n> sockaddr {</span>
<span id=3D"cb133-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-7" =
aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">unsigne=
d</span> <span class=3D"dt">short</span>    sa_family;    <span class=3D"co=
">// address family, AF_xxx</span></span>
<span id=3D"cb133-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-8" =
aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">char</s=
pan>              sa_data[<span class=3D"dv">14</span>];  <span class=3D"co=
">// 14 bytes of protocol address</span></span>
<span id=3D"cb133-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-9" =
aria-hidden=3D"true" tabindex=3D"-1"></a>    };</span>
<span id=3D"cb133-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-10=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-11=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-12"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-12=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"co">// IPv4 A=
F_INET sockets:</span></span>
<span id=3D"cb133-13"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-13=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-14"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-14=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</s=
pan> sockaddr_in {</span>
<span id=3D"cb133-15"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-15=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">short=
</span>            sin_family;   <span class=3D"co">// e.g. AF_INET, AF_INE=
T6</span></span>
<span id=3D"cb133-16"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-16=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">unsig=
ned</span> <span class=3D"dt">short</span>   sin_port;     <span class=3D"c=
o">// e.g. htons(3490)</span></span>
<span id=3D"cb133-17"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-17=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"kw">struc=
t</span> in_addr   sin_addr;     <span class=3D"co">// see struct in_addr, =
below</span></span>
<span id=3D"cb133-18"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-18=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">char<=
/span>             sin_zero[<span class=3D"dv">8</span>];  <span class=3D"c=
o">// zero this if you want to</span></span>
<span id=3D"cb133-19"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-19=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    };</span>
<span id=3D"cb133-20"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-20=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-21"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-21=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</s=
pan> in_addr {</span>
<span id=3D"cb133-22"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-22=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">unsig=
ned</span> <span class=3D"dt">long</span> s_addr;          <span class=3D"c=
o">// load with inet_pton()</span></span>
<span id=3D"cb133-23"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-23=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    };</span>
<span id=3D"cb133-24"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-24=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-25"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-25=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-26"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-26=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"co">// IPv6 A=
F_INET6 sockets:</span></span>
<span id=3D"cb133-27"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-27=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-28"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-28=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</s=
pan> sockaddr_in6 {</span>
<span id=3D"cb133-29"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-29=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        u_int16_t       sin6_fam=
ily;   <span class=3D"co">// address family, AF_INET6</span></span>
<span id=3D"cb133-30"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-30=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        u_int16_t       sin6_por=
t;     <span class=3D"co">// port number, Network Byte Order</span></span>
<span id=3D"cb133-31"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-31=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        u_int32_t       sin6_flo=
winfo; <span class=3D"co">// IPv6 flow information</span></span>
<span id=3D"cb133-32"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-32=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"kw">struc=
t</span> in6_addr sin6_addr;     <span class=3D"co">// IPv6 address</span><=
/span>
<span id=3D"cb133-33"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-33=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        u_int32_t       sin6_sco=
pe_id; <span class=3D"co">// Scope ID</span></span>
<span id=3D"cb133-34"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-34=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    };</span>
<span id=3D"cb133-35"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-35=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-36"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-36=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</s=
pan> in6_addr {</span>
<span id=3D"cb133-37"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-37=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">unsig=
ned</span> <span class=3D"dt">char</span>   s6_addr[<span class=3D"dv">16</=
span>];   <span class=3D"co">// load with inet_pton()</span></span>
<span id=3D"cb133-38"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-38=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    };</span>
<span id=3D"cb133-39"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-39=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-40"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-40=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-41"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-41=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"co">// Genera=
l socket address holding structure, big enough to hold either</span></span>
<span id=3D"cb133-42"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-42=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"co">// struct=
 sockaddr_in or struct sockaddr_in6 data:</span></span>
<span id=3D"cb133-43"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-43=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-44"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-44=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    <span class=3D"kw">struct</s=
pan> sockaddr_storage {</span>
<span id=3D"cb133-45"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-45=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        sa_family_t  ss_family; =
    <span class=3D"co">// address family</span></span>
<span id=3D"cb133-46"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-46=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    </span>
<span id=3D"cb133-47"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-47=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"co">// al=
l this is padding, implementation specific, ignore it:</span></span>
<span id=3D"cb133-48"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-48=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">char<=
/span>      __ss_pad1[_SS_PAD1SIZE];</span>
<span id=3D"cb133-49"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-49=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">int64=
_t</span>   __ss_align;</span>
<span id=3D"cb133-50"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-50=
" aria-hidden=3D"true" tabindex=3D"-1"></a>        <span class=3D"dt">char<=
/span>      __ss_pad2[_SS_PAD2SIZE];</span>
<span id=3D"cb133-51"><a href=3D"https://beej.us/guide/bgnet/html/#cb133-51=
" aria-hidden=3D"true" tabindex=3D"-1"></a>    };</span></code></pre></div>
<h4 data-number=3D"9.24.0.2" id=3D"description-23"><span class=3D"header-se=
ction-number">9.24.0.2</span> Description</h4>
<p>  These are the basic structures for all syscalls and functions that dea=
l with internet addresses. Often you=E2=80=99ll use <code>getaddrinfo()</co=
de> to fill these structures out, and then will read them when you have to.=
</p>
<p>In memory, the <code>struct sockaddr_in</code> and <code>struct sockaddr=
_in6</code> share the same beginning structure as  <code>struct sockaddr</c=
ode>, and you can freely cast the pointer of one type to the other without =
any harm, except the possible end of the universe.</p>
<p>Just kidding on that end-of-the-universe thing=E2=80=A6if the universe d=
oes end when you cast a <code>struct sockaddr_in*</code> to a <code>struct =
sockaddr*</code>, I promise you it=E2=80=99s pure coincidence and you shoul=
dn=E2=80=99t even worry about it.</p>
<p>So, with that in mind, remember that whenever a function says it takes a=
 <code>struct sockaddr*</code> you can cast your <code>struct sockaddr_in*<=
/code>, <code>struct sockaddr_in6*</code>, or <code>struct sockadd_storage*=
</code> to that type with ease and safety.</p>
<p><code>struct sockaddr_in</code> is the structure used with IPv4 addresse=
s (e.g. =E2=80=9C192.0.2.10=E2=80=9D). It holds an address family (<code>AF=
_INET</code>), a port in <code>sin_port</code>, and an IPv4 address in <cod=
e>sin_addr</code>.</p>
<p>There=E2=80=99s also this <code>sin_zero</code> field in <code>struct so=
ckaddr_in</code> which some people claim must be set to zero. Other people =
don=E2=80=99t claim anything about it (the Linux documentation doesn=E2=80=
=99t even mention it at all), and setting it to zero doesn=E2=80=99t seem t=
o be actually necessary. So, if you feel like it, set it to zero using <cod=
e>memset()</code>.</p>
<p>Now, that <code>struct in_addr</code> is a weird beast on different syst=
ems. Sometimes it=E2=80=99s a crazy <code>union</code> with all kinds of <c=
ode>#define</code>s and other nonsense. But what you should do is only use =
the <code>s_addr</code> field in this structure, because many systems only =
implement that one.</p>
<p><code>struct sockadd_in6</code> and <code>struct in6_addr</code> are ver=
y similar, except they=E2=80=99re used for IPv6.</p>
<p><code>struct sockaddr_storage</code> is a struct you can pass to <code>a=
ccept()</code> or <code>recvfrom()</code> when you=E2=80=99re trying to wri=
te IP version-agnostic code and you don=E2=80=99t know if the new address i=
s going to be IPv4 or IPv6. The <code>struct sockaddr_storage</code> struct=
ure is large enough to hold both types, unlike the original small <code>str=
uct sockaddr</code>.</p>
<h4 data-number=3D"9.24.0.3" id=3D"example-23"><span class=3D"header-sectio=
n-number">9.24.0.3</span> Example</h4>
<div class=3D"sourceCode" id=3D"cb134"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb134-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb134-1"></a><span class=3D"co">// IP=
v4:</span></span>
<span id=3D"cb134-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-2">=
</a></span>
<span id=3D"cb134-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-3">=
</a><span class=3D"kw">struct</span> sockaddr_in ip4addr;</span>
<span id=3D"cb134-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-4">=
</a><span class=3D"dt">int</span> s;</span>
<span id=3D"cb134-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-5">=
</a></span>
<span id=3D"cb134-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-6">=
</a>ip4addr.sin_family =3D AF_INET;</span>
<span id=3D"cb134-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-7">=
</a>ip4addr.sin_port =3D htons(<span class=3D"dv">3490</span>);</span>
<span id=3D"cb134-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-8">=
</a>inet_pton(AF_INET, <span class=3D"st">"10.0.0.1"</span>, &amp;ip4addr.s=
in_addr);</span>
<span id=3D"cb134-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-9">=
</a></span>
<span id=3D"cb134-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-10=
"></a>s =3D socket(PF_INET, SOCK_STREAM, <span class=3D"dv">0</span>);</spa=
n>
<span id=3D"cb134-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb134-11=
"></a>bind(s, (<span class=3D"kw">struct</span> sockaddr*)&amp;ip4addr, <sp=
an class=3D"kw">sizeof</span> ip4addr);</span></code></pre></div>
<div class=3D"sourceCode" id=3D"cb135"><pre class=3D"sourceCode numberSourc=
e c numberLines"><code class=3D"sourceCode c"><span id=3D"cb135-1"><a href=
=3D"https://beej.us/guide/bgnet/html/#cb135-1"></a><span class=3D"co">// IP=
v6:</span></span>
<span id=3D"cb135-2"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-2">=
</a></span>
<span id=3D"cb135-3"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-3">=
</a><span class=3D"kw">struct</span> sockaddr_in6 ip6addr;</span>
<span id=3D"cb135-4"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-4">=
</a><span class=3D"dt">int</span> s;</span>
<span id=3D"cb135-5"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-5">=
</a></span>
<span id=3D"cb135-6"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-6">=
</a>ip6addr.sin6_family =3D AF_INET6;</span>
<span id=3D"cb135-7"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-7">=
</a>ip6addr.sin6_port =3D htons(<span class=3D"dv">4950</span>);</span>
<span id=3D"cb135-8"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-8">=
</a>inet_pton(AF_INET6, <span class=3D"st">"2001:db8:8714:3a90::12"</span>,=
 &amp;ip6addr.sin6_addr);</span>
<span id=3D"cb135-9"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-9">=
</a></span>
<span id=3D"cb135-10"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-10=
"></a>s =3D socket(PF_INET6, SOCK_STREAM, <span class=3D"dv">0</span>);</sp=
an>
<span id=3D"cb135-11"><a href=3D"https://beej.us/guide/bgnet/html/#cb135-11=
"></a>bind(s, (<span class=3D"kw">struct</span> sockaddr*)&amp;ip6addr, <sp=
an class=3D"kw">sizeof</span> ip6addr);</span></code></pre></div>
<h4 data-number=3D"9.24.0.4" id=3D"see-also-22"><span class=3D"header-secti=
on-number">9.24.0.4</span> See Also</h4>
<p><a href=3D"https://beej.us/guide/bgnet/html/#acceptman"><code>accept()</=
code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#bindman"><code>bind=
()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#connectman"><co=
de>connect()</code></a>, <a href=3D"https://beej.us/guide/bgnet/html/#inet_=
ntoaman"><code>inet_aton()</code></a>, <a href=3D"https://beej.us/guide/bgn=
et/html/#inet_ntoaman"><code>inet_ntoa()</code></a></p>
<h1 data-number=3D"10" id=3D"more-references"><span class=3D"header-section=
-number">10</span> More References</h1>
<p>You=E2=80=99ve come this far, and now you=E2=80=99re screaming for more!=
 Where else can you go to learn more about all this stuff?</p>
<h2 data-number=3D"10.1" id=3D"books"><span class=3D"header-section-number"=
>10.1</span> Books</h2>
<p>  For old-school actual hold-it-in-your-hand pulp paper books, try some =
of the following excellent books. These redirect to affiliate links with a =
popular bookseller, giving me nice kickbacks. If you=E2=80=99re merely feel=
ing generous, you can paypal a donation to <a href=3D"mailto:beej@beej.us">=
<code>beej@beej.us</code></a>. <code>:-)</code></p>
<p><strong>Unix Network Programming, volumes 1-2</strong> by W. Richard Ste=
vens. Published by Addison-Wesley Professional and Prentice Hall. ISBNs for=
 volumes 1-2: <a href=3D"https://beej.us/guide/url/unixnet1">978-0131411555=
</a><a href=3D"https://beej.us/guide/bgnet/html/#fn49" class=3D"footnote-re=
f" id=3D"fnref49" role=3D"doc-noteref"><sup>49</sup></a>, <a href=3D"https:=
//beej.us/guide/url/unixnet2">978-0130810816</a><a href=3D"https://beej.us/=
guide/bgnet/html/#fn50" class=3D"footnote-ref" id=3D"fnref50" role=3D"doc-n=
oteref"><sup>50</sup></a>.</p>
<p><strong>Internetworking with TCP/IP, volume I</strong> by Douglas E. Com=
er. Published by Pearson. ISBN <a href=3D"https://beej.us/guide/url/intertc=
p1">978-0136085300</a><a href=3D"https://beej.us/guide/bgnet/html/#fn51" cl=
ass=3D"footnote-ref" id=3D"fnref51" role=3D"doc-noteref"><sup>51</sup></a>.=
</p>
<p><strong>TCP/IP Illustrated, volumes 1-3</strong> by W. Richard Stevens a=
nd Gary R. Wright. Published by Addison Wesley. ISBNs for volumes 1, 2, and=
 3 (and a 3-volume set): <a href=3D"https://beej.us/guide/url/tcpi1">978-02=
01633467</a><a href=3D"https://beej.us/guide/bgnet/html/#fn52" class=3D"foo=
tnote-ref" id=3D"fnref52" role=3D"doc-noteref"><sup>52</sup></a>, <a href=
=3D"https://beej.us/guide/url/tcpi2">978-0201633542</a><a href=3D"https://b=
eej.us/guide/bgnet/html/#fn53" class=3D"footnote-ref" id=3D"fnref53" role=
=3D"doc-noteref"><sup>53</sup></a>, <a href=3D"https://beej.us/guide/url/tc=
pi3">978-0201634952</a><a href=3D"https://beej.us/guide/bgnet/html/#fn54" c=
lass=3D"footnote-ref" id=3D"fnref54" role=3D"doc-noteref"><sup>54</sup></a>=
, (<a href=3D"https://beej.us/guide/url/tcpi123">978-0201776317</a><a href=
=3D"https://beej.us/guide/bgnet/html/#fn55" class=3D"footnote-ref" id=3D"fn=
ref55" role=3D"doc-noteref"><sup>55</sup></a>).</p>
<p><strong>TCP/IP Network Administration</strong> by Craig Hunt. Published =
by O=E2=80=99Reilly &amp; Associates, Inc. ISBN <a href=3D"https://beej.us/=
guide/url/tcpna">978-0596002978</a><a href=3D"https://beej.us/guide/bgnet/h=
tml/#fn56" class=3D"footnote-ref" id=3D"fnref56" role=3D"doc-noteref"><sup>=
56</sup></a>.</p>
<p><strong>Advanced Programming in the UNIX Environment</strong> by W. Rich=
ard Stevens. Published by Addison Wesley. ISBN <a href=3D"https://beej.us/g=
uide/url/advunix">978-0321637734</a><a href=3D"https://beej.us/guide/bgnet/=
html/#fn57" class=3D"footnote-ref" id=3D"fnref57" role=3D"doc-noteref"><sup=
>57</sup></a>.</p>
<h2 data-number=3D"10.2" id=3D"web-references"><span class=3D"header-sectio=
n-number">10.2</span> Web References</h2>
<p> On the web:</p>
<p><strong><a href=3D"https://cis.temple.edu/~giorgio/old/cis307s96/reading=
s/docs/sockets.html">BSD Sockets: A Quick And Dirty Primer</a><a href=3D"ht=
tps://beej.us/guide/bgnet/html/#fn58" class=3D"footnote-ref" id=3D"fnref58"=
 role=3D"doc-noteref"><sup>58</sup></a></strong> (Unix system programming i=
nfo, too!)</p>
<p><strong><a href=3D"https://developerweb.net/?f=3D70">The Unix Socket FAQ=
</a><a href=3D"https://beej.us/guide/bgnet/html/#fn59" class=3D"footnote-re=
f" id=3D"fnref59" role=3D"doc-noteref"><sup>59</sup></a></strong></p>
<p><strong><a href=3D"http://www.faqs.org/faqs/internet/tcp-ip/tcp-ip-faq/p=
art1/">TCP/IP FAQ</a><a href=3D"https://beej.us/guide/bgnet/html/#fn60" cla=
ss=3D"footnote-ref" id=3D"fnref60" role=3D"doc-noteref"><sup>60</sup></a></=
strong></p>
<p><strong><a href=3D"https://tangentsoft.net/wskfaq/">The Winsock FAQ</a><=
a href=3D"https://beej.us/guide/bgnet/html/#fn61" class=3D"footnote-ref" id=
=3D"fnref61" role=3D"doc-noteref"><sup>61</sup></a></strong></p>
<p>And here are some relevant Wikipedia pages:</p>
<p><strong><a href=3D"https://en.wikipedia.org/wiki/Berkeley_sockets">Berke=
ley Sockets</a><a href=3D"https://beej.us/guide/bgnet/html/#fn62" class=3D"=
footnote-ref" id=3D"fnref62" role=3D"doc-noteref"><sup>62</sup></a></strong=
></p>
<p><strong><a href=3D"https://en.wikipedia.org/wiki/Internet_Protocol">Inte=
rnet Protocol (IP)</a><a href=3D"https://beej.us/guide/bgnet/html/#fn63" cl=
ass=3D"footnote-ref" id=3D"fnref63" role=3D"doc-noteref"><sup>63</sup></a><=
/strong></p>
<p><strong><a href=3D"https://en.wikipedia.org/wiki/Transmission_Control_Pr=
otocol">Transmission Control Protocol (TCP)</a><a href=3D"https://beej.us/g=
uide/bgnet/html/#fn64" class=3D"footnote-ref" id=3D"fnref64" role=3D"doc-no=
teref"><sup>64</sup></a></strong></p>
<p><strong><a href=3D"https://en.wikipedia.org/wiki/User_Datagram_Protocol"=
>User Datagram Protocol (UDP)</a><a href=3D"https://beej.us/guide/bgnet/htm=
l/#fn65" class=3D"footnote-ref" id=3D"fnref65" role=3D"doc-noteref"><sup>65=
</sup></a></strong></p>
<p><strong><a href=3D"https://en.wikipedia.org/wiki/Client-server">Client-S=
erver</a><a href=3D"https://beej.us/guide/bgnet/html/#fn66" class=3D"footno=
te-ref" id=3D"fnref66" role=3D"doc-noteref"><sup>66</sup></a></strong></p>
<p><strong><a href=3D"https://en.wikipedia.org/wiki/Serialization">Serializ=
ation</a><a href=3D"https://beej.us/guide/bgnet/html/#fn67" class=3D"footno=
te-ref" id=3D"fnref67" role=3D"doc-noteref"><sup>67</sup></a></strong> (pac=
king and unpacking data)</p>
<h2 data-number=3D"10.3" id=3D"rfcs"><span class=3D"header-section-number">=
10.3</span> RFCs</h2>
<p></p>
<p><a href=3D"https://www.rfc-editor.org/">RFCs</a><a href=3D"https://beej.=
us/guide/bgnet/html/#fn68" class=3D"footnote-ref" id=3D"fnref68" role=3D"do=
c-noteref"><sup>68</sup></a>=E2=80=94the real dirt! These are documents tha=
t describe assigned numbers, programming APIs, and protocols that are used =
on the Internet. I=E2=80=99ve included links to a few of them here for your=
 enjoyment, so grab a bucket of popcorn and put on your thinking cap:</p>
<p><strong><a href=3D"https://tools.ietf.org/html/rfc1">RFC 1</a><a href=3D=
"https://beej.us/guide/bgnet/html/#fn69" class=3D"footnote-ref" id=3D"fnref=
69" role=3D"doc-noteref"><sup>69</sup></a></strong> =E2=80=94The First RFC;=
 this gives you an idea of what the =E2=80=9CInternet=E2=80=9D was like jus=
t as it was coming to life, and an insight into how it was being designed f=
rom the ground up. (This RFC is completely obsolete, obviously!)</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc768">RFC 768</a><a hr=
ef=3D"https://beej.us/guide/bgnet/html/#fn70" class=3D"footnote-ref" id=3D"=
fnref70" role=3D"doc-noteref"><sup>70</sup></a></strong> =E2=80=94The User =
Datagram Protocol (UDP)</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc791">RFC 791</a><a hr=
ef=3D"https://beej.us/guide/bgnet/html/#fn71" class=3D"footnote-ref" id=3D"=
fnref71" role=3D"doc-noteref"><sup>71</sup></a></strong> =E2=80=94The Inter=
net Protocol (IP)</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc793">RFC 793</a><a hr=
ef=3D"https://beej.us/guide/bgnet/html/#fn72" class=3D"footnote-ref" id=3D"=
fnref72" role=3D"doc-noteref"><sup>72</sup></a></strong> =E2=80=94The Trans=
mission Control Protocol (TCP)</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc854">RFC 854</a><a hr=
ef=3D"https://beej.us/guide/bgnet/html/#fn73" class=3D"footnote-ref" id=3D"=
fnref73" role=3D"doc-noteref"><sup>73</sup></a></strong> =E2=80=94The Telne=
t Protocol</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc959">RFC 959</a><a hr=
ef=3D"https://beej.us/guide/bgnet/html/#fn74" class=3D"footnote-ref" id=3D"=
fnref74" role=3D"doc-noteref"><sup>74</sup></a></strong> =E2=80=94File Tran=
sfer Protocol (FTP)</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc1350">RFC 1350</a><a =
href=3D"https://beej.us/guide/bgnet/html/#fn75" class=3D"footnote-ref" id=
=3D"fnref75" role=3D"doc-noteref"><sup>75</sup></a></strong> =E2=80=94The T=
rivial File Transfer Protocol (TFTP)</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc1459">RFC 1459</a><a =
href=3D"https://beej.us/guide/bgnet/html/#fn76" class=3D"footnote-ref" id=
=3D"fnref76" role=3D"doc-noteref"><sup>76</sup></a></strong> =E2=80=94Inter=
net Relay Chat Protocol (IRC)</p>
<p><strong><a href=3D"https://tools.ietf.org/html/rfc1918">RFC 1918</a><a h=
ref=3D"https://beej.us/guide/bgnet/html/#fn77" class=3D"footnote-ref" id=3D=
"fnref77" role=3D"doc-noteref"><sup>77</sup></a></strong> =E2=80=94Address =
Allocation for Private Internets</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc2131">RFC 2131</a><a =
href=3D"https://beej.us/guide/bgnet/html/#fn78" class=3D"footnote-ref" id=
=3D"fnref78" role=3D"doc-noteref"><sup>78</sup></a></strong> =E2=80=94Dynam=
ic Host Configuration Protocol (DHCP)</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc2616">RFC 2616</a><a =
href=3D"https://beej.us/guide/bgnet/html/#fn79" class=3D"footnote-ref" id=
=3D"fnref79" role=3D"doc-noteref"><sup>79</sup></a></strong> =E2=80=94Hyper=
text Transfer Protocol (HTTP)</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc2821">RFC 2821</a><a =
href=3D"https://beej.us/guide/bgnet/html/#fn80" class=3D"footnote-ref" id=
=3D"fnref80" role=3D"doc-noteref"><sup>80</sup></a></strong> =E2=80=94Simpl=
e Mail Transfer Protocol (SMTP)</p>
<p><strong><a href=3D"https://tools.ietf.org/html/rfc3330">RFC 3330</a><a h=
ref=3D"https://beej.us/guide/bgnet/html/#fn81" class=3D"footnote-ref" id=3D=
"fnref81" role=3D"doc-noteref"><sup>81</sup></a></strong> =E2=80=94Special-=
Use IPv4 Addresses</p>
<p><strong><a href=3D"https://tools.ietf.org/html/rfc3493">RFC 3493</a><a h=
ref=3D"https://beej.us/guide/bgnet/html/#fn82" class=3D"footnote-ref" id=3D=
"fnref82" role=3D"doc-noteref"><sup>82</sup></a></strong> =E2=80=94Basic So=
cket Interface Extensions for IPv6</p>
<p><strong><a href=3D"https://tools.ietf.org/html/rfc3542">RFC 3542</a><a h=
ref=3D"https://beej.us/guide/bgnet/html/#fn83" class=3D"footnote-ref" id=3D=
"fnref83" role=3D"doc-noteref"><sup>83</sup></a></strong> =E2=80=94Advanced=
 Sockets Application Program Interface (API) for IPv6</p>
<p><strong><a href=3D"https://tools.ietf.org/html/rfc3849">RFC 3849</a><a h=
ref=3D"https://beej.us/guide/bgnet/html/#fn84" class=3D"footnote-ref" id=3D=
"fnref84" role=3D"doc-noteref"><sup>84</sup></a></strong> =E2=80=94IPv6 Add=
ress Prefix Reserved for Documentation</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc3920">RFC 3920</a><a =
href=3D"https://beej.us/guide/bgnet/html/#fn85" class=3D"footnote-ref" id=
=3D"fnref85" role=3D"doc-noteref"><sup>85</sup></a></strong> =E2=80=94Exten=
sible Messaging and Presence Protocol (XMPP)</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc3977">RFC 3977</a><a =
href=3D"https://beej.us/guide/bgnet/html/#fn86" class=3D"footnote-ref" id=
=3D"fnref86" role=3D"doc-noteref"><sup>86</sup></a></strong> =E2=80=94Netwo=
rk News Transfer Protocol (NNTP)</p>
<p><strong><a href=3D"https://tools.ietf.org/html/rfc4193">RFC 4193</a><a h=
ref=3D"https://beej.us/guide/bgnet/html/#fn87" class=3D"footnote-ref" id=3D=
"fnref87" role=3D"doc-noteref"><sup>87</sup></a></strong> =E2=80=94Unique L=
ocal IPv6 Unicast Addresses</p>
<p> <strong><a href=3D"https://tools.ietf.org/html/rfc4506">RFC 4506</a><a =
href=3D"https://beej.us/guide/bgnet/html/#fn88" class=3D"footnote-ref" id=
=3D"fnref88" role=3D"doc-noteref"><sup>88</sup></a></strong> =E2=80=94Exter=
nal Data Representation Standard (XDR)</p>
<p>The IETF has a nice online tool for <a href=3D"https://tools.ietf.org/rf=
c/">searching and browsing RFCs</a><a href=3D"https://beej.us/guide/bgnet/h=
tml/#fn89" class=3D"footnote-ref" id=3D"fnref89" role=3D"doc-noteref"><sup>=
89</sup></a>.</p>
<section class=3D"footnotes" role=3D"doc-endnotes">
<hr>
<ol>
<li id=3D"fn1" role=3D"doc-endnote"><p>https://www.linux.com/<a href=3D"htt=
ps://beej.us/guide/bgnet/html/#fnref1" class=3D"footnote-back" role=3D"doc-=
backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn2" role=3D"doc-endnote"><p>https://bsd.org/<a href=3D"https://b=
eej.us/guide/bgnet/html/#fnref2" class=3D"footnote-back" role=3D"doc-backli=
nk">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn3" role=3D"doc-endnote"><p>https://cygwin.com/<a href=3D"https:=
//beej.us/guide/bgnet/html/#fnref3" class=3D"footnote-back" role=3D"doc-bac=
klink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn4" role=3D"doc-endnote"><p>https://docs.microsoft.com/en-us/win=
dows/wsl/about<a href=3D"https://beej.us/guide/bgnet/html/#fnref4" class=3D=
"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn5" role=3D"doc-endnote"><p>https://tangentsoft.net/wskfaq/<a hr=
ef=3D"https://beej.us/guide/bgnet/html/#fnref5" class=3D"footnote-back" rol=
e=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn6" role=3D"doc-endnote"><p>http://www.catb.org/~esr/faqs/smart-=
questions.html<a href=3D"https://beej.us/guide/bgnet/html/#fnref6" class=3D=
"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn7" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/examples=
/telnot.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref7" class=3D"foot=
note-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn8" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc854<a=
 href=3D"https://beej.us/guide/bgnet/html/#fnref8" class=3D"footnote-back" =
role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn9" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc793<a=
 href=3D"https://beej.us/guide/bgnet/html/#fnref9" class=3D"footnote-back" =
role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn10" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc791<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref10" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn11" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc768<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref11" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn12" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc791<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref12" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn13" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/Vint_=
Cerf<a href=3D"https://beej.us/guide/bgnet/html/#fnref13" class=3D"footnote=
-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn14" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/ELIZA=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref14" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn15" role=3D"doc-endnote"><p>https://www.iana.org/assignments/po=
rt-numbers<a href=3D"https://beej.us/guide/bgnet/html/#fnref15" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn16" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/Doom_=
(1993_video_game)<a href=3D"https://beej.us/guide/bgnet/html/#fnref16" clas=
s=3D"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn17" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/Wilfo=
rd_Brimley<a href=3D"https://beej.us/guide/bgnet/html/#fnref17" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn18" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc1918=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref18" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn19" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc4193=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref19" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn20" role=3D"doc-endnote"><p>https://www.iana.org/assignments/po=
rt-numbers<a href=3D"https://beej.us/guide/bgnet/html/#fnref20" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn21" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/showip.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref21" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn22" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc1413=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref22" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn23" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/server.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref23" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn24" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/client.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref24" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn25" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/listener.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref25" class=3D"=
footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn26" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/talker.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref26" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn27" role=3D"doc-endnote"><p>https://libevent.org/<a href=3D"htt=
ps://beej.us/guide/bgnet/html/#fnref27" class=3D"footnote-back" role=3D"doc=
-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn28" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/poll.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref28" class=3D"foot=
note-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn29" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/pollserver.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref29" class=
=3D"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn30" role=3D"doc-endnote"><p>https://libevent.org/<a href=3D"htt=
ps://beej.us/guide/bgnet/html/#fnref30" class=3D"footnote-back" role=3D"doc=
-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn31" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/select.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref31" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn32" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/selectserver.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref32" class=
=3D"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn33" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/Inter=
net_Relay_Chat<a href=3D"https://beej.us/guide/bgnet/html/#fnref33" class=
=3D"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn34" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/pack.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref34" class=3D"foot=
note-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn35" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/IEEE_=
754<a href=3D"https://beej.us/guide/bgnet/html/#fnref35" class=3D"footnote-=
back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn36" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/ieee754.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref36" class=3D"f=
ootnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn37" role=3D"doc-endnote"><p>https://beej.us/guide/url/tpop<a hr=
ef=3D"https://beej.us/guide/bgnet/html/#fnref37" class=3D"footnote-back" ro=
le=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn38" role=3D"doc-endnote"><p>https://github.com/protobuf-c/proto=
buf-c<a href=3D"https://beej.us/guide/bgnet/html/#fnref38" class=3D"footnot=
e-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn39" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/pack2.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref39" class=3D"foo=
tnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn40" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/pack2.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref40" class=3D"foo=
tnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn41" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc4506=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref41" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn42" role=3D"doc-endnote"><p>https://beej.us/guide/bgnet/example=
s/broadcaster.c<a href=3D"https://beej.us/guide/bgnet/html/#fnref42" class=
=3D"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn43" role=3D"doc-endnote"><p>http://www.unpbook.com/src.html<a h=
ref=3D"https://beej.us/guide/bgnet/html/#fnref43" class=3D"footnote-back" r=
ole=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn44" role=3D"doc-endnote"><p>http://www.unpbook.com/src.html<a h=
ref=3D"https://beej.us/guide/bgnet/html/#fnref44" class=3D"footnote-back" r=
ole=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn45" role=3D"doc-endnote"><p>https://www.openssl.org/<a href=3D"=
https://beej.us/guide/bgnet/html/#fnref45" class=3D"footnote-back" role=3D"=
doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn46" role=3D"doc-endnote"><p>https://stackoverflow.com/questions=
/21323023/<a href=3D"https://beej.us/guide/bgnet/html/#fnref46" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn47" role=3D"doc-endnote"><p>https://www.iana.org/assignments/po=
rt-numbers<a href=3D"https://beej.us/guide/bgnet/html/#fnref47" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn48" role=3D"doc-endnote"><p>https://www.iana.org/assignments/po=
rt-numbers<a href=3D"https://beej.us/guide/bgnet/html/#fnref48" class=3D"fo=
otnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn49" role=3D"doc-endnote"><p>https://beej.us/guide/url/unixnet1<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref49" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn50" role=3D"doc-endnote"><p>https://beej.us/guide/url/unixnet2<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref50" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn51" role=3D"doc-endnote"><p>https://beej.us/guide/url/intertcp1=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref51" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn52" role=3D"doc-endnote"><p>https://beej.us/guide/url/tcpi1<a h=
ref=3D"https://beej.us/guide/bgnet/html/#fnref52" class=3D"footnote-back" r=
ole=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn53" role=3D"doc-endnote"><p>https://beej.us/guide/url/tcpi2<a h=
ref=3D"https://beej.us/guide/bgnet/html/#fnref53" class=3D"footnote-back" r=
ole=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn54" role=3D"doc-endnote"><p>https://beej.us/guide/url/tcpi3<a h=
ref=3D"https://beej.us/guide/bgnet/html/#fnref54" class=3D"footnote-back" r=
ole=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn55" role=3D"doc-endnote"><p>https://beej.us/guide/url/tcpi123<a=
 href=3D"https://beej.us/guide/bgnet/html/#fnref55" class=3D"footnote-back"=
 role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn56" role=3D"doc-endnote"><p>https://beej.us/guide/url/tcpna<a h=
ref=3D"https://beej.us/guide/bgnet/html/#fnref56" class=3D"footnote-back" r=
ole=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn57" role=3D"doc-endnote"><p>https://beej.us/guide/url/advunix<a=
 href=3D"https://beej.us/guide/bgnet/html/#fnref57" class=3D"footnote-back"=
 role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn58" role=3D"doc-endnote"><p>https://cis.temple.edu/~giorgio/old=
/cis307s96/readings/docs/sockets.html<a href=3D"https://beej.us/guide/bgnet=
/html/#fnref58" class=3D"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=
=B8=8E</a></p></li>
<li id=3D"fn59" role=3D"doc-endnote"><p>https://developerweb.net/?f=3D70<a =
href=3D"https://beej.us/guide/bgnet/html/#fnref59" class=3D"footnote-back" =
role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn60" role=3D"doc-endnote"><p>http://www.faqs.org/faqs/internet/t=
cp-ip/tcp-ip-faq/part1/<a href=3D"https://beej.us/guide/bgnet/html/#fnref60=
" class=3D"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p><=
/li>
<li id=3D"fn61" role=3D"doc-endnote"><p>https://tangentsoft.net/wskfaq/<a h=
ref=3D"https://beej.us/guide/bgnet/html/#fnref61" class=3D"footnote-back" r=
ole=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn62" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/Berke=
ley_sockets<a href=3D"https://beej.us/guide/bgnet/html/#fnref62" class=3D"f=
ootnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn63" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/Inter=
net_Protocol<a href=3D"https://beej.us/guide/bgnet/html/#fnref63" class=3D"=
footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn64" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/Trans=
mission_Control_Protocol<a href=3D"https://beej.us/guide/bgnet/html/#fnref6=
4" class=3D"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p>=
</li>
<li id=3D"fn65" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/User_=
Datagram_Protocol<a href=3D"https://beej.us/guide/bgnet/html/#fnref65" clas=
s=3D"footnote-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn66" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/Clien=
t-server<a href=3D"https://beej.us/guide/bgnet/html/#fnref66" class=3D"foot=
note-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn67" role=3D"doc-endnote"><p>https://en.wikipedia.org/wiki/Seria=
lization<a href=3D"https://beej.us/guide/bgnet/html/#fnref67" class=3D"foot=
note-back" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn68" role=3D"doc-endnote"><p>https://www.rfc-editor.org/<a href=
=3D"https://beej.us/guide/bgnet/html/#fnref68" class=3D"footnote-back" role=
=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn69" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc1<a =
href=3D"https://beej.us/guide/bgnet/html/#fnref69" class=3D"footnote-back" =
role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn70" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc768<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref70" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn71" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc791<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref71" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn72" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc793<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref72" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn73" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc854<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref73" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn74" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc959<=
a href=3D"https://beej.us/guide/bgnet/html/#fnref74" class=3D"footnote-back=
" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn75" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc1350=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref75" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn76" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc1459=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref76" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn77" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc1918=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref77" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn78" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc2131=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref78" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn79" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc2616=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref79" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn80" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc2821=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref80" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn81" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc3330=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref81" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn82" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc3493=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref82" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn83" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc3542=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref83" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn84" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc3849=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref84" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn85" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc3920=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref85" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn86" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc3977=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref86" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn87" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc4193=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref87" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn88" role=3D"doc-endnote"><p>https://tools.ietf.org/html/rfc4506=
<a href=3D"https://beej.us/guide/bgnet/html/#fnref88" class=3D"footnote-bac=
k" role=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
<li id=3D"fn89" role=3D"doc-endnote"><p>https://tools.ietf.org/rfc/<a href=
=3D"https://beej.us/guide/bgnet/html/#fnref89" class=3D"footnote-back" role=
=3D"doc-backlink">=E2=86=A9=EF=B8=8E</a></p></li>
</ol>
</section>


</body></html>
------MultipartBoundary--ojhY9uEodBy4uXu3c34XxcgrJTzoZvfDUtYUFOiVCv----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-bc681b49-813e-4bc2-97ba-0cf302325b92@mhtml.blink

@charset "utf-8";

html { line-height: 1.5; font-family: Georgia, serif; font-size: 20px; colo=
r: rgb(26, 26, 26); background-color: rgb(253, 253, 253); }

body { margin: 0px auto; max-width: 36em; padding: 50px; hyphens: auto; ove=
rflow-wrap: break-word; text-rendering: optimizelegibility; font-kerning: n=
ormal; }

@media (max-width: 600px) {
  body { font-size: 0.9em; padding: 1em; }
}

@media print {
  body { background-color: transparent; color: black; font-size: 12pt; }
  p, h2, h3 { orphans: 3; widows: 3; }
  h2, h3, h4 { break-after: avoid; }
}

p { margin: 1em 0px; }

a { color: rgb(26, 26, 26); }

a:visited { color: rgb(26, 26, 26); }

img { max-width: 100%; }

h1, h2, h3, h4, h5, h6 { margin-top: 1.4em; }

h5, h6 { font-size: 1em; font-style: italic; }

h6 { font-weight: normal; }

ol, ul { padding-left: 1.7em; margin-top: 1em; }

li > ol, li > ul { margin-top: 0px; }

blockquote { margin: 1em 0px 1em 1.7em; padding-left: 1em; border-left: 2px=
 solid rgb(230, 230, 230); color: rgb(96, 96, 96); }

code { font-family: Menlo, Monaco, "Lucida Console", Consolas, monospace; f=
ont-size: 85%; margin: 0px; }

pre { margin: 1em 0px; overflow: auto; }

pre code { padding: 0px; overflow: visible; }

.sourceCode { background-color: transparent; overflow: visible; }

hr { background-color: rgb(26, 26, 26); border: none; height: 1px; margin: =
1em 0px; }

table { margin: 1em 0px; border-collapse: collapse; width: 100%; overflow-x=
: auto; display: block; font-variant-numeric: lining-nums tabular-nums; }

table caption { margin-bottom: 0.75em; }

tbody { margin-top: 0.5em; border-top: 1px solid rgb(26, 26, 26); border-bo=
ttom: 1px solid rgb(26, 26, 26); }

th { border-top: 1px solid rgb(26, 26, 26); padding: 0.25em 0.5em; }

td { padding: 0.125em 0.5em 0.25em; }

header { margin-bottom: 4em; text-align: center; }

#TOC li { list-style: none; }

#TOC a:not(:hover) { text-decoration: none; }

code { white-space: pre-wrap; }

span.smallcaps { font-variant: small-caps; }

span.underline { text-decoration: underline; }

div.column { display: inline-block; vertical-align: top; width: 50%; }

div.hanging-indent { margin-left: 1.5em; text-indent: -1.5em; }

ul.task-list { list-style: none; }

pre > code.sourceCode { white-space: pre; position: relative; }

pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }

pre > code.sourceCode > span:empty { height: 1.2em; }

code.sourceCode > span { color: inherit; text-decoration: inherit; }

div.sourceCode { margin: 1em 0px; }

pre.sourceCode { margin: 0px; }

@media screen {
  div.sourceCode { overflow: auto; }
}

@media print {
  pre > code.sourceCode { white-space: pre-wrap; }
  pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }
}

pre.numberSource code { counter-reset: source-line 0; }

pre.numberSource code > span { position: relative; left: -4em; counter-incr=
ement: source-line 1; }

pre.numberSource code > span > a:first-child::before { content: counter(sou=
rce-line); position: relative; left: -1em; text-align: right; vertical-alig=
n: baseline; border: none; display: inline-block; user-select: none; paddin=
g: 0px 4px; width: 4em; color: rgb(170, 170, 170); }

pre.numberSource { margin-left: 3em; border-left: 1px solid rgb(170, 170, 1=
70); padding-left: 4px; }

div.sourceCode { }

@media screen {
  pre > code.sourceCode > span > a:first-child::before { text-decoration: u=
nderline; }
}

code span.al { color: rgb(255, 0, 0); font-weight: bold; }

code span.an { color: rgb(96, 160, 176); font-weight: bold; font-style: ita=
lic; }

code span.at { color: rgb(125, 144, 41); }

code span.bn { color: rgb(64, 160, 112); }

code span.bu { }

code span.cf { color: rgb(0, 112, 32); font-weight: bold; }

code span.ch { color: rgb(64, 112, 160); }

code span.cn { color: rgb(136, 0, 0); }

code span.co { color: rgb(96, 160, 176); font-style: italic; }

code span.cv { color: rgb(96, 160, 176); font-weight: bold; font-style: ita=
lic; }

code span.do { color: rgb(186, 33, 33); font-style: italic; }

code span.dt { color: rgb(144, 32, 0); }

code span.dv { color: rgb(64, 160, 112); }

code span.er { color: rgb(255, 0, 0); font-weight: bold; }

code span.ex { }

code span.fl { color: rgb(64, 160, 112); }

code span.fu { color: rgb(6, 40, 126); }

code span.im { }

code span.in { color: rgb(96, 160, 176); font-weight: bold; font-style: ita=
lic; }

code span.kw { color: rgb(0, 112, 32); font-weight: bold; }

code span.op { color: rgb(102, 102, 102); }

code span.ot { color: rgb(0, 112, 32); }

code span.pp { color: rgb(188, 122, 0); }

code span.sc { color: rgb(64, 112, 160); }

code span.ss { color: rgb(187, 102, 136); }

code span.st { color: rgb(64, 112, 160); }

code span.va { color: rgb(25, 23, 124); }

code span.vs { color: rgb(64, 112, 160); }

code span.wa { color: rgb(96, 160, 176); font-weight: bold; font-style: ita=
lic; }
------MultipartBoundary--ojhY9uEodBy4uXu3c34XxcgrJTzoZvfDUtYUFOiVCv----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: cid:css-b3c7a2e0-a9fb-479e-bdf8-df9f1647c16a@mhtml.blink

@charset "utf-8";

pre.numberSource code > span { left: -1em; }

pre.numberSource { margin-left: initial; }

span.toc-section-number::after { content: "=C2=A0=C2=A0=C2=A0"; }

pre > code.sourceCode > span > a:first-child::before { text-decoration: non=
e; }

tbody code { white-space: nowrap; }
------MultipartBoundary--ojhY9uEodBy4uXu3c34XxcgrJTzoZvfDUtYUFOiVCv----
Content-Type: text/css
Content-Transfer-Encoding: quoted-printable
Content-Location: https://fonts.googleapis.com/css?family=Roboto|Roboto+Mono&display=swap

@charset "utf-8";

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v29/KFOmCnqEu=
92Fr1Mu72xKOzY.woff2") format("woff2"); unicode-range: U+460-52F, U+1C80-1C=
88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v29/KFOmCnqEu=
92Fr1Mu5mxKOzY.woff2") format("woff2"); unicode-range: U+400-45F, U+490-491=
, U+4B0-4B1, U+2116; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v29/KFOmCnqEu=
92Fr1Mu7mxKOzY.woff2") format("woff2"); unicode-range: U+1F00-1FFF; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v29/KFOmCnqEu=
92Fr1Mu4WxKOzY.woff2") format("woff2"); unicode-range: U+370-3FF; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v29/KFOmCnqEu=
92Fr1Mu7WxKOzY.woff2") format("woff2"); unicode-range: U+102-103, U+110-111=
, U+128-129, U+168-169, U+1A0-1A1, U+1AF-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v29/KFOmCnqEu=
92Fr1Mu7GxKOzY.woff2") format("woff2"); unicode-range: U+100-24F, U+259, U+=
1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7=
FF; }

@font-face { font-family: Roboto; font-style: normal; font-weight: 400; fon=
t-display: swap; src: url("https://fonts.gstatic.com/s/roboto/v29/KFOmCnqEu=
92Fr1Mu4mxK.woff2") format("woff2"); unicode-range: U+0-FF, U+131, U+152-15=
3, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2=
191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v1=
3/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_SeW4Ep0.woff2") format("woff2"); =
unicode-range: U+460-52F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+=
FE2E-FE2F; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v1=
3/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_QOW4Ep0.woff2") format("woff2"); =
unicode-range: U+400-45F, U+490-491, U+4B0-4B1, U+2116; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v1=
3/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_R-W4Ep0.woff2") format("woff2"); =
unicode-range: U+370-3FF; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v1=
3/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_S-W4Ep0.woff2") format("woff2"); =
unicode-range: U+102-103, U+110-111, U+128-129, U+168-169, U+1A0-1A1, U+1AF=
-1B0, U+1EA0-1EF9, U+20AB; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v1=
3/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_SuW4Ep0.woff2") format("woff2"); =
unicode-range: U+100-24F, U+259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-2=
0CF, U+2113, U+2C60-2C7F, U+A720-A7FF; }

@font-face { font-family: "Roboto Mono"; font-style: normal; font-weight: 4=
00; font-display: swap; src: url("https://fonts.gstatic.com/s/robotomono/v1=
3/L0xuDF4xlVMF-BfR8bXMIhJHg45mwgGEFl0_3vq_ROW4.woff2") format("woff2"); uni=
code-range: U+0-FF, U+131, U+152-153, U+2BB-2BC, U+2C6, U+2DA, U+2DC, U+200=
0-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+F=
FFD; }
------MultipartBoundary--ojhY9uEodBy4uXu3c34XxcgrJTzoZvfDUtYUFOiVCv----
Content-Type: image/svg+xml
Content-ID: <frame-EC54FDECEA94A1D8CE1A906D7512691E@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://beej.us/guide/bgnet/html/dataencap.svg

<?xml version=3D"1.0" encoding=3D"UTF-8" standalone=3D"no"?><!-- Created wi=
th Inkscape (http://www.inkscape.org/) --><svg xmlns:dc=3D"http://purl.org/=
dc/elements/1.1/" xmlns:cc=3D"http://creativecommons.org/ns#" xmlns:rdf=3D"=
http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg=3D"http://www.w3.org=
/2000/svg" xmlns=3D"http://www.w3.org/2000/svg" xmlns:sodipodi=3D"http://so=
dipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape=3D"http://www.ink=
scape.org/namespaces/inkscape" sodipodi:docname=3D"dataencap.svg" inkscape:=
version=3D"0.92.4 5da689c313, 2019-01-14" sodipodi:version=3D"0.32" id=3D"s=
vg2" height=3D"0.56060767in" width=3D"4.4404016in" version=3D"1.1">
  <defs id=3D"defs3"/>
  <sodipodi:namedview inkscape:window-y=3D"42" inkscape:window-x=3D"302" in=
kscape:window-height=3D"1458" inkscape:window-width=3D"2491" inkscape:grid-=
bbox=3D"false" gridtolerance=3D"1.0000000mm" showgrid=3D"false" inkscape:cu=
rrent-layer=3D"text2103" inkscape:document-units=3D"px" inkscape:cy=3D"54.6=
56582" inkscape:cx=3D"391.48311" inkscape:zoom=3D"1.979899" inkscape:pagesh=
adow=3D"2" inkscape:pageopacity=3D"0.0" borderopacity=3D"1.0" bordercolor=
=3D"#666666" pagecolor=3D"#ffffff" id=3D"base" fit-margin-top=3D"0" fit-mar=
gin-left=3D"0" fit-margin-right=3D"0" fit-margin-bottom=3D"0" inkscape:wind=
ow-maximized=3D"0">
    <inkscape:grid id=3D"GridFromPre046Settings" type=3D"xygrid" originx=3D=
"-162.20515" originy=3D"-879.05805" spacingx=3D"1.0666667" spacingy=3D"1.06=
66667" color=3D"#3f3fff" empcolor=3D"#3f3fff" opacity=3D"0.15" empopacity=
=3D"0.38" empspacing=3D"5"/>
  </sodipodi:namedview>
  <metadata id=3D"metadata4">
    <rdf:RDF>
      <cc:Work rdf:about=3D"">
        <dc:format>image/svg+xml</dc:format>
        <dc:type rdf:resource=3D"http://purl.org/dc/dcmitype/StillImage"/>
        <dc:title/>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g id=3D"layer1" inkscape:groupmode=3D"layer" inkscape:label=3D"Layer 1" =
transform=3D"translate(-162.20515,-123.12362)">
    <rect y=3D"150.03241" x=3D"414.08069" height=3D"0.00073690858" width=3D=
"0.0028696468" id=3D"rect2089" style=3D"fill:none;fill-opacity:1;stroke:#00=
0000;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-d=
ashoffset:0;stroke-opacity:1"/>
    <g aria-label=3D"Data" style=3D"font-style:italic;font-variant:normal;f=
ont-weight:bold;font-stretch:normal;line-height:0%;font-family:sans-serif;w=
riting-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none=
;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:=
1" id=3D"text2083">
      <path d=3D"m 511.03261,159.33853 h -5.82994 l 3.62813,-18.68073 h 4.9=
9907 q 7.56092,0 7.56092,6.37001 0,2.14641 -0.74779,4.62517 -0.74778,2.4649=
2 -2.10487,4.1959 -1.34324,1.71713 -3.25424,2.60339 -1.911,0.88626 -4.25128=
,0.88626 z m 6.18998,-11.75681 q 0,-1.99409 -1.02474,-2.88035 -1.01089,-0.8=
8626 -3.04653,-0.88626 h -0.84471 l -2.40953,12.36611 h 1.41248 q 4.41746,0=
 5.66377,-6.32846 0.24926,-1.28785 0.24926,-2.27104 z" style=3D"font-style:=
italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-size:2=
8.36036873px;line-height:1;font-family:'Liberation Mono';-inkscape-font-spe=
cification:'Liberation Mono Bold Italic'" id=3D"path891" inkscape:connector=
-curvature=3D"0"/>
      <path d=3D"m 526.37601,159.61549 q -1.85561,0 -2.8665,-0.85857 -0.997=
05,-0.85856 -0.99705,-2.49261 0,-0.54006 0.12463,-1.16322 0.94166,-4.72211 =
6.7162,-4.79135 l 3.10192,-0.0554 0.13848,-0.76163 q 0.13848,-0.6647 0.1384=
8,-1.16322 0,-1.73098 -1.6202,-1.73098 -0.9832,0 -1.56481,0.49852 -0.58161,=
0.49853 -0.9278,1.6202 l -4.01587,-0.19387 q 1.5648,-4.44515 7.15933,-4.445=
15 2.39567,0 3.62813,1.01089 1.24631,0.99704 1.24631,2.94959 0,0.637 -0.152=
33,1.44017 l -1.05244,5.42835 q -0.15232,0.76163 -0.15232,1.17707 0,0.51237=
 0.20772,0.77548 0.22156,0.26311 0.74778,0.26311 0.44313,0 0.87241,-0.0831 =
l -0.40159,2.10487 q -0.36004,0.0831 -0.65084,0.15233 -0.29081,0.0692 -0.58=
161,0.11078 -0.27696,0.0415 -0.59546,0.0692 -0.3185,0.0277 -0.73393,0.0277 =
-1.31555,0 -1.89716,-0.56777 -0.58161,-0.5816 -0.58161,-1.70328 l 0.0277,-0=
.56776 h -0.0831 q -1.19091,1.5648 -2.45107,2.2572 -1.26015,0.69239 -2.7834=
1,0.69239 z m 5.64992,-7.21472 -1.85561,0.0277 q -1.45403,0.0277 -2.14642,0=
.38774 -0.69239,0.36004 -1.02474,1.14937 -0.3185,0.77548 -0.3185,1.57865 0,=
1.35709 1.32939,1.35709 1.35709,0 2.46492,-1.08013 1.10783,-1.09398 1.41248=
,-2.65878 z" style=3D"font-style:italic;font-variant:normal;font-weight:bol=
d;font-stretch:normal;font-size:28.36036873px;line-height:1;font-family:'Li=
beration Mono';-inkscape-font-specification:'Liberation Mono Bold Italic'" =
id=3D"path893" inkscape:connector-curvature=3D"0"/>
      <path d=3D"m 544.30896,146.98626 h -2.31259 l 0.51237,-2.63109 h 2.50=
646 l 1.98024,-3.90509 h 2.43722 l -0.76163,3.90509 h 5.33141 l -0.51237,2.=
63109 h -5.33141 l -1.42633,7.33935 q -0.15233,0.83087 -0.15233,1.14938 0,0=
.74778 0.49852,1.08013 0.49853,0.3185 1.57866,0.3185 1.70328,0 3.60044,-0.3=
7389 l -0.49853,2.57569 q -0.54006,0.0831 -1.06628,0.16618 -0.51237,0.0831 =
-1.06628,0.13848 -0.54007,0.0692 -1.14937,0.0969 -0.59546,0.0415 -1.3017,0.=
0415 -2.24335,0 -3.40657,-0.78932 -1.16322,-0.78933 -1.16322,-2.49261 0,-0.=
40159 0.0692,-0.87242 0.0692,-0.47082 1.63405,-8.37794 z" style=3D"font-sty=
le:italic;font-variant:normal;font-weight:bold;font-stretch:normal;font-siz=
e:28.36036873px;line-height:1;font-family:'Liberation Mono';-inkscape-font-=
specification:'Liberation Mono Bold Italic'" id=3D"path895" inkscape:connec=
tor-curvature=3D"0"/>
      <path d=3D"m 560.41399,159.61549 q -1.85561,0 -2.8665,-0.85857 -0.997=
04,-0.85856 -0.99704,-2.49261 0,-0.54006 0.12463,-1.16322 0.94165,-4.72211 =
6.7162,-4.79135 l 3.10191,-0.0554 0.13848,-0.76163 q 0.13848,-0.6647 0.1384=
8,-1.16322 0,-1.73098 -1.6202,-1.73098 -0.98319,0 -1.5648,0.49852 -0.58161,=
0.49853 -0.92781,1.6202 l -4.01587,-0.19387 q 1.56481,-4.44515 7.15933,-4.4=
4515 2.39568,0 3.62814,1.01089 1.2463,0.99704 1.2463,2.94959 0,0.637 -0.152=
33,1.44017 l -1.05243,5.42835 q -0.15233,0.76163 -0.15233,1.17707 0,0.51237=
 0.20772,0.77548 0.22157,0.26311 0.74778,0.26311 0.44313,0 0.87242,-0.0831 =
l -0.40159,2.10487 q -0.36004,0.0831 -0.65085,0.15233 -0.2908,0.0692 -0.581=
61,0.11078 -0.27695,0.0415 -0.59545,0.0692 -0.31851,0.0277 -0.73394,0.0277 =
-1.31554,0 -1.89715,-0.56777 -0.58161,-0.5816 -0.58161,-1.70328 l 0.0277,-0=
.56776 h -0.0831 q -1.19092,1.5648 -2.45107,2.2572 -1.26015,0.69239 -2.7834=
2,0.69239 z m 5.64992,-7.21472 -1.85561,0.0277 q -1.45402,0.0277 -2.14641,0=
.38774 -0.6924,0.36004 -1.02474,1.14937 -0.3185,0.77548 -0.3185,1.57865 0,1=
.35709 1.32939,1.35709 1.35709,0 2.46491,-1.08013 1.10783,-1.09398 1.41248,=
-2.65878 z" style=3D"font-style:italic;font-variant:normal;font-weight:bold=
;font-stretch:normal;font-size:28.36036873px;line-height:1;font-family:'Lib=
eration Mono';-inkscape-font-specification:'Liberation Mono Bold Italic'" i=
d=3D"path897" inkscape:connector-curvature=3D"0"/>
    </g>
    <g aria-label=3D"TFTP" style=3D"font-style:normal;font-variant:normal;f=
ont-weight:normal;font-stretch:normal;line-height:0%;font-family:'Courier 1=
0 Pitch';writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;s=
troke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;strok=
e-opacity:1" id=3D"text2093">
      <path d=3D"m 434.69821,142.48801 v 17.35954 h -2.76472 v -17.35954 h =
-6.44616 v -2.26998 h 15.65705 v 2.26998 z" style=3D"font-style:normal;font=
-variant:normal;font-weight:normal;font-stretch:normal;font-size:29.8007850=
6px;line-height:1.25;font-family:'Liberation Mono';-inkscape-font-specifica=
tion:'Liberation Mono'" id=3D"path882" inkscape:connector-curvature=3D"0"/>
      <path d=3D"m 447.86702,142.48801 v 7.18828 h 9.83659 v 2.29908 h -9.8=
3659 v 7.87218 h -2.77927 v -19.62952 h 12.96508 v 2.26998 z" style=3D"font=
-style:normal;font-variant:normal;font-weight:normal;font-stretch:normal;fo=
nt-size:29.80078506px;line-height:1.25;font-family:'Liberation Mono';-inksc=
ape-font-specification:'Liberation Mono'" id=3D"path884" inkscape:connector=
-curvature=3D"0"/>
      <path d=3D"m 470.46498,142.48801 v 17.35954 h -2.76472 v -17.35954 h =
-6.44617 v -2.26998 h 15.65705 v 2.26998 z" style=3D"font-style:normal;font=
-variant:normal;font-weight:normal;font-stretch:normal;font-size:29.8007850=
6px;line-height:1.25;font-family:'Liberation Mono';-inkscape-font-specifica=
tion:'Liberation Mono'" id=3D"path886" inkscape:connector-curvature=3D"0"/>
      <path d=3D"m 494.31434,146.0967 q 0,1.81889 -0.87307,3.24491 -0.85852=
,1.42601 -2.4737,2.22633 -1.60063,0.80031 -3.71055,0.80031 h -4.08888 v 7.4=
793 h -2.77927 v -19.62952 h 6.69354 q 3.46317,0 5.34027,1.55697 1.89166,1.=
54243 1.89166,4.3217 z m -2.79383,0.0437 q 0,-3.69599 -4.77278,-3.69599 h -=
3.57959 v 7.72666 h 3.696 q 2.16812,0 3.40497,-1.06223 1.2514,-1.06224 1.25=
14,-2.96844 z" style=3D"font-style:normal;font-variant:normal;font-weight:n=
ormal;font-stretch:normal;font-size:29.80078506px;line-height:1.25;font-fam=
ily:'Liberation Mono';-inkscape-font-specification:'Liberation Mono'" id=3D=
"path888" inkscape:connector-curvature=3D"0"/>
    </g>
    <g aria-label=3D"UDP" style=3D"font-style:normal;font-variant:normal;fo=
nt-weight:normal;font-stretch:normal;line-height:0%;font-family:'Courier 10=
 Pitch';writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;st=
roke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke=
-opacity:1" id=3D"text2099">
      <path d=3D"m 379.86791,152.57196 q 0,3.88516 -1.65883,5.6604 -1.65884=
,1.76069 -5.32573,1.76069 -3.55048,0 -5.15111,-1.70249 -1.58608,-1.71703 -1=
.58608,-5.45668 v -12.76137 h 2.77927 v 12.38304 q 0,2.96843 0.84397,4.1325=
3 0.85852,1.14954 3.0994,1.14954 2.34274,0 3.28856,-1.1932 0.94583,-1.19319=
 0.94583,-4.27804 v -12.19387 h 2.76472 z" style=3D"font-style:normal;font-=
variant:normal;font-weight:normal;font-stretch:normal;font-size:29.80078506=
px;line-height:1.25;font-family:'Liberation Mono';-inkscape-font-specificat=
ion:'Liberation Mono'" id=3D"path875" inkscape:connector-curvature=3D"0"/>
      <path d=3D"m 398.33334,149.69083 q 0,4.81643 -2.24088,7.42109 -2.2263=
3,2.59011 -6.38796,2.59011 h -5.38394 v -19.62952 h 4.52542 q 4.78733,0 7.1=
3007,2.40094 2.35729,2.38639 2.35729,7.21738 z m -2.79383,0 q 0,-3.84151 -1=
.60063,-5.58765 -1.60062,-1.76069 -5.07835,-1.76069 h -1.76069 v 15.08955 h=
 2.35729 q 3.08484,0 4.58361,-1.9353 1.49877,-1.93531 1.49877,-5.80591 z" s=
tyle=3D"font-style:normal;font-variant:normal;font-weight:normal;font-stret=
ch:normal;font-size:29.80078506px;line-height:1.25;font-family:'Liberation =
Mono';-inkscape-font-specification:'Liberation Mono'" id=3D"path877" inksca=
pe:connector-curvature=3D"0"/>
      <path d=3D"m 416.12941,145.95118 q 0,1.81889 -0.87307,3.24491 -0.8585=
2,1.42601 -2.4737,2.22632 -1.60063,0.80032 -3.71054,0.80032 h -4.08888 v 7.=
4793 h -2.77927 v -19.62952 h 6.69353 q 3.46318,0 5.34028,1.55697 1.89165,1=
.54242 1.89165,4.3217 z m -2.79382,0.0437 q 0,-3.696 -4.77279,-3.696 h -3.5=
7958 v 7.72667 h 3.69599 q 2.16813,0 3.40498,-1.06223 1.2514,-1.06224 1.251=
4,-2.96844 z" style=3D"font-style:normal;font-variant:normal;font-weight:no=
rmal;font-stretch:normal;font-size:29.80078506px;line-height:1.25;font-fami=
ly:'Liberation Mono';-inkscape-font-specification:'Liberation Mono'" id=3D"=
path879" inkscape:connector-curvature=3D"0"/>
    </g>
    <g aria-label=3D"IP" style=3D"font-style:normal;font-variant:normal;fon=
t-weight:normal;font-stretch:normal;line-height:0%;font-family:'Courier 10 =
Pitch';writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;str=
oke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;stroke-=
opacity:1" id=3D"text2103">
      <path d=3D"m 324.58417,140.21803 h 11.97561 v 2.26998 h -4.59817 v 15=
.08956 h 4.59817 v 2.26998 h -11.97561 v -2.26998 h 4.59817 v -15.08956 h -=
4.59817 z" style=3D"font-style:normal;font-variant:normal;font-weight:norma=
l;font-stretch:normal;font-size:29.80078506px;line-height:1.25;font-family:=
'Liberation Mono';-inkscape-font-specification:'Liberation Mono'" id=3D"pat=
h870" inkscape:connector-curvature=3D"0"/>
      <path d=3D"m 355.81097,146.0967 q 0,1.81889 -0.87307,3.24491 -0.85852=
,1.42601 -2.4737,2.22633 -1.60063,0.80031 -3.71054,0.80031 h -4.08888 v 7.4=
793 h -2.77927 v -19.62952 h 6.69353 q 3.46318,0 5.34028,1.55697 1.89165,1.=
54243 1.89165,4.3217 z m -2.79382,0.0437 q 0,-3.69599 -4.77279,-3.69599 h -=
3.57958 v 7.72666 h 3.69599 q 2.16813,0 3.40498,-1.06223 1.2514,-1.06224 1.=
2514,-2.96844 z" style=3D"font-style:normal;font-variant:normal;font-weight=
:normal;font-stretch:normal;font-size:29.80078506px;line-height:1.25;font-f=
amily:'Liberation Mono';-inkscape-font-specification:'Liberation Mono'" id=
=3D"path872" inkscape:connector-curvature=3D"0"/>
    </g>
    <g aria-label=3D"Ethernet" style=3D"font-style:normal;font-variant:norm=
al;font-weight:normal;font-stretch:normal;line-height:0%;font-family:'Couri=
er 10 Pitch';writing-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity=
:1;stroke:none;stroke-width:1px;stroke-linecap:butt;stroke-linejoin:miter;s=
troke-opacity:1" id=3D"text2107">
      <path d=3D"m 172.50614,160.68423 v -19.62952 h 13.37252 v 2.26999 h -=
10.59325 v 6.14059 h 9.72018 v 2.24088 h -9.72018 v 6.70808 h 11.18985 v 2.=
26998 z" style=3D"font-style:normal;font-variant:normal;font-weight:normal;=
font-stretch:normal;font-size:29.80078506px;line-height:1.25;font-family:'L=
iberation Mono';-inkscape-font-specification:'Liberation Mono'" id=3D"path8=
53" inkscape:connector-curvature=3D"0"/>
      <path d=3D"m 190.79695,147.00614 v -2.06627 h 2.4737 l 0.84397,-4.103=
42 h 1.74614 v 4.10342 h 6.2861 v 2.06627 h -6.2861 v 9.48736 q 0,1.14954 0=
.61115,1.70249 0.6257,0.55294 2.03716,0.55294 1.94985,0 4.32169,-0.49474 v =
1.99351 q -2.45914,0.66935 -4.87464,0.66935 -2.35728,0 -3.53593,-0.98948 -1=
.17864,-1.00403 -1.17864,-3.1576 v -9.76383 z" style=3D"font-style:normal;f=
ont-variant:normal;font-weight:normal;font-stretch:normal;font-size:29.8007=
8506px;line-height:1.25;font-family:'Liberation Mono';-inkscape-font-specif=
ication:'Liberation Mono'" id=3D"path855" inkscape:connector-curvature=3D"0=
"/>
      <path d=3D"m 208.60758,139.09031 h 2.63376 v 5.67495 q 0,0.85852 -0.1=
3096,2.86658 h 0.0437 q 1.52787,-2.98299 4.93285,-2.98299 5.0929,0 5.0929,5=
.54399 v 10.49139 h -2.63376 v -10.11305 q 0,-1.97896 -0.77121,-2.93934 -0.=
75666,-0.96038 -2.43004,-0.96038 -1.80435,0 -2.96844,1.32416 -1.14954,1.309=
6 -1.14954,3.56503 v 9.12358 h -2.61921 z" style=3D"font-style:normal;font-=
variant:normal;font-weight:normal;font-stretch:normal;font-size:29.80078506=
px;line-height:1.25;font-family:'Liberation Mono';-inkscape-font-specificat=
ion:'Liberation Mono'" id=3D"path857" inkscape:connector-curvature=3D"0"/>
      <path d=3D"m 228.48447,153.365 q 0,2.64831 1.16409,4.14708 1.17864,1.=
49877 3.21581,1.49877 1.49877,0 2.61921,-0.64025 1.13499,-0.6548 1.51332,-1=
.77524 l 2.29908,0.6548 q -0.64025,1.80434 -2.35729,2.76472 -1.70248,0.9603=
8 -4.07432,0.96038 -3.43408,0 -5.28208,-2.13902 -1.84799,-2.13902 -1.84799,=
-6.12604 0,-3.88516 1.80434,-5.96598 1.8189,-2.09537 5.23842,-2.09537 3.419=
52,0 5.18022,2.08082 1.76069,2.08081 1.76069,6.2861 v 0.34923 z m 4.32169,-=
6.78084 q -1.94985,0 -3.08484,1.2805 -1.13499,1.26595 -1.20775,3.49228 h 8.=
49788 q -0.40743,-4.77278 -4.20529,-4.77278 z" style=3D"font-style:normal;f=
ont-variant:normal;font-weight:normal;font-stretch:normal;font-size:29.8007=
8506px;line-height:1.25;font-family:'Liberation Mono';-inkscape-font-specif=
ication:'Liberation Mono'" id=3D"path859" inkscape:connector-curvature=3D"0=
"/>
      <path d=3D"m 256.88834,147.32627 q -1.62973,-0.27648 -3.08485,-0.2764=
8 -2.34273,0 -3.7833,1.76069 -1.44056,1.7607 -1.44056,4.48176 v 7.39199 h -=
2.61921 v -10.20036 q 0,-1.10589 -0.20372,-2.60466 -0.18917,-1.49877 -0.552=
95,-2.93934 h 2.48825 q 0.58205,2.00807 0.69846,3.6378 h 0.0728 q 0.72755,-=
1.62973 1.42601,-2.3864 0.69846,-0.77121 1.65883,-1.14954 0.96038,-0.39288 =
2.34274,-0.39288 1.51332,0 2.99754,0.24737 z" style=3D"font-style:normal;fo=
nt-variant:normal;font-weight:normal;font-stretch:normal;font-size:29.80078=
506px;line-height:1.25;font-family:'Liberation Mono';-inkscape-font-specifi=
cation:'Liberation Mono'" id=3D"path861" inkscape:connector-curvature=3D"0"=
/>
      <path d=3D"m 272.19616,160.68423 v -10.11305 q 0,-1.97896 -0.77121,-2=
.93934 -0.75666,-0.96038 -2.43005,-0.96038 -1.80434,0 -2.96843,1.32416 -1.1=
4954,1.3096 -1.14954,3.56503 v 9.12358 h -2.61921 v -12.38304 q 0,-2.75017 =
-0.0873,-3.36132 h 2.4737 q 0.0145,0.0728 0.0291,0.39289 0.0146,0.32012 0.0=
291,0.74211 0.0291,0.40743 0.0582,1.55697 h 0.0437 q 1.52787,-2.98299 5.034=
7,-2.98299 2.51735,0 3.7542,1.36781 1.23685,1.35326 1.23685,4.17618 v 10.49=
139 z" style=3D"font-style:normal;font-variant:normal;font-weight:normal;fo=
nt-stretch:normal;font-size:29.80078506px;line-height:1.25;font-family:'Lib=
eration Mono';-inkscape-font-specification:'Liberation Mono'" id=3D"path863=
" inkscape:connector-curvature=3D"0"/>
      <path d=3D"m 282.13461,153.365 q 0,2.64831 1.16409,4.14708 1.17865,1.=
49877 3.21581,1.49877 1.49877,0 2.61921,-0.64025 1.13499,-0.6548 1.51332,-1=
.77524 l 2.29909,0.6548 q -0.64026,1.80434 -2.35729,2.76472 -1.70249,0.9603=
8 -4.07433,0.96038 -3.43407,0 -5.28207,-2.13902 -1.848,-2.13902 -1.848,-6.1=
2604 0,-3.88516 1.80434,-5.96598 1.8189,-2.09537 5.23842,-2.09537 3.41953,0=
 5.18022,2.08082 1.76069,2.08081 1.76069,6.2861 v 0.34923 z m 4.3217,-6.780=
84 q -1.94986,0 -3.08485,1.2805 -1.13499,1.26595 -1.20775,3.49228 h 8.49788=
 q -0.40743,-4.77278 -4.20528,-4.77278 z" style=3D"font-style:normal;font-v=
ariant:normal;font-weight:normal;font-stretch:normal;font-size:29.80078506p=
x;line-height:1.25;font-family:'Liberation Mono';-inkscape-font-specificati=
on:'Liberation Mono'" id=3D"path865" inkscape:connector-curvature=3D"0"/>
      <path d=3D"m 298.09724,147.00614 v -2.06627 h 2.4737 l 0.84397,-4.103=
42 h 1.74614 v 4.10342 h 6.2861 v 2.06627 h -6.2861 v 9.48736 q 0,1.14954 0=
.61114,1.70249 0.62571,0.55294 2.03717,0.55294 1.94985,0 4.32169,-0.49474 v=
 1.99351 q -2.45914,0.66935 -4.87464,0.66935 -2.35728,0 -3.53593,-0.98948 -=
1.17864,-1.00403 -1.17864,-3.1576 v -9.76383 z" style=3D"font-style:normal;=
font-variant:normal;font-weight:normal;font-stretch:normal;font-size:29.800=
78506px;line-height:1.25;font-family:'Liberation Mono';-inkscape-font-speci=
fication:'Liberation Mono'" id=3D"path867" inkscape:connector-curvature=3D"=
0"/>
    </g>
    <path id=3D"rect2081" d=3D"m 318.79106,126.40323 h 266.55371 v 47.25912=
 H 318.79106 Z" style=3D"fill:none;fill-opacity:1;stroke:#000000;stroke-wid=
th:0.68892628;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4=
;stroke-dashoffset:0;stroke-opacity:1" inkscape:connector-curvature=3D"0"/>
    <path id=3D"path2137" d=3D"m 499.66782,135.21409 h 76.95476 v 29.63739 =
h -76.95476 z" style=3D"fill:none;fill-opacity:1;stroke:#000000;stroke-widt=
h:1.6119343;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;s=
troke-dashoffset:0;stroke-opacity:1" inkscape:connector-curvature=3D"0"/>
    <path id=3D"path2135" d=3D"m 361.03374,129.22428 h 221.79763 v 41.617 H=
 361.03374 Z" style=3D"fill:none;fill-opacity:1;stroke:#000000;stroke-width=
:0.68892628;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;s=
troke-dashoffset:0;stroke-opacity:1" inkscape:connector-curvature=3D"0"/>
    <path id=3D"path2133" d=3D"m 421.00019,132.13431 h 158.75212 v 35.79695=
 H 421.00019 Z" style=3D"fill:none;fill-opacity:1;stroke:#000000;stroke-wid=
th:0.68892628;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4=
;stroke-dashoffset:0;stroke-opacity:1" inkscape:connector-curvature=3D"0"/>
    <path id=3D"path2131" d=3D"m 162.54961,123.46808 h 425.58963 v 53.12941=
 H 162.54961 Z" style=3D"fill:none;fill-opacity:1;stroke:#000000;stroke-wid=
th:0.68892628;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4=
;stroke-dashoffset:0;stroke-opacity:1" inkscape:connector-curvature=3D"0"/>
  </g>
</svg>
------MultipartBoundary--ojhY9uEodBy4uXu3c34XxcgrJTzoZvfDUtYUFOiVCv----
Content-Type: image/svg+xml
Content-ID: <frame-3C1F62EFBFDE6E8F8B1525F91A395AF9@mhtml.blink>
Content-Transfer-Encoding: quoted-printable
Content-Location: https://beej.us/guide/bgnet/html/cs.svg

<?xml version=3D"1.0" encoding=3D"UTF-8" standalone=3D"no"?><!-- Created wi=
th Inkscape (http://www.inkscape.org/) --><svg xmlns:dc=3D"http://purl.org/=
dc/elements/1.1/" xmlns:cc=3D"http://creativecommons.org/ns#" xmlns:rdf=3D"=
http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:svg=3D"http://www.w3.org=
/2000/svg" xmlns=3D"http://www.w3.org/2000/svg" xmlns:sodipodi=3D"http://so=
dipodi.sourceforge.net/DTD/sodipodi-0.dtd" xmlns:inkscape=3D"http://www.ink=
scape.org/namespaces/inkscape" width=3D"4.5723696in" height=3D"1.8277929in"=
 id=3D"svg2" sodipodi:version=3D"0.32" inkscape:version=3D"0.92.4 5da689c31=
3, 2019-01-14" sodipodi:docname=3D"cs.svg" version=3D"1.1">
  <defs id=3D"defs4">
    <marker inkscape:stockid=3D"Arrow2Mend" orient=3D"auto" refY=3D"0" refX=
=3D"0" id=3D"Arrow2Mend" style=3D"overflow:visible">
      <path sodipodi:nodetypes=3D"cccc" id=3D"path2155" style=3D"font-size:=
12px;fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round" d=3D"M 8.7=
185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.=
3720609 -1.7354408,5.6174519 -6e-7,8.035443 z" transform=3D"matrix(-0.6,0,0=
,-0.6,3,0)" inkscape:connector-curvature=3D"0"/>
    </marker>
    <marker inkscape:stockid=3D"Arrow2Lend" orient=3D"auto" refY=3D"0" refX=
=3D"0" id=3D"Arrow2Lend" style=3D"overflow:visible">
      <path sodipodi:nodetypes=3D"cccc" id=3D"path2158" style=3D"font-size:=
12px;fill-rule:evenodd;stroke-width:0.625;stroke-linejoin:round" d=3D"M 8.7=
185878,4.0337352 -2.2072895,0.01601326 8.7185884,-4.0017078 c -1.7454984,2.=
3720609 -1.7354408,5.6174519 -6e-7,8.035443 z" transform=3D"matrix(-1.1,0,0=
,-1.1,5.5,0)" inkscape:connector-curvature=3D"0"/>
    </marker>
  </defs>
  <sodipodi:namedview id=3D"base" pagecolor=3D"#ffffff" bordercolor=3D"#666=
666" borderopacity=3D"1.0" inkscape:pageopacity=3D"0.0" inkscape:pageshadow=
=3D"2" inkscape:zoom=3D"1.979899" inkscape:cx=3D"2.0928085" inkscape:cy=3D"=
111.71064" inkscape:document-units=3D"in" inkscape:current-layer=3D"layer1"=
 gridtolerance=3D"0.050000000in" inkscape:grid-bbox=3D"false" showgrid=3D"t=
rue" inkscape:grid-points=3D"false" inkscape:window-width=3D"2779" inkscape=
:window-height=3D"1633" inkscape:window-x=3D"491" inkscape:window-y=3D"32" =
units=3D"in" fit-margin-top=3D"0" fit-margin-left=3D"0" fit-margin-right=3D=
"0" fit-margin-bottom=3D"0" inkscape:window-maximized=3D"0">
    <inkscape:grid id=3D"GridFromPre046Settings" type=3D"xygrid" originx=3D=
"-116.22247" originy=3D"-836.97771" spacingx=3D"9.6" spacingy=3D"9.6" color=
=3D"#3f3fff" empcolor=3D"#3f3fff" opacity=3D"0.15" empopacity=3D"0.38" emps=
pacing=3D"5"/>
  </sodipodi:namedview>
  <metadata id=3D"metadata7">
    <rdf:RDF>
      <cc:Work rdf:about=3D"">
        <dc:format>image/svg+xml</dc:format>
        <dc:type rdf:resource=3D"http://purl.org/dc/dcmitype/StillImage"/>
        <dc:title/>
      </cc:Work>
    </rdf:RDF>
  </metadata>
  <g inkscape:label=3D"Layer 1" inkscape:groupmode=3D"layer" id=3D"layer1" =
transform=3D"translate(-116.22247,-43.554181)">
    <rect style=3D"opacity:1;fill:none;fill-opacity:1;stroke:#000000;stroke=
-width:1.49097526;stroke-linecap:butt;stroke-linejoin:round;stroke-miterlim=
it:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:1" id=3D"rect=
2037" width=3D"142.9895" height=3D"48.181759" x=3D"116.96796" y=3D"107.1507=
2"/>
    <rect y=3D"106.10773" x=3D"411.43103" height=3D"48.689182" width=3D"142=
.9895" id=3D"rect2039" style=3D"opacity:1;fill:none;fill-opacity:1;stroke:#=
000000;stroke-width:1.49880564;stroke-linecap:butt;stroke-linejoin:round;st=
roke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke-opacity:=
1"/>
    <path sodipodi:type=3D"arc" style=3D"opacity:1;fill:none;fill-opacity:1=
;stroke:#000000;stroke-width:2.72576761;stroke-linecap:butt;stroke-linejoin=
:round;stroke-miterlimit:4;stroke-dasharray:none;stroke-dashoffset:0;stroke=
-opacity:1;marker-end:url(#Arrow2Mend)" id=3D"path2188" sodipodi:cx=3D"333.=
1926" sodipodi:cy=3D"154.07561" sodipodi:rx=3D"96.620834" sodipodi:ry=3D"28=
.597895" d=3D"M 429.74107,155.1822 A 96.620834,28.597895 0 0 1 346.79834,18=
2.38855 96.620834,28.597895 0 0 1 241.51552,163.10616" sodipodi:start=3D"0.=
038704467" sodipodi:end=3D"2.8203173" sodipodi:open=3D"true"/>
    <path sodipodi:open=3D"true" transform=3D"scale(-1)" sodipodi:end=3D"2.=
8203173" sodipodi:start=3D"0.038704467" d=3D"m -232.72228,-106.30652 a 96.6=
20834,28.597895 0 0 1 -82.94273,27.206351 96.620834,28.597895 0 0 1 -105.28=
282,-19.282385" sodipodi:ry=3D"28.597895" sodipodi:rx=3D"96.620834" sodipod=
i:cy=3D"-107.41311" sodipodi:cx=3D"-329.27075" id=3D"path2192" style=3D"opa=
city:1;fill:none;fill-opacity:1;stroke:#000000;stroke-width:2.72576761;stro=
ke-linecap:butt;stroke-linejoin:round;stroke-miterlimit:4;stroke-dasharray:=
none;stroke-dashoffset:0;stroke-opacity:1;marker-end:url(#Arrow2Mend)" sodi=
podi:type=3D"arc"/>
    <text xml:space=3D"preserve" style=3D"font-style:oblique;font-variant:n=
ormal;font-weight:normal;font-stretch:normal;font-size:17.55430031px;line-h=
eight:0%;font-family:'Bitstream Vera Sans';text-align:start;writing-mode:lr=
-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;stroke-width:=
1.46285844px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x=
=3D"134.6843" y=3D"142.52638" id=3D"text2194"><tspan sodipodi:role=3D"line"=
 id=3D"tspan2196" x=3D"134.6843" y=3D"142.52638" style=3D"font-size:34.7636=
528px;line-height:1.25;stroke-width:1.46285844px">Client</tspan></text>
    <text xml:space=3D"preserve" style=3D"font-style:oblique;font-variant:n=
ormal;font-weight:normal;font-stretch:normal;font-size:17.55430031px;line-h=
eight:0%;font-family:'Bitstream Vera Sans';text-align:start;writing-mode:lr=
-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;stroke-width:=
1.46285844px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x=
=3D"425.64374" y=3D"140.95789" id=3D"text2198"><tspan sodipodi:role=3D"line=
" id=3D"tspan2200" x=3D"425.64374" y=3D"140.95789" style=3D"font-size:34.76=
36528px;line-height:1.25;stroke-width:1.46285844px">Server</tspan></text>
    <text xml:space=3D"preserve" style=3D"font-style:oblique;font-variant:n=
ormal;font-weight:normal;font-stretch:normal;font-size:17.55430031px;line-h=
eight:0%;font-family:'Bitstream Vera Sans';text-align:start;writing-mode:lr=
-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;stroke-width:=
1.46285844px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x=
=3D"303.83789" y=3D"73.624199" id=3D"text2202"><tspan sodipodi:role=3D"line=
" id=3D"tspan2204" x=3D"303.83789" y=3D"73.624199" style=3D"font-size:14.82=
85408px;line-height:1.25;stroke-width:1.46285844px">request</tspan></text>
    <text xml:space=3D"preserve" style=3D"font-style:oblique;font-variant:n=
ormal;font-weight:normal;font-stretch:normal;font-size:17.55430031px;line-h=
eight:0%;font-family:'Bitstream Vera Sans';text-align:start;writing-mode:lr=
-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;stroke-width:=
1.46285844px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x=
=3D"300.05508" y=3D"194.67352" id=3D"text2206"><tspan sodipodi:role=3D"line=
" id=3D"tspan2208" x=3D"300.05508" y=3D"194.67352" style=3D"font-size:14.82=
85408px;line-height:1.25;stroke-width:1.46285844px">response</tspan></text>
    <text xml:space=3D"preserve" style=3D"font-style:normal;font-variant:no=
rmal;font-weight:bold;font-stretch:normal;font-size:17.55430031px;line-heig=
ht:0%;font-family:Courier;text-align:start;writing-mode:lr-tb;text-anchor:s=
tart;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1.46285844px;stro=
ke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x=3D"430.9397" y=3D=
"166.68085" id=3D"text2210"><tspan sodipodi:role=3D"line" id=3D"tspan2212" =
x=3D"430.9397" y=3D"166.68085" style=3D"font-size:14.8285408px;line-height:=
-2;stroke-width:1.46285844px">send()</tspan></text>
    <text xml:space=3D"preserve" style=3D"font-style:normal;font-variant:no=
rmal;font-weight:bold;font-stretch:normal;font-size:17.55430031px;line-heig=
ht:0%;font-family:Courier;text-align:start;writing-mode:lr-tb;text-anchor:s=
tart;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1.46285844px;stro=
ke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x=3D"429.42657" y=
=3D"102.37341" id=3D"text2214"><tspan sodipodi:role=3D"line" id=3D"tspan221=
6" x=3D"429.42657" y=3D"102.37341" style=3D"font-size:14.8285408px;line-hei=
ght:-2;stroke-width:1.46285844px">recv()</tspan></text>
    <text id=3D"text2218" y=3D"167.43744" x=3D"183.5451" style=3D"font-styl=
e:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-size=
:17.55430031px;line-height:0%;font-family:Courier;text-align:start;writing-=
mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;stroke=
-width:1.46285844px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacit=
y:1" xml:space=3D"preserve"><tspan y=3D"167.43744" x=3D"183.5451" id=3D"tsp=
an2220" sodipodi:role=3D"line" style=3D"font-size:14.8285408px;line-height:=
-2;stroke-width:1.46285844px">recv()</tspan></text>
    <text id=3D"text2222" y=3D"103.12997" x=3D"181.27536" style=3D"font-sty=
le:normal;font-variant:normal;font-weight:bold;font-stretch:normal;font-siz=
e:17.55430031px;line-height:0%;font-family:Courier;text-align:start;writing=
-mode:lr-tb;text-anchor:start;fill:#000000;fill-opacity:1;stroke:none;strok=
e-width:1.46285844px;stroke-linecap:butt;stroke-linejoin:miter;stroke-opaci=
ty:1" xml:space=3D"preserve"><tspan y=3D"103.12997" x=3D"181.27536" id=3D"t=
span2224" sodipodi:role=3D"line" style=3D"font-size:14.8285408px;line-heigh=
t:-2;stroke-width:1.46285844px">send()</tspan></text>
    <path style=3D"fill:none;fill-opacity:0.75;fill-rule:evenodd;stroke:#00=
0000;stroke-width:1.05918145;stroke-linecap:butt;stroke-linejoin:miter;stro=
ke-miterlimit:4;stroke-dasharray:1.05918148, 2.11836292;stroke-dashoffset:0=
;stroke-opacity:1" d=3D"m 315.94278,48.657783 c -6.88443,0.327829 -15.18322=
,-5.068927 -21.18363,-3.026235 -5.85233,1.992285 -12.54151,9.059037 -14.374=
59,15.131167 -2.20189,7.293732 -0.58089,17.50062 2.26967,24.966419 2.44531,=
6.404439 10.80687,10.430167 13.61804,16.644276 1.98038,4.3777 1.97738,10.51=
924 0.75656,15.13117 -1.04886,3.96238 -5.24749,6.93165 -7.56559,10.59181 -2=
.47342,3.90542 -6.42731,7.90615 -6.80901,12.10494 -0.37484,4.12335 2.20111,=
9.09432 4.53937,12.86148 2.2011,3.54624 8.48891,5.54014 9.07867,9.07871 0.6=
7116,4.027 -3.08125,9.30531 -5.2959,13.61804 -2.57689,5.01816 -8.33547,9.46=
918 -9.0787,14.3746 -0.51771,3.41672 2.41431,8.05325 5.29593,10.59182 7.710=
19,6.79232 17.22497,14.01937 26.47951,17.40084 3.85914,1.41005 8.70419,-1.6=
4048 12.86149,-3.02624 3.40827,-1.13609 6.37005,-3.9979 9.83527,-4.53935 4.=
60475,-0.7195 9.65998,0.0112 14.3746,0.75657 4.86842,0.7687 9.56066,2.61577=
 14.3746,3.78278 3.50822,0.85048 8.0378,3.87775 10.5918,2.26968 4.25504,-2.=
6791 9.24617,-9.71139 9.83527,-15.13117 0.67182,-6.18077 -2.61985,-13.99348=
 -6.05247,-19.6705 -3.12421,-5.16697 -10.89468,-7.68712 -13.61805,-12.8615 =
-2.32036,-4.40868 -2.79991,-10.9385 -1.51311,-15.88774 1.99164,-7.66006 8.9=
0991,-14.29968 11.34836,-21.94018 1.34434,-4.21224 1.55911,-9.66028 0,-13.6=
1802 -1.7193,-4.36441 -8.20644,-7.00486 -9.83525,-11.34839 -1.3974,-3.72643=
 -0.58425,-8.973102 0.75656,-12.861481 1.18104,-3.425009 5.19047,-5.725989 =
6.80903,-9.0787 1.91206,-3.960686 3.91118,-8.624866 3.78281,-12.861493 -0.1=
2371,-4.085514 -1.69419,-9.092405 -4.53938,-12.10493 -5.72916,-6.066175 -13=
.54228,-12.265661 -21.18362,-15.131165 -4.4636,-1.673844 -10.12919,1.664692=
 -15.13115,1.513116 -3.32017,-0.100608 -6.65592,-2.622932 -9.83527,-2.26967=
2 -3.62968,0.403296 -6.88443,4.362806 -10.59182,4.539348 z" id=3D"path2226"=
 sodipodi:nodetypes=3D"csssssssssssssssssssssssssssssssss" inkscape:connect=
or-curvature=3D"0"/>
    <text xml:space=3D"preserve" style=3D"font-style:italic;font-variant:no=
rmal;font-weight:normal;font-stretch:normal;font-size:17.55430031px;line-he=
ight:0%;font-family:sans-serif;text-align:start;writing-mode:lr-tb;text-anc=
hor:start;fill:#000000;fill-opacity:1;stroke:none;stroke-width:1.46285844px=
;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" x=3D"245.29114=
" y=3D"-211.79449" id=3D"text2228" transform=3D"rotate(58.987712)"><tspan s=
odipodi:role=3D"line" id=3D"tspan2230" x=3D"245.29114" y=3D"-211.79449" sty=
le=3D"font-size:12.35641861px;line-height:1.25;font-family:sans-serif;strok=
e-width:1.46285844px">The Network</tspan></text>
    <flowRoot xml:space=3D"preserve" id=3D"flowRoot883" style=3D"fill:black=
;fill-opacity:1;stroke:none;font-family:sans-serif;font-style:normal;font-w=
eight:normal;font-size:13.33333333px;line-height:1.25;letter-spacing:0px;wo=
rd-spacing:0px;-inkscape-font-specification:'sans-serif, Normal';font-stret=
ch:normal;font-variant:normal;text-anchor:start;text-align:start;writing-mo=
de:lr;font-variant-ligatures:normal;font-variant-caps:normal;font-variant-n=
umeric:normal;font-feature-settings:normal"><flowRegion id=3D"flowRegion885=
"><rect id=3D"rect887" width=3D"551.54327" height=3D"293.95438" x=3D"-38.38=
5796" y=3D"-40.199459"/></flowRegion><flowPara id=3D"flowPara889"/></flowRo=
ot>  </g>
</svg>
------MultipartBoundary--ojhY9uEodBy4uXu3c34XxcgrJTzoZvfDUtYUFOiVCv------
